// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Decco = require("decco/src/Decco.bs.js");
var Ethers = require("./lib/Ethers.bs.js");
var Serbet = require("serbet/src/Serbet.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function discountCodeData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var userAddress = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "userAddress"), null));
  if (userAddress.TAG === /* Ok */0) {
    var marketIndex = Decco.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "marketIndex"), null));
    if (marketIndex.TAG === /* Ok */0) {
      var isWithdrawFromLong = Decco.boolFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "isWithdrawFromLong"), null));
      if (isWithdrawFromLong.TAG === /* Ok */0) {
        var withdrawAmount = Curry._1(Ethers.BigNumber.bnCoder[1], Belt_Option.getWithDefault(Js_dict.get(dict$1, "withdrawAmount"), null));
        if (withdrawAmount.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    userAddress: userAddress._0,
                    marketIndex: marketIndex._0,
                    isWithdrawFromLong: isWithdrawFromLong._0,
                    withdrawAmount: withdrawAmount._0
                  }
                };
        }
        var e = withdrawAmount._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".withdrawAmount" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = isWithdrawFromLong._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".isWithdrawFromLong" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = marketIndex._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".marketIndex" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = userAddress._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".userAddress" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function body_in_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var input = discountCodeData_decode(Belt_Option.getWithDefault(Js_dict.get(dict._0, "input"), null));
  if (input.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: {
              input: input._0
            }
          };
  }
  var e = input._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".input" + e.path,
            message: e.message,
            value: e.value
          }
        };
}

function body_out_encode(v) {
  return Js_dict.fromArray([
              [
                "eligibleForDiscount",
                Decco.boolToJson(v.eligibleForDiscount)
              ],
              [
                "error",
                Decco.optionToJson(Decco.stringToJson, v.error)
              ],
              [
                "expiry",
                Decco.stringToJson(v.expiry)
              ],
              [
                "nonce",
                Decco.stringToJson(v.nonce)
              ],
              [
                "discountWithdrawFee",
                Decco.stringToJson(v.discountWithdrawFee)
              ],
              [
                "v",
                Decco.intToJson(v.v)
              ],
              [
                "r",
                Decco.stringToJson(v.r)
              ],
              [
                "s",
                Decco.stringToJson(v.s)
              ]
            ]);
}

console.log("Jason is here!!");

var checkDiscount = Serbet.endpoint(undefined, {
      path: "/check-discount",
      verb: /* POST */1,
      handler: (function (req) {
          return Curry._1(req.requireBody, body_in_decode).then(function (param) {
                      return Promise.resolve({
                                  TAG: /* OkJson */4,
                                  _0: body_out_encode({
                                        eligibleForDiscount: true,
                                        error: undefined,
                                        expiry: "string",
                                        nonce: "string",
                                        discountWithdrawFee: "string",
                                        v: 213,
                                        r: "r",
                                        s: "s"
                                      })
                                });
                    });
        })
    });

var ApolloQueryResult;

exports.ApolloQueryResult = ApolloQueryResult;
exports.discountCodeData_decode = discountCodeData_decode;
exports.body_in_decode = body_in_decode;
exports.body_out_encode = body_out_encode;
exports.checkDiscount = checkDiscount;
/*  Not a pure module */
