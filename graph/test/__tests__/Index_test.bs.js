// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Queries = require("../Queries.bs.js");
var StateChange = require("../StateChange.bs.js");
var TestFramework = require("reason-test-framework/src/TestFramework.bs.js");

function emptyPromise(param) {
  return new Promise((function (resolve, param) {
                return resolve(StateChange.emptyEventGroups);
              }));
}

var allStateChanges = {
  contents: new Promise((function (resolve, param) {
          return resolve(StateChange.emptyEventGroups);
        }))
};

Curry._2(TestFramework.describe, "All Tests", (function (param) {
        Curry._1(param.beforeAll, (function (param) {
                var allStateChangesRaw = Queries.getAllStateChanges(undefined);
                allStateChanges.contents = StateChange.splitIntoEventGroups(StateChange.getAllStateChangeEvents(allStateChangesRaw));
                
              }));
        Curry._2(TestFramework.describe, "V1 event", (function (param) {
                var testAsync = param.testAsync;
                Curry._2(testAsync, "should occur exactly ONCE", (function (param) {
                        var expectEqual = param.expectEqual;
                        var callback = param.callback;
                        allStateChanges.contents.then(function (param) {
                              Curry._2(expectEqual, param.allV1Events.length, 1);
                              return Curry._1(callback, undefined);
                            });
                        
                      }));
                return Curry._2(testAsync, "should setup the correct initial data in the global state", (function (param) {
                              var expectEqual = param.expectEqual;
                              var callback = param.callback;
                              allStateChanges.contents.then(function (param) {
                                    Curry._2(expectEqual, param.allV1Events.length, 1);
                                    return Curry._1(callback, undefined);
                                  });
                              
                            }));
              }));
        return Curry._2(param.testAsync, "All events should be classified - NO UNKNOWN EVENTS", (function (param) {
                      var expectEqual = param.expectEqual;
                      var callback = param.callback;
                      allStateChanges.contents.then(function (param) {
                            Curry._2(expectEqual, param.allUnclassifiedEvents.length, 0);
                            return Curry._1(callback, undefined);
                          });
                      
                    }));
      }));

exports.emptyPromise = emptyPromise;
exports.allStateChanges = allStateChanges;
/* allStateChanges Not a pure module */
