// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Queries = require("../Queries.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var StateChange = require("../StateChange.bs.js");
var TestFramework = require("reason-test-framework/src/TestFramework.bs.js");

function emptyPromise(param) {
  return new Promise((function (resolve, param) {
                return resolve(StateChange.emptyEventGroups);
              }));
}

var allStateChanges = {
  contents: new Promise((function (resolve, param) {
          return resolve(StateChange.emptyEventGroups);
        }))
};

Curry._2(TestFramework.describe, "All Tests", (function (param) {
        Curry._1(param.beforeAll, (function (param) {
                var allStateChangesRaw = Queries.getAllStateChanges(undefined);
                allStateChanges.contents = StateChange.splitIntoEventGroups(StateChange.getAllStateChangeEvents(allStateChangesRaw));
                
              }));
        Curry._2(TestFramework.describe, "V1 event", (function (param) {
                var testAsync = param.testAsync;
                Curry._2(testAsync, "should occur exactly ONCE", (function (param) {
                        var expectEqual = param.expectEqual;
                        var callback = param.callback;
                        allStateChanges.contents.then(function (param) {
                              Curry._2(expectEqual, param.allV1Events.length, 1);
                              return Curry._1(callback, undefined);
                            });
                        
                      }));
                return Curry._2(testAsync, "should setup the correct initial data in the global state", (function (param) {
                              var expectNotEqual = param.expectNotEqual;
                              var expectEqual = param.expectEqual;
                              var expectTrue = param.expectTrue;
                              var callback = param.callback;
                              allStateChanges.contents.then(function (param) {
                                    var allV1Events = param.allV1Events;
                                    Curry._2(expectEqual, allV1Events.length, 1);
                                    var match = Belt_Array.getExn(allV1Events, 0);
                                    var match$1 = match.data;
                                    var staker = match$1.staker;
                                    var tokenFactory = match$1.tokenFactory;
                                    var admin = match$1.admin;
                                    var timestamp = match.timestamp;
                                    Queries.getGlobalStateAtBlock(match.blockNumber).then(function (result) {
                                          if (result !== undefined) {
                                            Curry._2(expectEqual, result.contractVersion.toString(), "1");
                                            Curry._2(expectEqual, result.latestMarketIndex.toString(), "0");
                                            Curry._2(expectEqual, result.totalFloatMinted.toString(), "0");
                                            Curry._2(expectEqual, result.totalTxs.toString(), "1");
                                            Curry._2(expectEqual, result.totalUsers.toString(), "1");
                                            Curry._2(expectEqual, result.timestampLaunched.toString(), String(timestamp));
                                            Curry._2(expectEqual, result.staker.address, staker);
                                            Curry._2(expectEqual, result.tokenFactory.address, tokenFactory);
                                            Curry._2(expectEqual, result.adminAddress, admin);
                                            Curry._2(expectNotEqual, result.txHash, "");
                                          } else {
                                            Curry._1(expectTrue, false);
                                          }
                                          return Curry._1(callback, undefined);
                                        });
                                    
                                  });
                              
                            }));
              }));
        return Curry._2(param.testAsync, "All events should be classified - NO UNKNOWN EVENTS", (function (param) {
                      var expectEqual = param.expectEqual;
                      var callback = param.callback;
                      allStateChanges.contents.then(function (param) {
                            Curry._2(expectEqual, param.allUnclassifiedEvents.length, 0);
                            return Curry._1(callback, undefined);
                          });
                      
                    }));
      }));

exports.emptyPromise = emptyPromise;
exports.allStateChanges = allStateChanges;
/* allStateChanges Not a pure module */
