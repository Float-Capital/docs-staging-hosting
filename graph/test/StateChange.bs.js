// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var BnJs = require("bn.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function getBnParam(paramsObject, paramName) {
  return Belt_Option.getExn(Belt_Option.map(Js_dict.get(paramsObject, paramName), (function (prim) {
                    return new BnJs(prim);
                  })));
}

function getStr(paramsObject, paramName) {
  return Belt_Option.getExn(Js_dict.get(paramsObject, paramName));
}

function getStateChange(param) {
  var eventName = param.eventName;
  var paramsObject = {};
  Belt_Array.forEach(param.params, (function (param) {
          paramsObject[param.paramName] = param.param;
          
        }));
  var unimplementedPlaceholder = {
    TODO: "This isn't implemented"
  };
  switch (eventName) {
    case "Approval" :
        return {
                TAG: /* Approval */5,
                _0: unimplementedPlaceholder
              };
    case "DeployV1" :
        return {
                TAG: /* DeployV1 */12,
                _0: unimplementedPlaceholder
              };
    case "FeesChanges" :
        return {
                TAG: /* FeesChanges */13,
                _0: unimplementedPlaceholder
              };
    case "FloatMinted" :
        return {
                TAG: /* FloatMinted */15,
                _0: unimplementedPlaceholder
              };
    case "LongMinted" :
        return {
                TAG: /* LongMinted */10,
                _0: unimplementedPlaceholder
              };
    case "LongRedeem" :
        return {
                TAG: /* LongRedeem */11,
                _0: unimplementedPlaceholder
              };
    case "PriceUpdate" :
        return {
                TAG: /* PriceUpdate */2,
                _0: unimplementedPlaceholder
              };
    case "ShortMinted" :
        return {
                TAG: /* ShortMinted */6,
                _0: unimplementedPlaceholder
              };
    case "ShortRedeem" :
        return {
                TAG: /* ShortRedeem */9,
                _0: unimplementedPlaceholder
              };
    case "StakeAdded" :
        return {
                TAG: /* StakeAdded */7,
                _0: unimplementedPlaceholder
              };
    case "StateAdded" :
        return {
                TAG: /* StateAdded */8,
                _0: unimplementedPlaceholder
              };
    case "SyntheticTokenCreated" :
        return {
                TAG: /* SyntheticTokenCreated */14,
                _0: unimplementedPlaceholder
              };
    case "TokenPriceRefreshed" :
        return {
                TAG: /* TokenPriceRefreshed */3,
                _0: unimplementedPlaceholder
              };
    case "Transfer" :
        return {
                TAG: /* Transfer */1,
                _0: unimplementedPlaceholder
              };
    case "V1" :
        return {
                TAG: /* V1 */16,
                _0: {
                  admin: Belt_Option.getExn(Js_dict.get(paramsObject, "admin")),
                  tokenFactory: Belt_Option.getExn(Js_dict.get(paramsObject, "tokenFactory")),
                  staker: Belt_Option.getExn(Js_dict.get(paramsObject, "staker"))
                }
              };
    case "ValueLockedInSystem" :
        return {
                TAG: /* ValueLockedInSystem */4,
                _0: {
                  marketIndex: getBnParam(paramsObject, "marketIndex"),
                  totalValueLockedInMarket: getBnParam(paramsObject, "totalValueLockedInMarket"),
                  longValue: getBnParam(paramsObject, "longValue"),
                  shortValue: getBnParam(paramsObject, "shortValue")
                }
              };
    default:
      return {
              TAG: /* Unclassified */0,
              _0: {
                name: eventName,
                data: paramsObject
              }
            };
  }
}

function getAllStateChangeEvents(allStateChangesRaw) {
  return allStateChangesRaw.then(function (rawStateChanges) {
              return Promise.resolve(Belt_Array.reduce(rawStateChanges, [], (function (currentArrayOfStateChanges, param) {
                                var timestamp = param.timestamp;
                                var blockNumber = param.blockNumber;
                                var id = param.id;
                                return Belt_Array.concat(currentArrayOfStateChanges, Belt_Array.map(param.txEventParamList, (function (eventRaw) {
                                                  return {
                                                          blockNumber: blockNumber.toNumber(),
                                                          timestamp: timestamp.toNumber(),
                                                          txHash: id,
                                                          data: getStateChange(eventRaw)
                                                        };
                                                })));
                              })));
            });
}

var emptyEventGroups_allV1Events = [];

var emptyEventGroups_allUnclassifiedEvents = [];

var emptyEventGroups = {
  allV1Events: emptyEventGroups_allV1Events,
  allUnclassifiedEvents: emptyEventGroups_allUnclassifiedEvents
};

function splitIntoEventGroups(allStateChanges) {
  return allStateChanges.then(function (stateChanges) {
              return Promise.resolve(Belt_Array.reduce(stateChanges, emptyEventGroups, (function (currentEventGroups, param) {
                                var data = param.data;
                                switch (data.TAG | 0) {
                                  case /* Unclassified */0 :
                                      return {
                                              allV1Events: currentEventGroups.allV1Events,
                                              allUnclassifiedEvents: Belt_Array.concat(currentEventGroups.allUnclassifiedEvents, [data._0])
                                            };
                                  case /* V1 */16 :
                                      return {
                                              allV1Events: Belt_Array.concat(currentEventGroups.allV1Events, [{
                                                      blockNumber: param.blockNumber,
                                                      timestamp: param.timestamp,
                                                      txHash: param.txHash,
                                                      data: data._0
                                                    }]),
                                              allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
                                            };
                                  default:
                                    return currentEventGroups;
                                }
                              })));
            });
}

exports.getBnParam = getBnParam;
exports.getStr = getStr;
exports.getStateChange = getStateChange;
exports.getAllStateChangeEvents = getAllStateChangeEvents;
exports.emptyEventGroups = emptyEventGroups;
exports.splitIntoEventGroups = splitIntoEventGroups;
/* bn.js Not a pure module */
