// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Converters = require("./Converters.bs.js");

function getStateChange(param) {
  var paramsObject = {};
  Belt_Array.forEach(param.params, (function (param) {
          paramsObject[param.paramName] = param.param;
          
        }));
  return Converters.covertToStateChange(param.eventName, paramsObject);
}

function getAllStateChangeEvents(allStateChangesRaw) {
  return allStateChangesRaw.then(function (rawStateChanges) {
              return Promise.resolve(Belt_Array.reduce(rawStateChanges, [], (function (currentArrayOfStateChanges, param) {
                                var timestamp = param.timestamp;
                                var blockNumber = param.blockNumber;
                                var id = param.id;
                                return Belt_Array.concat(currentArrayOfStateChanges, Belt_Array.map(param.txEventParamList, (function (eventRaw) {
                                                  return {
                                                          blockNumber: blockNumber.toNumber(),
                                                          timestamp: timestamp.toNumber(),
                                                          txHash: id,
                                                          data: getStateChange(eventRaw)
                                                        };
                                                })));
                              })));
            });
}

var emptyEventGroups_allV1Events = [];

var emptyEventGroups_allUnclassifiedEvents = [];

var emptyEventGroups = {
  allV1Events: emptyEventGroups_allV1Events,
  allUnclassifiedEvents: emptyEventGroups_allUnclassifiedEvents
};

function splitIntoEventGroups(allStateChanges) {
  return allStateChanges.then(function (stateChanges) {
              return Promise.resolve(Belt_Array.reduce(stateChanges, emptyEventGroups, (function (currentEventGroups, param) {
                                var data = param.data;
                                switch (data.TAG | 0) {
                                  case /* Unclassified */0 :
                                      return {
                                              allV1Events: currentEventGroups.allV1Events,
                                              allUnclassifiedEvents: Belt_Array.concat(currentEventGroups.allUnclassifiedEvents, [data._0])
                                            };
                                  case /* V1 */16 :
                                      return {
                                              allV1Events: Belt_Array.concat(currentEventGroups.allV1Events, [{
                                                      blockNumber: param.blockNumber,
                                                      timestamp: param.timestamp,
                                                      txHash: param.txHash,
                                                      data: data._0
                                                    }]),
                                              allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
                                            };
                                  default:
                                    return currentEventGroups;
                                }
                              })));
            });
}

exports.getStateChange = getStateChange;
exports.getAllStateChangeEvents = getAllStateChangeEvents;
exports.emptyEventGroups = emptyEventGroups;
exports.splitIntoEventGroups = splitIntoEventGroups;
/* Converters Not a pure module */
