// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Converters = require("./Converters.bs.js");

function getStateChange(param) {
  var paramsObject = {};
  Belt_Array.forEach(param.params, (function (param) {
          paramsObject[param.paramName] = param.param;
          
        }));
  return Converters.covertToStateChange(param.eventName, paramsObject);
}

function getAllStateChangeEvents(allStateChangesRaw) {
  return allStateChangesRaw.then(function (rawStateChanges) {
              return Promise.resolve(Belt_Array.reduce(rawStateChanges, [], (function (currentArrayOfStateChanges, param) {
                                var timestamp = param.timestamp;
                                var blockNumber = param.blockNumber;
                                var id = param.id;
                                return Belt_Array.concat(currentArrayOfStateChanges, Belt_Array.map(param.txEventParamList, (function (eventRaw) {
                                                  return {
                                                          blockNumber: blockNumber.toNumber(),
                                                          timestamp: timestamp.toNumber(),
                                                          txHash: id,
                                                          data: getStateChange(eventRaw)
                                                        };
                                                })));
                              })));
            });
}

function addEventToCorrectGrouping(currentEventGroups, param) {
  var data = param.data;
  switch (data.TAG | 0) {
    case /* Unclassified */0 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allPriceUpdateEvents: currentEventGroups.allPriceUpdateEvents,
                allTokenPriceRefreshedEvents: currentEventGroups.allTokenPriceRefreshedEvents,
                allValueLockedInSystemEvents: currentEventGroups.allValueLockedInSystemEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allShortMintedEvents: currentEventGroups.allShortMintedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allStateAddedEvents: currentEventGroups.allStateAddedEvents,
                allShortRedeemEvents: currentEventGroups.allShortRedeemEvents,
                allLongMintedEvents: currentEventGroups.allLongMintedEvents,
                allLongRedeemEvents: currentEventGroups.allLongRedeemEvents,
                allDeployV1Events: currentEventGroups.allDeployV1Events,
                allFeesChangesEvents: currentEventGroups.allFeesChangesEvents,
                allSyntheticTokenCreatedEvents: currentEventGroups.allSyntheticTokenCreatedEvents,
                allFloatMintedEvents: currentEventGroups.allFloatMintedEvents,
                allV1Events: currentEventGroups.allV1Events,
                allUnclassifiedEvents: Belt_Array.concat(currentEventGroups.allUnclassifiedEvents, [data._0])
              };
    case /* V1 */16 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allPriceUpdateEvents: currentEventGroups.allPriceUpdateEvents,
                allTokenPriceRefreshedEvents: currentEventGroups.allTokenPriceRefreshedEvents,
                allValueLockedInSystemEvents: currentEventGroups.allValueLockedInSystemEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allShortMintedEvents: currentEventGroups.allShortMintedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allStateAddedEvents: currentEventGroups.allStateAddedEvents,
                allShortRedeemEvents: currentEventGroups.allShortRedeemEvents,
                allLongMintedEvents: currentEventGroups.allLongMintedEvents,
                allLongRedeemEvents: currentEventGroups.allLongRedeemEvents,
                allDeployV1Events: currentEventGroups.allDeployV1Events,
                allFeesChangesEvents: currentEventGroups.allFeesChangesEvents,
                allSyntheticTokenCreatedEvents: currentEventGroups.allSyntheticTokenCreatedEvents,
                allFloatMintedEvents: currentEventGroups.allFloatMintedEvents,
                allV1Events: Belt_Array.concat(currentEventGroups.allV1Events, [{
                        blockNumber: param.blockNumber,
                        timestamp: param.timestamp,
                        txHash: param.txHash,
                        data: data._0
                      }]),
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    default:
      return currentEventGroups;
  }
}

function splitIntoEventGroups(allStateChanges) {
  return allStateChanges.then(function (stateChanges) {
              return Promise.resolve(Belt_Array.reduce(stateChanges, Converters.emptyEventGroups, addEventToCorrectGrouping));
            });
}

exports.getStateChange = getStateChange;
exports.getAllStateChangeEvents = getAllStateChangeEvents;
exports.addEventToCorrectGrouping = addEventToCorrectGrouping;
exports.splitIntoEventGroups = splitIntoEventGroups;
/* Converters Not a pure module */
