// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Decco = require("decco/src/Decco.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var ConverterTypes = require("./ConverterTypes.bs.js");

function transferData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var from = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "from"), null));
  if (from.TAG === /* Ok */0) {
    var to = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "to"), null));
    if (to.TAG === /* Ok */0) {
      var amount = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "amount"), null));
      if (amount.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  from: from._0,
                  to: to._0,
                  amount: amount._0
                }
              };
      }
      var e = amount._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".amount" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = to._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".to" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = from._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".from" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function approvalData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var owner = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "owner"), null));
  if (owner.TAG === /* Ok */0) {
    var spender = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "spender"), null));
    if (spender.TAG === /* Ok */0) {
      var value = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "value"), null));
      if (value.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  owner: owner._0,
                  spender: spender._0,
                  value: value._0
                }
              };
      }
      var e = value._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".value" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = spender._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".spender" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = owner._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".owner" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function accumulativeIssuancePerStakedSynthSnapshotCreatedData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var marketIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "marketIndex"), null));
  if (marketIndex.TAG === /* Ok */0) {
    var accumulativeFloatIssuanceSnapshotIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "accumulativeFloatIssuanceSnapshotIndex"), null));
    if (accumulativeFloatIssuanceSnapshotIndex.TAG === /* Ok */0) {
      var accumulativeLong = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "accumulativeLong"), null));
      if (accumulativeLong.TAG === /* Ok */0) {
        var accumulativeShort = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "accumulativeShort"), null));
        if (accumulativeShort.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    marketIndex: marketIndex._0,
                    accumulativeFloatIssuanceSnapshotIndex: accumulativeFloatIssuanceSnapshotIndex._0,
                    accumulativeLong: accumulativeLong._0,
                    accumulativeShort: accumulativeShort._0
                  }
                };
        }
        var e = accumulativeShort._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".accumulativeShort" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = accumulativeLong._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".accumulativeLong" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = accumulativeFloatIssuanceSnapshotIndex._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".accumulativeFloatIssuanceSnapshotIndex" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = marketIndex._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".marketIndex" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function systemStateUpdatedData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var marketIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "marketIndex"), null));
  if (marketIndex.TAG === /* Ok */0) {
    var updateIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "updateIndex"), null));
    if (updateIndex.TAG === /* Ok */0) {
      var underlyingAssetPrice = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "underlyingAssetPrice"), null));
      if (underlyingAssetPrice.TAG === /* Ok */0) {
        var longValue = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "longValue"), null));
        if (longValue.TAG === /* Ok */0) {
          var shortValue = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "shortValue"), null));
          if (shortValue.TAG === /* Ok */0) {
            var longPrice = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "longPrice"), null));
            if (longPrice.TAG === /* Ok */0) {
              var shortPrice = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "shortPrice"), null));
              if (shortPrice.TAG === /* Ok */0) {
                return {
                        TAG: /* Ok */0,
                        _0: {
                          marketIndex: marketIndex._0,
                          updateIndex: updateIndex._0,
                          underlyingAssetPrice: underlyingAssetPrice._0,
                          longValue: longValue._0,
                          shortValue: shortValue._0,
                          longPrice: longPrice._0,
                          shortPrice: shortPrice._0
                        }
                      };
              }
              var e = shortPrice._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".shortPrice" + e.path,
                        message: e.message,
                        value: e.value
                      }
                    };
            }
            var e$1 = longPrice._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".longPrice" + e$1.path,
                      message: e$1.message,
                      value: e$1.value
                    }
                  };
          }
          var e$2 = shortValue._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".shortValue" + e$2.path,
                    message: e$2.message,
                    value: e$2.value
                  }
                };
        }
        var e$3 = longValue._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".longValue" + e$3.path,
                  message: e$3.message,
                  value: e$3.value
                }
              };
      }
      var e$4 = underlyingAssetPrice._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".underlyingAssetPrice" + e$4.path,
                message: e$4.message,
                value: e$4.value
              }
            };
    }
    var e$5 = updateIndex._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".updateIndex" + e$5.path,
              message: e$5.message,
              value: e$5.value
            }
          };
  }
  var e$6 = marketIndex._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".marketIndex" + e$6.path,
            message: e$6.message,
            value: e$6.value
          }
        };
}

function gemsCollectedData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var user = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "user"), null));
  if (user.TAG === /* Ok */0) {
    var gems = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "gems"), null));
    if (gems.TAG === /* Ok */0) {
      var streak = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "streak"), null));
      if (streak.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  user: user._0,
                  gems: gems._0,
                  streak: streak._0
                }
              };
      }
      var e = streak._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".streak" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = gems._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".gems" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = user._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".user" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function nextPriceSyntheticPositionShiftData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var synthShifted = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "synthShifted"), null));
  if (synthShifted.TAG === /* Ok */0) {
    var marketIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "marketIndex"), null));
    if (marketIndex.TAG === /* Ok */0) {
      var oracleUpdateIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "oracleUpdateIndex"), null));
      if (oracleUpdateIndex.TAG === /* Ok */0) {
        var isShiftFromLong = Curry._1(ConverterTypes.boolStringDeccoCodex[1], Belt_Option.getWithDefault(Js_dict.get(dict$1, "isShiftFromLong"), null));
        if (isShiftFromLong.TAG === /* Ok */0) {
          var user = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "user"), null));
          if (user.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      synthShifted: synthShifted._0,
                      marketIndex: marketIndex._0,
                      oracleUpdateIndex: oracleUpdateIndex._0,
                      isShiftFromLong: isShiftFromLong._0,
                      user: user._0
                    }
                  };
          }
          var e = user._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".user" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = isShiftFromLong._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".isShiftFromLong" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = oracleUpdateIndex._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".oracleUpdateIndex" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = marketIndex._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".marketIndex" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = synthShifted._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".synthShifted" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function nextPriceStakeShiftData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var user = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "user"), null));
  if (user.TAG === /* Ok */0) {
    var marketIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "marketIndex"), null));
    if (marketIndex.TAG === /* Ok */0) {
      var amount = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "amount"), null));
      if (amount.TAG === /* Ok */0) {
        var isShiftFromLong = Curry._1(ConverterTypes.boolStringDeccoCodex[1], Belt_Option.getWithDefault(Js_dict.get(dict$1, "isShiftFromLong"), null));
        if (isShiftFromLong.TAG === /* Ok */0) {
          var userShiftIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "userShiftIndex"), null));
          if (userShiftIndex.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      user: user._0,
                      marketIndex: marketIndex._0,
                      amount: amount._0,
                      isShiftFromLong: isShiftFromLong._0,
                      userShiftIndex: userShiftIndex._0
                    }
                  };
          }
          var e = userShiftIndex._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".userShiftIndex" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = isShiftFromLong._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".isShiftFromLong" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = amount._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".amount" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = marketIndex._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".marketIndex" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = user._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".user" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function executeNextPriceSettlementsUserData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var marketIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "marketIndex"), null));
  if (marketIndex.TAG === /* Ok */0) {
    var userAddress = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "userAddress"), null));
    if (userAddress.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                marketIndex: marketIndex._0,
                userAddress: userAddress._0
              }
            };
    }
    var e = userAddress._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".userAddress" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = marketIndex._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".marketIndex" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function nextPriceDepositData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var depositAdded = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "depositAdded"), null));
  if (depositAdded.TAG === /* Ok */0) {
    var marketIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "marketIndex"), null));
    if (marketIndex.TAG === /* Ok */0) {
      var oracleUpdateIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "oracleUpdateIndex"), null));
      if (oracleUpdateIndex.TAG === /* Ok */0) {
        var isLong = Curry._1(ConverterTypes.boolStringDeccoCodex[1], Belt_Option.getWithDefault(Js_dict.get(dict$1, "isLong"), null));
        if (isLong.TAG === /* Ok */0) {
          var user = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "user"), null));
          if (user.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      depositAdded: depositAdded._0,
                      marketIndex: marketIndex._0,
                      oracleUpdateIndex: oracleUpdateIndex._0,
                      isLong: isLong._0,
                      user: user._0
                    }
                  };
          }
          var e = user._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".user" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = isLong._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".isLong" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = oracleUpdateIndex._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".oracleUpdateIndex" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = marketIndex._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".marketIndex" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = depositAdded._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".depositAdded" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function longShortV1Data_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var admin = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "admin"), null));
  if (admin.TAG === /* Ok */0) {
    var tokenFactory = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "tokenFactory"), null));
    if (tokenFactory.TAG === /* Ok */0) {
      var staker = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "staker"), null));
      if (staker.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  admin: admin._0,
                  tokenFactory: tokenFactory._0,
                  staker: staker._0
                }
              };
      }
      var e = staker._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".staker" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = tokenFactory._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".tokenFactory" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = admin._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".admin" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function stakerV1Data_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var floatAddress = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "floatAddress"), null));
  if (floatAddress.TAG === /* Ok */0) {
    var floatPercentage = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "floatPercentage"), null));
    if (floatPercentage.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: {
                floatAddress: floatAddress._0,
                floatPercentage: floatPercentage._0
              }
            };
    }
    var e = floatPercentage._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".floatPercentage" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var e$1 = floatAddress._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".floatAddress" + e$1.path,
            message: e$1.message,
            value: e$1.value
          }
        };
}

function syntheticMarketCreatedData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var marketIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "marketIndex"), null));
  if (marketIndex.TAG === /* Ok */0) {
    var longTokenAddress = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "longTokenAddress"), null));
    if (longTokenAddress.TAG === /* Ok */0) {
      var shortTokenAddress = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "shortTokenAddress"), null));
      if (shortTokenAddress.TAG === /* Ok */0) {
        var paymentAddress = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "paymentAddress"), null));
        if (paymentAddress.TAG === /* Ok */0) {
          var initialAssetPrice = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "initialAssetPrice"), null));
          if (initialAssetPrice.TAG === /* Ok */0) {
            var name = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "name"), null));
            if (name.TAG === /* Ok */0) {
              var symbol = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "symbol"), null));
              if (symbol.TAG === /* Ok */0) {
                var oracleAddress = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "oracleAddress"), null));
                if (oracleAddress.TAG === /* Ok */0) {
                  var yieldManagerAddress = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "yieldManagerAddress"), null));
                  if (yieldManagerAddress.TAG === /* Ok */0) {
                    return {
                            TAG: /* Ok */0,
                            _0: {
                              marketIndex: marketIndex._0,
                              longTokenAddress: longTokenAddress._0,
                              shortTokenAddress: shortTokenAddress._0,
                              paymentAddress: paymentAddress._0,
                              initialAssetPrice: initialAssetPrice._0,
                              name: name._0,
                              symbol: symbol._0,
                              oracleAddress: oracleAddress._0,
                              yieldManagerAddress: yieldManagerAddress._0
                            }
                          };
                  }
                  var e = yieldManagerAddress._0;
                  return {
                          TAG: /* Error */1,
                          _0: {
                            path: ".yieldManagerAddress" + e.path,
                            message: e.message,
                            value: e.value
                          }
                        };
                }
                var e$1 = oracleAddress._0;
                return {
                        TAG: /* Error */1,
                        _0: {
                          path: ".oracleAddress" + e$1.path,
                          message: e$1.message,
                          value: e$1.value
                        }
                      };
              }
              var e$2 = symbol._0;
              return {
                      TAG: /* Error */1,
                      _0: {
                        path: ".symbol" + e$2.path,
                        message: e$2.message,
                        value: e$2.value
                      }
                    };
            }
            var e$3 = name._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".name" + e$3.path,
                      message: e$3.message,
                      value: e$3.value
                    }
                  };
          }
          var e$4 = initialAssetPrice._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".initialAssetPrice" + e$4.path,
                    message: e$4.message,
                    value: e$4.value
                  }
                };
        }
        var e$5 = paymentAddress._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".paymentAddress" + e$5.path,
                  message: e$5.message,
                  value: e$5.value
                }
              };
      }
      var e$6 = shortTokenAddress._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".shortTokenAddress" + e$6.path,
                message: e$6.message,
                value: e$6.value
              }
            };
    }
    var e$7 = longTokenAddress._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".longTokenAddress" + e$7.path,
              message: e$7.message,
              value: e$7.value
            }
          };
  }
  var e$8 = marketIndex._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".marketIndex" + e$8.path,
            message: e$8.message,
            value: e$8.value
          }
        };
}

function stakeAddedData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var user = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "user"), null));
  if (user.TAG === /* Ok */0) {
    var tokenAddress = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "tokenAddress"), null));
    if (tokenAddress.TAG === /* Ok */0) {
      var amount = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "amount"), null));
      if (amount.TAG === /* Ok */0) {
        var lastMintIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "lastMintIndex"), null));
        if (lastMintIndex.TAG === /* Ok */0) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    user: user._0,
                    tokenAddress: tokenAddress._0,
                    amount: amount._0,
                    lastMintIndex: lastMintIndex._0
                  }
                };
        }
        var e = lastMintIndex._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".lastMintIndex" + e.path,
                  message: e.message,
                  value: e.value
                }
              };
      }
      var e$1 = amount._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".amount" + e$1.path,
                message: e$1.message,
                value: e$1.value
              }
            };
    }
    var e$2 = tokenAddress._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".tokenAddress" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var e$3 = user._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".user" + e$3.path,
            message: e$3.message,
            value: e$3.value
          }
        };
}

function nextPriceRedeemData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var synthRedeemed = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "synthRedeemed"), null));
  if (synthRedeemed.TAG === /* Ok */0) {
    var marketIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "marketIndex"), null));
    if (marketIndex.TAG === /* Ok */0) {
      var oracleUpdateIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "oracleUpdateIndex"), null));
      if (oracleUpdateIndex.TAG === /* Ok */0) {
        var isLong = Curry._1(ConverterTypes.boolStringDeccoCodex[1], Belt_Option.getWithDefault(Js_dict.get(dict$1, "isLong"), null));
        if (isLong.TAG === /* Ok */0) {
          var user = ConverterTypes.address_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "user"), null));
          if (user.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      synthRedeemed: synthRedeemed._0,
                      marketIndex: marketIndex._0,
                      oracleUpdateIndex: oracleUpdateIndex._0,
                      isLong: isLong._0,
                      user: user._0
                    }
                  };
          }
          var e = user._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".user" + e.path,
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = isLong._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".isLong" + e$1.path,
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = oracleUpdateIndex._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".oracleUpdateIndex" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = marketIndex._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".marketIndex" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = synthRedeemed._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".synthRedeemed" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function marketAddedToStakerData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var marketIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "marketIndex"), null));
  if (marketIndex.TAG === /* Ok */0) {
    var exitFee_e18 = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "exitFee_e18"), null));
    if (exitFee_e18.TAG === /* Ok */0) {
      var balanceIncentiveExponent = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "balanceIncentiveExponent"), null));
      if (balanceIncentiveExponent.TAG === /* Ok */0) {
        var multiplier = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "multiplier"), null));
        if (multiplier.TAG === /* Ok */0) {
          var period = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "period"), null));
          if (period.TAG === /* Ok */0) {
            var balanceIncentiveEquilibriumOffset = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "balanceIncentiveEquilibriumOffset"), null));
            if (balanceIncentiveEquilibriumOffset.TAG === /* Ok */0) {
              return {
                      TAG: /* Ok */0,
                      _0: {
                        marketIndex: marketIndex._0,
                        exitFee_e18: exitFee_e18._0,
                        balanceIncentiveExponent: balanceIncentiveExponent._0,
                        multiplier: multiplier._0,
                        period: period._0,
                        balanceIncentiveEquilibriumOffset: balanceIncentiveEquilibriumOffset._0
                      }
                    };
            }
            var e = balanceIncentiveEquilibriumOffset._0;
            return {
                    TAG: /* Error */1,
                    _0: {
                      path: ".balanceIncentiveEquilibriumOffset" + e.path,
                      message: e.message,
                      value: e.value
                    }
                  };
          }
          var e$1 = period._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: ".period" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }
                };
        }
        var e$2 = multiplier._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: ".multiplier" + e$2.path,
                  message: e$2.message,
                  value: e$2.value
                }
              };
      }
      var e$3 = balanceIncentiveExponent._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".balanceIncentiveExponent" + e$3.path,
                message: e$3.message,
                value: e$3.value
              }
            };
    }
    var e$4 = exitFee_e18._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".exitFee_e18" + e$4.path,
              message: e$4.message,
              value: e$4.value
            }
          };
  }
  var e$5 = marketIndex._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".marketIndex" + e$5.path,
            message: e$5.message,
            value: e$5.value
          }
        };
}

function newMarketLaunchedAndSeededData_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var marketIndex = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "marketIndex"), null));
  if (marketIndex.TAG === /* Ok */0) {
    var initialMarketSeed = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "initialMarketSeed"), null));
    if (initialMarketSeed.TAG === /* Ok */0) {
      var marketLeverage = ConverterTypes.bn_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "marketLeverage"), null));
      if (marketLeverage.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  marketIndex: marketIndex._0,
                  initialMarketSeed: initialMarketSeed._0,
                  marketLeverage: marketLeverage._0
                }
              };
      }
      var e = marketLeverage._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".marketLeverage" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = initialMarketSeed._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".initialMarketSeed" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = marketIndex._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".marketIndex" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function covertToStateChange(eventName, paramsObject) {
  switch (eventName) {
    case "AccumulativeIssuancePerStakedSynthSnapshotCreated" :
        return {
                TAG: /* AccumulativeIssuancePerStakedSynthSnapshotCreated */3,
                _0: Belt_Result.getExn(accumulativeIssuancePerStakedSynthSnapshotCreatedData_decode(paramsObject))
              };
    case "Approval" :
        return {
                TAG: /* Approval */2,
                _0: Belt_Result.getExn(approvalData_decode(paramsObject))
              };
    case "ExecuteNextPriceSettlementsUser" :
        return {
                TAG: /* ExecuteNextPriceSettlementsUser */8,
                _0: Belt_Result.getExn(executeNextPriceSettlementsUserData_decode(paramsObject))
              };
    case "GemsCollected" :
        return {
                TAG: /* GemsCollected */5,
                _0: Belt_Result.getExn(gemsCollectedData_decode(paramsObject))
              };
    case "LongShortV1" :
        return {
                TAG: /* LongShortV1 */10,
                _0: Belt_Result.getExn(longShortV1Data_decode(paramsObject))
              };
    case "MarketAddedToStaker" :
        return {
                TAG: /* MarketAddedToStaker */15,
                _0: Belt_Result.getExn(marketAddedToStakerData_decode(paramsObject))
              };
    case "NewMarketLaunchedAndSeeded" :
        return {
                TAG: /* NewMarketLaunchedAndSeeded */16,
                _0: Belt_Result.getExn(newMarketLaunchedAndSeededData_decode(paramsObject))
              };
    case "NextPriceDeposit" :
        return {
                TAG: /* NextPriceDeposit */9,
                _0: Belt_Result.getExn(nextPriceDepositData_decode(paramsObject))
              };
    case "NextPriceRedeem" :
        return {
                TAG: /* NextPriceRedeem */14,
                _0: Belt_Result.getExn(nextPriceRedeemData_decode(paramsObject))
              };
    case "NextPriceStakeShift" :
        return {
                TAG: /* NextPriceStakeShift */7,
                _0: Belt_Result.getExn(nextPriceStakeShiftData_decode(paramsObject))
              };
    case "NextPriceSyntheticPositionShift" :
        return {
                TAG: /* NextPriceSyntheticPositionShift */6,
                _0: Belt_Result.getExn(nextPriceSyntheticPositionShiftData_decode(paramsObject))
              };
    case "StakeAdded" :
        return {
                TAG: /* StakeAdded */13,
                _0: Belt_Result.getExn(stakeAddedData_decode(paramsObject))
              };
    case "StakerV1" :
        return {
                TAG: /* StakerV1 */11,
                _0: Belt_Result.getExn(stakerV1Data_decode(paramsObject))
              };
    case "SyntheticMarketCreated" :
        return {
                TAG: /* SyntheticMarketCreated */12,
                _0: Belt_Result.getExn(syntheticMarketCreatedData_decode(paramsObject))
              };
    case "SystemStateUpdated" :
        return {
                TAG: /* SystemStateUpdated */4,
                _0: Belt_Result.getExn(systemStateUpdatedData_decode(paramsObject))
              };
    case "Transfer" :
        return {
                TAG: /* Transfer */1,
                _0: Belt_Result.getExn(transferData_decode(paramsObject))
              };
    default:
      return {
              TAG: /* Unclassified */0,
              _0: {
                name: eventName,
                data: paramsObject
              }
            };
  }
}

var emptyEventGroups_allTransferEvents = [];

var emptyEventGroups_allApprovalEvents = [];

var emptyEventGroups_allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents = [];

var emptyEventGroups_allSystemStateUpdatedEvents = [];

var emptyEventGroups_allGemsCollectedEvents = [];

var emptyEventGroups_allNextPriceSyntheticPositionShiftEvents = [];

var emptyEventGroups_allNextPriceStakeShiftEvents = [];

var emptyEventGroups_allExecuteNextPriceSettlementsUserEvents = [];

var emptyEventGroups_allNextPriceDepositEvents = [];

var emptyEventGroups_allLongShortV1Events = [];

var emptyEventGroups_allStakerV1Events = [];

var emptyEventGroups_allSyntheticMarketCreatedEvents = [];

var emptyEventGroups_allStakeAddedEvents = [];

var emptyEventGroups_allNextPriceRedeemEvents = [];

var emptyEventGroups_allMarketAddedToStakerEvents = [];

var emptyEventGroups_allNewMarketLaunchedAndSeededEvents = [];

var emptyEventGroups_allUnclassifiedEvents = [];

var emptyEventGroups = {
  allTransferEvents: emptyEventGroups_allTransferEvents,
  allApprovalEvents: emptyEventGroups_allApprovalEvents,
  allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: emptyEventGroups_allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
  allSystemStateUpdatedEvents: emptyEventGroups_allSystemStateUpdatedEvents,
  allGemsCollectedEvents: emptyEventGroups_allGemsCollectedEvents,
  allNextPriceSyntheticPositionShiftEvents: emptyEventGroups_allNextPriceSyntheticPositionShiftEvents,
  allNextPriceStakeShiftEvents: emptyEventGroups_allNextPriceStakeShiftEvents,
  allExecuteNextPriceSettlementsUserEvents: emptyEventGroups_allExecuteNextPriceSettlementsUserEvents,
  allNextPriceDepositEvents: emptyEventGroups_allNextPriceDepositEvents,
  allLongShortV1Events: emptyEventGroups_allLongShortV1Events,
  allStakerV1Events: emptyEventGroups_allStakerV1Events,
  allSyntheticMarketCreatedEvents: emptyEventGroups_allSyntheticMarketCreatedEvents,
  allStakeAddedEvents: emptyEventGroups_allStakeAddedEvents,
  allNextPriceRedeemEvents: emptyEventGroups_allNextPriceRedeemEvents,
  allMarketAddedToStakerEvents: emptyEventGroups_allMarketAddedToStakerEvents,
  allNewMarketLaunchedAndSeededEvents: emptyEventGroups_allNewMarketLaunchedAndSeededEvents,
  allUnclassifiedEvents: emptyEventGroups_allUnclassifiedEvents
};

function addEventToCorrectGrouping(currentEventGroups, param) {
  var data = param.data;
  var txHash = param.txHash;
  var timestamp = param.timestamp;
  var blockNumber = param.blockNumber;
  switch (data.TAG | 0) {
    case /* Unclassified */0 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: Belt_Array.concat(currentEventGroups.allUnclassifiedEvents, [data._0])
              };
    case /* Transfer */1 :
        return {
                allTransferEvents: Belt_Array.concat(currentEventGroups.allTransferEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* Approval */2 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: Belt_Array.concat(currentEventGroups.allApprovalEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* AccumulativeIssuancePerStakedSynthSnapshotCreated */3 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: Belt_Array.concat(currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* SystemStateUpdated */4 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: Belt_Array.concat(currentEventGroups.allSystemStateUpdatedEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* GemsCollected */5 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: Belt_Array.concat(currentEventGroups.allGemsCollectedEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* NextPriceSyntheticPositionShift */6 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: Belt_Array.concat(currentEventGroups.allNextPriceSyntheticPositionShiftEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* NextPriceStakeShift */7 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: Belt_Array.concat(currentEventGroups.allNextPriceStakeShiftEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* ExecuteNextPriceSettlementsUser */8 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: Belt_Array.concat(currentEventGroups.allExecuteNextPriceSettlementsUserEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* NextPriceDeposit */9 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: Belt_Array.concat(currentEventGroups.allNextPriceDepositEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* LongShortV1 */10 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: Belt_Array.concat(currentEventGroups.allLongShortV1Events, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* StakerV1 */11 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: Belt_Array.concat(currentEventGroups.allStakerV1Events, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* SyntheticMarketCreated */12 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: Belt_Array.concat(currentEventGroups.allSyntheticMarketCreatedEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* StakeAdded */13 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: Belt_Array.concat(currentEventGroups.allStakeAddedEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* NextPriceRedeem */14 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: Belt_Array.concat(currentEventGroups.allNextPriceRedeemEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* MarketAddedToStaker */15 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: Belt_Array.concat(currentEventGroups.allMarketAddedToStakerEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allNewMarketLaunchedAndSeededEvents: currentEventGroups.allNewMarketLaunchedAndSeededEvents,
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    case /* NewMarketLaunchedAndSeeded */16 :
        return {
                allTransferEvents: currentEventGroups.allTransferEvents,
                allApprovalEvents: currentEventGroups.allApprovalEvents,
                allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents: currentEventGroups.allAccumulativeIssuancePerStakedSynthSnapshotCreatedEvents,
                allSystemStateUpdatedEvents: currentEventGroups.allSystemStateUpdatedEvents,
                allGemsCollectedEvents: currentEventGroups.allGemsCollectedEvents,
                allNextPriceSyntheticPositionShiftEvents: currentEventGroups.allNextPriceSyntheticPositionShiftEvents,
                allNextPriceStakeShiftEvents: currentEventGroups.allNextPriceStakeShiftEvents,
                allExecuteNextPriceSettlementsUserEvents: currentEventGroups.allExecuteNextPriceSettlementsUserEvents,
                allNextPriceDepositEvents: currentEventGroups.allNextPriceDepositEvents,
                allLongShortV1Events: currentEventGroups.allLongShortV1Events,
                allStakerV1Events: currentEventGroups.allStakerV1Events,
                allSyntheticMarketCreatedEvents: currentEventGroups.allSyntheticMarketCreatedEvents,
                allStakeAddedEvents: currentEventGroups.allStakeAddedEvents,
                allNextPriceRedeemEvents: currentEventGroups.allNextPriceRedeemEvents,
                allMarketAddedToStakerEvents: currentEventGroups.allMarketAddedToStakerEvents,
                allNewMarketLaunchedAndSeededEvents: Belt_Array.concat(currentEventGroups.allNewMarketLaunchedAndSeededEvents, [{
                        blockNumber: blockNumber,
                        timestamp: timestamp,
                        txHash: txHash,
                        data: data._0
                      }]),
                allUnclassifiedEvents: currentEventGroups.allUnclassifiedEvents
              };
    
  }
}

exports.transferData_decode = transferData_decode;
exports.approvalData_decode = approvalData_decode;
exports.accumulativeIssuancePerStakedSynthSnapshotCreatedData_decode = accumulativeIssuancePerStakedSynthSnapshotCreatedData_decode;
exports.systemStateUpdatedData_decode = systemStateUpdatedData_decode;
exports.gemsCollectedData_decode = gemsCollectedData_decode;
exports.nextPriceSyntheticPositionShiftData_decode = nextPriceSyntheticPositionShiftData_decode;
exports.nextPriceStakeShiftData_decode = nextPriceStakeShiftData_decode;
exports.executeNextPriceSettlementsUserData_decode = executeNextPriceSettlementsUserData_decode;
exports.nextPriceDepositData_decode = nextPriceDepositData_decode;
exports.longShortV1Data_decode = longShortV1Data_decode;
exports.stakerV1Data_decode = stakerV1Data_decode;
exports.syntheticMarketCreatedData_decode = syntheticMarketCreatedData_decode;
exports.stakeAddedData_decode = stakeAddedData_decode;
exports.nextPriceRedeemData_decode = nextPriceRedeemData_decode;
exports.marketAddedToStakerData_decode = marketAddedToStakerData_decode;
exports.newMarketLaunchedAndSeededData_decode = newMarketLaunchedAndSeededData_decode;
exports.covertToStateChange = covertToStateChange;
exports.emptyEventGroups = emptyEventGroups;
exports.addEventToCorrectGrouping = addEventToCorrectGrouping;
/* ConverterTypes Not a pure module */
