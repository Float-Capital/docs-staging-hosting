// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ethers from "./ethereum/Ethers.js";
import * as Globals from "./libraries/Globals.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as CONSTANTS from "./CONSTANTS.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as RootProvider from "./libraries/RootProvider.js";

var isDevMode = Caml_obj.caml_equal(process.env.NEXT_PUBLIC_DEVMODE, "true");

var longshortContractAbi = Ethers.makeAbi([""]);

function getDefaultNetworkId(optNetworkId) {
  return Belt_Option.getWithDefault(optNetworkId, 97);
}

var allContracts = (require('./contractAddresses.json'));

function getContractAddressString(netIdStr, closure) {
  return Globals.ethAdrToStr(Belt_Option.mapWithDefault(Js_dict.get(allContracts, netIdStr), CONSTANTS.zeroAddress, closure));
}

function longShortContractAddress(netIdStr) {
  return Belt_Option.mapWithDefault(Js_dict.get(allContracts, netIdStr), CONSTANTS.zeroAddress, (function (contracts) {
                return contracts.LongShort;
              }));
}

function useLongShortAddress(param) {
  return longShortContractAddress(Belt_Option.mapWithDefault(RootProvider.useChainId(undefined), "5", (function (prim) {
                    return String(prim);
                  })));
}

function stakerContractAddress(netIdStr) {
  return Belt_Option.mapWithDefault(Js_dict.get(allContracts, netIdStr), CONSTANTS.zeroAddress, (function (contracts) {
                return contracts.Staker;
              }));
}

function useStakerAddress(param) {
  return stakerContractAddress(Belt_Option.mapWithDefault(RootProvider.useChainId(undefined), "5", (function (prim) {
                    return String(prim);
                  })));
}

function daiContractAddress(netIdStr) {
  return Belt_Option.mapWithDefault(Js_dict.get(allContracts, netIdStr), CONSTANTS.zeroAddress, (function (contracts) {
                return contracts.Dai;
              }));
}

function useDaiAddress(param) {
  return daiContractAddress(Belt_Option.mapWithDefault(RootProvider.useChainId(undefined), "5", (function (prim) {
                    return String(prim);
                  })));
}

function floatContractAddress(netIdStr) {
  return Belt_Option.mapWithDefault(Js_dict.get(allContracts, netIdStr), CONSTANTS.zeroAddress, (function (contracts) {
                return contracts.FloatToken;
              }));
}

function useFloatAddress(param) {
  return floatContractAddress(Belt_Option.mapWithDefault(RootProvider.useChainId(undefined), "5", (function (prim) {
                    return String(prim);
                  })));
}

var binancTestnetGraphEndpoint = "https://test.graph.float.capital/subgraphs/name/avolabs-io/float-capital2";

var localhostGraphEndpoint = "https://localhost:8000/subgraphs/name/avolabs-io/float-capital/graphql";

var defaultNetworkId = 97;

var paymentTokenName = "BUSD";

var defaultBlockExplorer = "https://testnet.bscscan.com/";

var discordInviteLink = "https://discord.gg/dqDwgrVYcU";

export {
  isDevMode ,
  longshortContractAbi ,
  binancTestnetGraphEndpoint ,
  localhostGraphEndpoint ,
  defaultNetworkId ,
  paymentTokenName ,
  defaultBlockExplorer ,
  getDefaultNetworkId ,
  discordInviteLink ,
  allContracts ,
  getContractAddressString ,
  longShortContractAddress ,
  useLongShortAddress ,
  stakerContractAddress ,
  useStakerAddress ,
  daiContractAddress ,
  useDaiAddress ,
  floatContractAddress ,
  useFloatAddress ,
  
}
/* isDevMode Not a pure module */
