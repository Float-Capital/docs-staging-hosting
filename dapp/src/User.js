// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Loader from "./components/UI/Loader.js";
import * as UserUI from "./components/UI/UserUI.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as DataHooks from "./data/DataHooks.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as MiniLoader from "./components/UI/MiniLoader.js";
import * as FormatMoney from "./components/UI/FormatMoney.js";
import * as Router from "next/router";

function User$UsersBalances(Props) {
  var userId = Props.userId;
  var usersTokensQuery = DataHooks.useUsersBalances(userId);
  var tmp;
  if (typeof usersTokensQuery === "number") {
    tmp = React.createElement("div", {
          className: "m-auto"
        }, React.createElement(MiniLoader.make, {}));
  } else if (usersTokensQuery.TAG === /* GraphError */0) {
    tmp = usersTokensQuery._0;
  } else {
    var match = usersTokensQuery._0;
    tmp = React.createElement(React.Fragment, undefined, React.createElement(UserUI.UserColumnTextCenter.make, {
              children: React.createElement(UserUI.UserColumnText.make, {
                    head: "üí∞ Synth value",
                    body: "$" + FormatMoney.formatEther(undefined, match.totalBalance)
                  })
            }), React.createElement("br", undefined), Belt_Array.map(match.balances, (function (param) {
                var isLong = param.isLong;
                var name = param.name;
                return React.createElement(UserUI.UserMarketBox.make, {
                            name: name,
                            isLong: isLong,
                            tokens: FormatMoney.formatEther(undefined, param.tokenBalance),
                            value: FormatMoney.formatEther(undefined, param.tokensValue),
                            children: React.createElement(UserUI.UserMarketStakeOrRedeem.make, {}),
                            key: name + "-" + (
                              isLong ? "long" : "short"
                            )
                          });
              })));
  }
  return React.createElement(UserUI.UserColumnCard.make, {
              children: null
            }, React.createElement(UserUI.UserColumnHeader.make, {
                  children: null
                }, "Synthetic Assets", React.createElement("img", {
                      className: "inline h-5 ml-2",
                      src: "/img/coin.png"
                    })), tmp, React.createElement("br", undefined), React.createElement(UserUI.UserColumnTextCenter.make, {
                  children: React.createElement("span", {
                        className: "text-sm"
                      }, "üí∏ Why not mint some more? üí∏")
                }));
}

var UsersBalances = {
  make: User$UsersBalances
};

function onQueryError(msg) {
  return React.createElement(UserUI.UserContainer.make, {
              children: "Error: " + msg
            });
}

function onQuerySuccess(param) {
  var stakes = param.stakes;
  var user = param.user;
  return React.createElement(UserUI.UserContainer.make, {
              children: null
            }, React.createElement(UserUI.UserBanner.make, {}), React.createElement(UserUI.UserColumnContainer.make, {
                  children: null
                }, React.createElement(UserUI.UserColumn.make, {
                      children: React.createElement(UserUI.UserColumnCard.make, {
                            children: null
                          }, React.createElement(UserUI.UserProfileHeader.make, {
                                name: "moose-code",
                                level: "1"
                              }), React.createElement(UserUI.UserColumnTextList.make, {
                                children: null
                              }, React.createElement(UserUI.UserColumnText.make, {
                                    head: "üìÆ Address",
                                    body: "0x1234...1234"
                                  }), React.createElement(UserUI.UserColumnText.make, {
                                    head: "üéâ Joined",
                                    body: "03/02/2021"
                                  }), React.createElement(UserUI.UserColumnText.make, {
                                    head: "‚õΩ Gas used",
                                    body: "6,789,000"
                                  }), React.createElement(UserUI.UserColumnText.make, {
                                    head: "üèÉ No. txs",
                                    body: "11"
                                  }), React.createElement(UserUI.UserColumnText.make, {
                                    icon: "/img/discord.png",
                                    head: "Discord",
                                    body: "‚úÖ"
                                  })))
                    }), React.createElement(UserUI.UserColumn.make, {
                      children: null
                    }, React.createElement(User$UsersBalances, {
                          userId: user
                        }), React.createElement("br", undefined), React.createElement(UserUI.UserStakesCard.make, {
                          stakes: stakes
                        })), React.createElement(UserUI.UserColumn.make, {
                      children: React.createElement(UserUI.UserColumnCard.make, {
                            children: null
                          }, React.createElement(UserUI.UserColumnHeader.make, {
                                children: "Float rewards üî•"
                              }), React.createElement(UserUI.UserFloatBox.make, {
                                userId: user,
                                stakes: stakes
                              }))
                    })));
}

function User$User(Props) {
  var router = Router.useRouter();
  var userStr = Js_dict.get(router.query, "user");
  var user = userStr !== undefined ? userStr.toLowerCase() : "no user provided";
  var activeStakes = DataHooks.useStakesForUser(user);
  if (typeof activeStakes === "number") {
    return React.createElement(Loader.make, {});
  } else if (activeStakes.TAG === /* GraphError */0) {
    return onQueryError(activeStakes._0);
  } else {
    return onQuerySuccess({
                user: user,
                stakes: activeStakes._0
              });
  }
}

var User = {
  onQueryError: onQueryError,
  onQuerySuccess: onQuerySuccess,
  make: User$User
};

function $$default(param) {
  return React.createElement(User$User, {});
}

export {
  UsersBalances ,
  User ,
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
