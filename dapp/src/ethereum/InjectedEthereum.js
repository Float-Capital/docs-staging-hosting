// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Config = require("../config/Config.js");
var Ethers = require("ethers");
var JsPromise = require("../libraries/Js.Promise/JsPromise.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Router = require("next/router");

function isMetamask(param) {
  return Belt_Option.getWithDefault(Belt_Option.flatMap(window.ethereum, (function (e) {
                    return e.isMetaMask;
                  })), false);
}

function useIsMetamask(param) {
  var match = React.useState(function () {
        return false;
      });
  var setState = match[1];
  React.useEffect((function () {
          Curry._1(setState, (function (param) {
                  return isMetamask(undefined);
                }));
          
        }), []);
  return match[0];
}

function chainIdIntToHex(id) {
  return "0x" + id.toString(16);
}

function chainIdHexToInt(id) {
  return Ethers.BigNumber.from(id).toNumber();
}

function useReloadOnMetamaskChainChanged(param) {
  var router = Router.useRouter();
  var routerRef = React.useRef(router);
  React.useEffect((function () {
          routerRef.current = router;
          
        }), [router]);
  React.useEffect((function () {
          if (isMetamask(undefined)) {
            window.ethereum.on("chainChanged", (function (param) {
                    routerRef.current.replace({
                          pathname: routerRef.current.pathname,
                          query: routerRef.current.query
                        });
                    
                  }));
          }
          
        }), []);
  
}

function requestChainIdPromise(param) {
  var chainIdMatchesConfigPromise = new Promise((function (resolve, param) {
          return resolve(chainIdIntToHex(Config.networkId));
        }));
  return Belt_Option.mapWithDefault(window.ethereum, chainIdMatchesConfigPromise, (function (e) {
                return e.request({
                            method: "eth_chainId"
                          });
              }));
}

function useMetamaskChainId(param) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        
      });
  var setChainId = match[1];
  var requeryChainId = function (param) {
    JsPromise.$$catch(requestChainIdPromise(undefined).then(function (chainIdStr) {
              Curry._1(setChainId, (function (param) {
                      return Ethers.BigNumber.from(chainIdStr).toNumber();
                    }));
              return Promise.resolve("");
            }), (function (param) {
            Curry._1(setChainId, (function (param) {
                    return Config.networkId;
                  }));
            return Promise.resolve("");
          }));
    
  };
  React.useEffect((function () {
          requeryChainId(undefined);
          
        }), [router]);
  return match[0];
}

exports.isMetamask = isMetamask;
exports.useIsMetamask = useIsMetamask;
exports.chainIdIntToHex = chainIdIntToHex;
exports.chainIdHexToInt = chainIdHexToInt;
exports.useReloadOnMetamaskChainChanged = useReloadOnMetamaskChainChanged;
exports.requestChainIdPromise = requestChainIdPromise;
exports.useMetamaskChainId = useMetamaskChainId;
/* react Not a pure module */
