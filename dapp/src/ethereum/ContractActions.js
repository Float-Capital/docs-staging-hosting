// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Ethers from "ethers";
import * as Contracts from "./Contracts.js";
import * as JsPromise from "../libraries/Js.Promise/JsPromise.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Core from "@web3-react/core";

function getProviderOrSigner(library, account) {
  if (account !== undefined) {
    return Belt_Option.mapWithDefault(library.getSigner(Caml_option.valFromOption(account)), {
                TAG: 0,
                _0: library,
                [Symbol.for("name")]: "Provider"
              }, (function (signer) {
                  return {
                          TAG: 1,
                          _0: signer,
                          [Symbol.for("name")]: "Signer"
                        };
                }));
  } else {
    return {
            TAG: 0,
            _0: library,
            [Symbol.for("name")]: "Provider"
          };
  }
}

function getLongShortContractAddress(chainId) {
  return Ethers.utils.getAddress(chainId !== 5 ? (
                chainId !== 137 ? (
                    chainId !== 80001 ? "0xba97BeC8d359D73c81D094421803D968A9FBf676" : "0xeb37A6dF956F1997085498aDd98b25a2f633d83F"
                  ) : "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063"
              ) : "0xba97BeC8d359D73c81D094421803D968A9FBf676");
}

function useProviderOrSigner(param) {
  var context = Core.useWeb3React();
  return React.useMemo((function () {
                var library = context.library;
                if (library !== undefined) {
                  return getProviderOrSigner(Caml_option.valFromOption(library), context.account);
                }
                
              }), [
              context.library,
              context.account
            ]);
}

function useContractFunction(param) {
  var match = React.useState(function () {
        return /* UnInitialised */0;
      });
  var setTxState = match[1];
  var optProviderOrSigner = useProviderOrSigner(undefined);
  return [
          (function (contractAddress, contractFunction) {
              Curry._1(setTxState, (function (param) {
                      return /* Created */1;
                    }));
              if (optProviderOrSigner !== undefined) {
                var erc20Instance = Contracts.TestErc20.make(contractAddress, optProviderOrSigner);
                var mintPromise = Curry._1(contractFunction, erc20Instance);
                JsPromise.$$catch(mintPromise, (function (error) {
                        return Curry._1(setTxState, (function (param) {
                                      var msg = error.message;
                                      return {
                                              TAG: 1,
                                              _0: msg !== undefined ? ": " + msg : "unknown error",
                                              [Symbol.for("name")]: "Declined"
                                            };
                                    }));
                      }));
                JsPromise.$$catch(mintPromise.then(function (tx) {
                            Curry._1(setTxState, (function (param) {
                                    return {
                                            TAG: 0,
                                            _0: tx.hash,
                                            [Symbol.for("name")]: "SignedAndSubmitted"
                                          };
                                  }));
                            return tx.wait();
                          }).then(function (txOutcome) {
                          console.log(txOutcome);
                          return Curry._1(setTxState, (function (param) {
                                        return {
                                                TAG: 2,
                                                _0: txOutcome,
                                                [Symbol.for("name")]: "Complete"
                                              };
                                      }));
                        }), (function (error) {
                        Curry._1(setTxState, (function (param) {
                                return /* Failed */2;
                              }));
                        console.log(error);
                        
                      }));
              } else {
                console.log("NOooo :( :( !!!");
              }
              
            }),
          match[0],
          setTxState
        ];
}

export {
  getProviderOrSigner ,
  getLongShortContractAddress ,
  useProviderOrSigner ,
  useContractFunction ,
  
}
/* react Not a pure module */
