// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ethers from "../ethereum/Ethers.js";
import * as Ethers$1 from "ethers";
import * as Globals from "./Globals.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Constants from "../Constants.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

function parse(json) {
  var str = Js_json.decodeString(json);
  if (str !== undefined) {
    return Ethers$1.BigNumber.from(str);
  } else {
    console.log("CRITICAL - should never happen!");
    return Ethers$1.BigNumber.from("0");
  }
}

function serialize(bn) {
  return bn.toString();
}

var $$BigInt = {
  parse: parse,
  serialize: serialize
};

function parse$1(json) {
  var str = Js_json.decodeString(json);
  if (str !== undefined) {
    return str;
  } else {
    console.log("CRITICAL - should never happen!");
    return "couldn't decode bytes";
  }
}

function serialize$1(bytesString) {
  return bytesString;
}

var Bytes = {
  parse: parse$1,
  serialize: serialize$1
};

function parse$2(json) {
  var address = Belt_Option.flatMap(Js_json.decodeString(json), Ethers.Utils.getAddress);
  if (address !== undefined) {
    return Caml_option.valFromOption(address);
  } else {
    console.log("CRITICAL - couldn't decode eth address from graph, should never happen!");
    return Constants.zeroAddress;
  }
}

var serialize$2 = Globals.ethAdrToStr;

var Address = {
  parse: parse$2,
  serialize: serialize$2
};

export {
  $$BigInt ,
  Bytes ,
  Address ,
  
}
/* Ethers Not a pure module */
