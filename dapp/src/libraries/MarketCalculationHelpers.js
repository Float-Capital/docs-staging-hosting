// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ethers = require("../ethereum/Ethers.js");
var Globals = require("./Globals.js");
var CONSTANTS = require("../CONSTANTS.js");

function calculateBeta(totalValueLocked, totalLockedLong, totalLockedShort, isLong) {
  if (totalValueLocked.eq(CONSTANTS.zeroBN) || totalLockedLong.eq(CONSTANTS.zeroBN) || totalLockedShort.eq(CONSTANTS.zeroBN)) {
    return "0";
  } else if (totalLockedLong.eq(totalLockedShort)) {
    return "100";
  } else if (isLong && totalLockedShort.lt(totalLockedLong)) {
    return Globals.percentStr(totalLockedShort, totalLockedLong);
  } else if (!isLong && totalLockedLong.lt(totalLockedShort)) {
    return Globals.percentStr(totalLockedLong, totalLockedShort);
  } else {
    return "100";
  }
}

function kCalc(kperiod, kmultiplier, initialTimestamp, currentTimestamp) {
  if (currentTimestamp.sub(initialTimestamp).lte(kperiod)) {
    return kmultiplier.sub(kmultiplier.sub(CONSTANTS.tenToThe18).mul(currentTimestamp.sub(initialTimestamp)).div(kperiod));
  } else {
    return CONSTANTS.tenToThe18;
  }
}

function calculateFloatAPY(longVal, shortVal, kperiod, kmultiplier, initialTimestamp, currentTimestamp, tokenType) {
  var total = longVal.add(shortVal);
  var k = kCalc(kperiod, kmultiplier, initialTimestamp, currentTimestamp);
  switch (tokenType) {
    case "long" :
        var match = Number(Ethers.Utils.formatEther(longVal));
        if (match !== 0.0) {
          return k.mul(shortVal).div(total);
        } else {
          return CONSTANTS.zeroBN;
        }
    case "short" :
        var match$1 = Number(Ethers.Utils.formatEther(shortVal));
        if (match$1 !== 0.0) {
          return k.mul(longVal).div(total);
        } else {
          return CONSTANTS.zeroBN;
        }
    default:
      return CONSTANTS.oneHundredEth;
  }
}

function calculateLendingProviderAPYForSide(apy, longVal, shortVal, tokenType) {
  if (typeof apy === "number") {
    return apy;
  }
  if (apy.TAG !== /* Loaded */0) {
    return apy;
  }
  var collateralTokenApy = apy._0;
  var tmp;
  switch (tokenType) {
    case "long" :
        tmp = longVal !== 0.0 ? collateralTokenApy * shortVal / longVal : collateralTokenApy;
        break;
    case "short" :
        tmp = shortVal !== 0.0 ? collateralTokenApy * longVal / shortVal : collateralTokenApy;
        break;
    default:
      tmp = collateralTokenApy;
  }
  return {
          TAG: 0,
          _0: tmp,
          [Symbol.for("name")]: "Loaded"
        };
}

exports.calculateBeta = calculateBeta;
exports.kCalc = kCalc;
exports.calculateFloatAPY = calculateFloatAPY;
exports.calculateLendingProviderAPYForSide = calculateLendingProviderAPYForSide;
/* Ethers Not a pure module */
