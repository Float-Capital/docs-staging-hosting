// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var CONSTANTS = require("../CONSTANTS.js");

function tokenPrice(totalLocked, tokenSupply) {
  return totalLocked.mul(CONSTANTS.tenToThe18).div(tokenSupply);
}

function valueChange(totalLockedLong, totalLockedShort, percentageChange) {
  if (totalLockedShort.gte(totalLockedLong)) {
    return totalLockedLong.mul(percentageChange).div(CONSTANTS.tenToThe18);
  } else {
    return totalLockedShort.mul(percentageChange).div(CONSTANTS.tenToThe18);
  }
}

function simulateMarketPriceChange(oldPrice, newPrice, totalLockedLong, totalLockedShort, tokenSupply, tokenIsLong) {
  if (oldPrice.eq(newPrice)) {
    if (tokenIsLong) {
      return tokenPrice(totalLockedLong, tokenSupply);
    } else {
      return tokenPrice(totalLockedShort, tokenSupply);
    }
  }
  if (oldPrice.lt(newPrice)) {
    var percentageChange = newPrice.sub(oldPrice).mul(CONSTANTS.tenToThe18).div(oldPrice);
    if (percentageChange.gte(CONSTANTS.tenToThe18)) {
      var totalLocked = totalLockedLong.add(totalLockedShort);
      if (tokenIsLong) {
        return tokenPrice(totalLocked, tokenSupply);
      } else {
        return CONSTANTS.zeroBN;
      }
    }
    var changeInValue = valueChange(totalLockedLong, totalLockedShort, percentageChange);
    if (tokenIsLong) {
      return tokenPrice(totalLockedLong.add(changeInValue), tokenSupply);
    } else {
      return tokenPrice(totalLockedShort.sub(changeInValue), tokenSupply);
    }
  }
  var percentageChange$1 = oldPrice.sub(newPrice).mul(CONSTANTS.tenToThe18).div(oldPrice);
  if (percentageChange$1.gte(CONSTANTS.tenToThe18)) {
    var totalLocked$1 = totalLockedLong.add(totalLockedShort);
    if (tokenIsLong) {
      return CONSTANTS.zeroBN;
    } else {
      return tokenPrice(totalLocked$1, tokenSupply);
    }
  }
  var changeInValue$1 = valueChange(totalLockedLong, totalLockedShort, percentageChange$1);
  if (tokenIsLong) {
    return tokenPrice(totalLockedLong.sub(changeInValue$1), tokenSupply);
  } else {
    return tokenPrice(totalLockedShort.add(changeInValue$1), tokenSupply);
  }
}

exports.tokenPrice = tokenPrice;
exports.valueChange = valueChange;
exports.simulateMarketPriceChange = simulateMarketPriceChange;
/* CONSTANTS Not a pure module */
