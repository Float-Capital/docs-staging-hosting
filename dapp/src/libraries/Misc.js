// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Ethers = require("../ethereum/Ethers.js");
var Ethers$1 = require("ethers");
var Js_math = require("rescript/lib/js/js_math.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var optLocalstorage = typeof localStorage === "undefined" ? undefined : Caml_option.some(localStorage);

function onlyExecuteClientSide(functionForClientsideExecution) {
  if (typeof window !== "undefined") {
    return Curry._1(functionForClientsideExecution, undefined);
  }
  
}

function getCurrentTimestamp(param) {
  return Js_math.floor(Date.now() / 1000);
}

function useCurrentTime(updateInterval) {
  var match = React.useState(function () {
        return getCurrentTimestamp(undefined);
      });
  var setTimeLeft = match[1];
  React.useEffect((function () {
          var interval = setInterval((function (param) {
                  return Curry._1(setTimeLeft, (function (param) {
                                return getCurrentTimestamp(undefined);
                              }));
                }), updateInterval);
          return (function (param) {
                    clearInterval(interval);
                    
                  });
        }), [
        setTimeLeft,
        updateInterval
      ]);
  return match[0];
}

function useCurrentTimeBN(updateInterval) {
  return Ethers$1.BigNumber.from(useCurrentTime(updateInterval));
}

var Time = {
  getCurrentTimestamp: getCurrentTimestamp,
  useCurrentTime: useCurrentTime,
  useCurrentTimeBN: useCurrentTimeBN
};

function format(__x) {
  return __x.replace(/\d(?=(\d{3})+\.)/g, "$&,");
}

function formatInt(__x) {
  return __x.replace(/\d(?=(\d{3})+$)/g, "$&,");
}

function formatFloat(digitsOpt, number) {
  var digits = digitsOpt !== undefined ? digitsOpt : 2;
  return format(number.toFixed(digits));
}

function toCentsFixedNoRounding(digitsOpt, floatString) {
  var digits = digitsOpt !== undefined ? digitsOpt : 2;
  return formatFloat(digits, Number(floatString));
}

function formatEther(digitsOpt, rawNumber) {
  var digits = digitsOpt !== undefined ? digitsOpt : 2;
  return toCentsFixedNoRounding(digits, Ethers.Utils.formatEther(rawNumber));
}

var NumberFormat = {
  format: format,
  formatInt: formatInt,
  formatFloat: formatFloat,
  toCentsFixedNoRounding: toCentsFixedNoRounding,
  formatEther: formatEther
};

exports.optLocalstorage = optLocalstorage;
exports.onlyExecuteClientSide = onlyExecuteClientSide;
exports.Time = Time;
exports.NumberFormat = NumberFormat;
/* optLocalstorage Not a pure module */
