// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Ethers = require("../ethereum/Ethers.js");
var Ethers$1 = require("ethers");
var Js_math = require("rescript/lib/js/js_math.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var optLocalstorage = typeof localStorage === "undefined" ? undefined : Caml_option.some(localStorage);

function onlyExecuteClientSide(functionForClientsideExecution) {
  if (typeof window !== "undefined") {
    return Curry._1(functionForClientsideExecution, undefined);
  }
  
}

function getCurrentTimestamp(param) {
  return Js_math.floor(Date.now() / 1000);
}

function useCurrentTime(updateInterval) {
  var match = React.useState(function () {
        return getCurrentTimestamp(undefined);
      });
  var setTimeLeft = match[1];
  React.useEffect((function () {
          var interval = setInterval((function (param) {
                  return Curry._1(setTimeLeft, (function (param) {
                                return getCurrentTimestamp(undefined);
                              }));
                }), updateInterval);
          return (function (param) {
                    clearInterval(interval);
                    
                  });
        }), [
        setTimeLeft,
        updateInterval
      ]);
  return match[0];
}

function useCurrentTimeBN(updateInterval) {
  return Ethers$1.BigNumber.from(useCurrentTime(updateInterval));
}

function useInterval(callback, delay) {
  var savedCallback = React.useRef(callback);
  React.useEffect((function () {
          savedCallback.current = callback;
          
        }), [callback]);
  React.useEffect((function () {
          var id = setInterval(savedCallback.current, delay);
          return (function (param) {
                    clearInterval(id);
                    
                  });
        }), [delay]);
  
}

function Misc$Time$DelayedDisplay(Props) {
  var delayOpt = Props.delay;
  var children = Props.children;
  var delay = delayOpt !== undefined ? delayOpt : 1000;
  var match = React.useState(function () {
        return false;
      });
  var setShow = match[1];
  React.useEffect((function () {
          var timeout = setTimeout((function (param) {
                  return Curry._1(setShow, (function (param) {
                                return true;
                              }));
                }), delay);
          return (function (param) {
                    clearTimeout(timeout);
                    
                  });
        }), []);
  if (match[0]) {
    return children;
  } else {
    return React.createElement("img", {
                className: "w-6 mx-auto",
                src: "/img/mini-loading.gif"
              });
  }
}

var DelayedDisplay = {
  make: Misc$Time$DelayedDisplay
};

function useIntervalFixed(callback, delay, numIterations) {
  var savedCallback = React.useRef(callback);
  var idRef = React.useRef(undefined);
  var iterationCounter = React.useRef(0);
  React.useEffect((function () {
          savedCallback.current = callback;
          
        }), [callback]);
  React.useEffect((function () {
          iterationCounter.current = 0;
          var id = setInterval((function (param) {
                  if (iterationCounter.current < numIterations) {
                    iterationCounter.current = iterationCounter.current + 1 | 0;
                    return Curry._1(savedCallback.current, undefined);
                  } else {
                    clearInterval(idRef.current);
                    return ;
                  }
                }), delay);
          idRef.current = id;
          return (function (param) {
                    clearInterval(id);
                    
                  });
        }), [
        delay,
        numIterations
      ]);
  
}

var Time = {
  getCurrentTimestamp: getCurrentTimestamp,
  useCurrentTime: useCurrentTime,
  useCurrentTimeBN: useCurrentTimeBN,
  useInterval: useInterval,
  DelayedDisplay: DelayedDisplay,
  useIntervalFixed: useIntervalFixed
};

function format(__x) {
  return __x.replace(/\d(?=(\d{3})+\.)/g, "$&,");
}

function formatInt(__x) {
  return __x.replace(/\d(?=(\d{3})+$)/g, "$&,");
}

function formatFloat(digitsOpt, number) {
  var digits = digitsOpt !== undefined ? digitsOpt : 2;
  return format(number.toFixed(digits));
}

function toCentsFixedNoRounding(digitsOpt, floatString) {
  var digits = digitsOpt !== undefined ? digitsOpt : 2;
  return formatFloat(digits, Number(floatString));
}

function formatEther(digitsOpt, rawNumber) {
  var digits = digitsOpt !== undefined ? digitsOpt : 2;
  return toCentsFixedNoRounding(digits, Ethers.Utils.formatEther(rawNumber));
}

var NumberFormat = {
  format: format,
  formatInt: formatInt,
  formatFloat: formatFloat,
  toCentsFixedNoRounding: toCentsFixedNoRounding,
  formatEther: formatEther
};

exports.optLocalstorage = optLocalstorage;
exports.onlyExecuteClientSide = onlyExecuteClientSide;
exports.Time = Time;
exports.NumberFormat = NumberFormat;
/* optLocalstorage Not a pure module */
