// Generated by ReScript, PLEASE EDIT WITH CARE

import * as GqlConverters from "./GqlConverters.js";
import * as ApolloClient__React_Hooks_UseQuery from "rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  query   {
    systemStates(first: 1, orderBy: timestamp, orderDirection: desc)  {
      __typename
      timestamp
      txHash
      blockNumber
      syntheticPrice
      longTokenPrice
      shortTokenPrice
      totalValueLocked
      setBy
    }
  }
`);

function parse(value) {
  var value$1 = value.systemStates;
  return {
          systemStates: value$1.map(function (value) {
                return {
                        __typename: value.__typename,
                        timestamp: GqlConverters.$$BigInt.parse(value.timestamp),
                        txHash: GqlConverters.Bytes.parse(value.txHash),
                        blockNumber: GqlConverters.$$BigInt.parse(value.blockNumber),
                        syntheticPrice: GqlConverters.$$BigInt.parse(value.syntheticPrice),
                        longTokenPrice: GqlConverters.$$BigInt.parse(value.longTokenPrice),
                        shortTokenPrice: GqlConverters.$$BigInt.parse(value.shortTokenPrice),
                        totalValueLocked: GqlConverters.$$BigInt.parse(value.totalValueLocked),
                        setBy: GqlConverters.Bytes.parse(value.setBy)
                      };
              })
        };
}

function serialize(value) {
  var value$1 = value.systemStates;
  var systemStates = value$1.map(function (value) {
        var value$1 = value.setBy;
        var value$2 = GqlConverters.Bytes.serialize(value$1);
        var value$3 = value.totalValueLocked;
        var value$4 = GqlConverters.$$BigInt.serialize(value$3);
        var value$5 = value.shortTokenPrice;
        var value$6 = GqlConverters.$$BigInt.serialize(value$5);
        var value$7 = value.longTokenPrice;
        var value$8 = GqlConverters.$$BigInt.serialize(value$7);
        var value$9 = value.syntheticPrice;
        var value$10 = GqlConverters.$$BigInt.serialize(value$9);
        var value$11 = value.blockNumber;
        var value$12 = GqlConverters.$$BigInt.serialize(value$11);
        var value$13 = value.txHash;
        var value$14 = GqlConverters.Bytes.serialize(value$13);
        var value$15 = value.timestamp;
        var value$16 = GqlConverters.$$BigInt.serialize(value$15);
        var value$17 = value.__typename;
        return {
                __typename: value$17,
                timestamp: value$16,
                txHash: value$14,
                blockNumber: value$12,
                syntheticPrice: value$10,
                longTokenPrice: value$8,
                shortTokenPrice: value$6,
                totalValueLocked: value$4,
                setBy: value$2
              };
      });
  return {
          systemStates: systemStates
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var LatestSystemState_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var LatestSystemState_refetchQueryDescription = include.refetchQueryDescription;

var LatestSystemState_use = include.use;

var LatestSystemState_useLazy = include.useLazy;

var LatestSystemState_useLazyWithVariables = include.useLazyWithVariables;

var LatestSystemState = {
  LatestSystemState_inner: LatestSystemState_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: LatestSystemState_refetchQueryDescription,
  use: LatestSystemState_use,
  useLazy: LatestSystemState_useLazy,
  useLazyWithVariables: LatestSystemState_useLazyWithVariables
};

var Raw$1 = {};

var query$1 = (require("@apollo/client").gql`
  query   {
    syntheticMarkets  {
      __typename
      name
      symbol
      marketIndex
      oracleAddress
      syntheticLong  {
        __typename
        id
        tokenAddress
        totalStaked
      }
      syntheticShort  {
        __typename
        id
        tokenAddress
        totalStaked
      }
      latestSystemState  {
        __typename
        totalLockedLong
        totalLockedShort
      }
    }
  }
`);

function parse$1(value) {
  var value$1 = value.syntheticMarkets;
  return {
          syntheticMarkets: value$1.map(function (value) {
                var value$1 = value.syntheticLong;
                var value$2 = value.syntheticShort;
                var value$3 = value.latestSystemState;
                return {
                        __typename: value.__typename,
                        name: value.name,
                        symbol: value.symbol,
                        marketIndex: GqlConverters.$$BigInt.parse(value.marketIndex),
                        oracleAddress: GqlConverters.Bytes.parse(value.oracleAddress),
                        syntheticLong: {
                          __typename: value$1.__typename,
                          id: value$1.id,
                          tokenAddress: GqlConverters.Address.parse(value$1.tokenAddress),
                          totalStaked: GqlConverters.$$BigInt.parse(value$1.totalStaked)
                        },
                        syntheticShort: {
                          __typename: value$2.__typename,
                          id: value$2.id,
                          tokenAddress: GqlConverters.Address.parse(value$2.tokenAddress),
                          totalStaked: GqlConverters.$$BigInt.parse(value$2.totalStaked)
                        },
                        latestSystemState: {
                          __typename: value$3.__typename,
                          totalLockedLong: GqlConverters.$$BigInt.parse(value$3.totalLockedLong),
                          totalLockedShort: GqlConverters.$$BigInt.parse(value$3.totalLockedShort)
                        }
                      };
              })
        };
}

function serialize$1(value) {
  var value$1 = value.syntheticMarkets;
  var syntheticMarkets = value$1.map(function (value) {
        var value$1 = value.latestSystemState;
        var value$2 = value$1.totalLockedShort;
        var value$3 = GqlConverters.$$BigInt.serialize(value$2);
        var value$4 = value$1.totalLockedLong;
        var value$5 = GqlConverters.$$BigInt.serialize(value$4);
        var value$6 = value$1.__typename;
        var latestSystemState = {
          __typename: value$6,
          totalLockedLong: value$5,
          totalLockedShort: value$3
        };
        var value$7 = value.syntheticShort;
        var value$8 = value$7.totalStaked;
        var value$9 = GqlConverters.$$BigInt.serialize(value$8);
        var value$10 = value$7.tokenAddress;
        var value$11 = GqlConverters.Address.serialize(value$10);
        var value$12 = value$7.id;
        var value$13 = value$7.__typename;
        var syntheticShort = {
          __typename: value$13,
          id: value$12,
          tokenAddress: value$11,
          totalStaked: value$9
        };
        var value$14 = value.syntheticLong;
        var value$15 = value$14.totalStaked;
        var value$16 = GqlConverters.$$BigInt.serialize(value$15);
        var value$17 = value$14.tokenAddress;
        var value$18 = GqlConverters.Address.serialize(value$17);
        var value$19 = value$14.id;
        var value$20 = value$14.__typename;
        var syntheticLong = {
          __typename: value$20,
          id: value$19,
          tokenAddress: value$18,
          totalStaked: value$16
        };
        var value$21 = value.oracleAddress;
        var value$22 = GqlConverters.Bytes.serialize(value$21);
        var value$23 = value.marketIndex;
        var value$24 = GqlConverters.$$BigInt.serialize(value$23);
        var value$25 = value.symbol;
        var value$26 = value.name;
        var value$27 = value.__typename;
        return {
                __typename: value$27,
                name: value$26,
                symbol: value$25,
                marketIndex: value$24,
                oracleAddress: value$22,
                syntheticLong: syntheticLong,
                syntheticShort: syntheticShort,
                latestSystemState: latestSystemState
              };
      });
  return {
          syntheticMarkets: syntheticMarkets
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var MarketDetails_inner = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1
};

var include$1 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$1,
      Raw: Raw$1,
      parse: parse$1,
      serialize: serialize$1,
      serializeVariables: serializeVariables$1
    });

var MarketDetails_refetchQueryDescription = include$1.refetchQueryDescription;

var MarketDetails_use = include$1.use;

var MarketDetails_useLazy = include$1.useLazy;

var MarketDetails_useLazyWithVariables = include$1.useLazyWithVariables;

var MarketDetails = {
  MarketDetails_inner: MarketDetails_inner,
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1,
  refetchQueryDescription: MarketDetails_refetchQueryDescription,
  use: MarketDetails_use,
  useLazy: MarketDetails_useLazy,
  useLazyWithVariables: MarketDetails_useLazyWithVariables
};

var Raw$2 = {};

var query$2 = (require("@apollo/client").gql`
  query   {
    syntheticTokens  {
      __typename
      id
      syntheticMarket  {
        __typename
        id
        name
      }
      tokenType
    }
  }
`);

function parse$2(value) {
  var value$1 = value.syntheticTokens;
  return {
          syntheticTokens: value$1.map(function (value) {
                var value$1 = value.syntheticMarket;
                var value$2 = value.tokenType;
                var tmp;
                switch (value$2) {
                  case "Long" :
                      tmp = "Long";
                      break;
                  case "Short" :
                      tmp = "Short";
                      break;
                  default:
                    tmp = {
                      NAME: "FutureAddedValue",
                      VAL: value$2
                    };
                }
                return {
                        __typename: value.__typename,
                        id: value.id,
                        syntheticMarket: {
                          __typename: value$1.__typename,
                          id: value$1.id,
                          name: value$1.name
                        },
                        tokenType: tmp
                      };
              })
        };
}

function serialize$2(value) {
  var value$1 = value.syntheticTokens;
  var syntheticTokens = value$1.map(function (value) {
        var value$1 = value.tokenType;
        var tokenType = typeof value$1 === "string" ? (
            value$1 === "Long" ? "Long" : "Short"
          ) : value$1.VAL;
        var value$2 = value.syntheticMarket;
        var value$3 = value$2.name;
        var value$4 = value$2.id;
        var value$5 = value$2.__typename;
        var syntheticMarket = {
          __typename: value$5,
          id: value$4,
          name: value$3
        };
        var value$6 = value.id;
        var value$7 = value.__typename;
        return {
                __typename: value$7,
                id: value$6,
                syntheticMarket: syntheticMarket,
                tokenType: tokenType
              };
      });
  return {
          syntheticTokens: syntheticTokens
        };
}

function serializeVariables$2(param) {
  
}

function makeVariables$2(param) {
  
}

function makeDefaultVariables$2(param) {
  
}

var SyntheticTokens_inner = {
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  makeDefaultVariables: makeDefaultVariables$2
};

var include$2 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$2,
      Raw: Raw$2,
      parse: parse$2,
      serialize: serialize$2,
      serializeVariables: serializeVariables$2
    });

var SyntheticTokens_refetchQueryDescription = include$2.refetchQueryDescription;

var SyntheticTokens_use = include$2.use;

var SyntheticTokens_useLazy = include$2.useLazy;

var SyntheticTokens_useLazyWithVariables = include$2.useLazyWithVariables;

var SyntheticTokens = {
  SyntheticTokens_inner: SyntheticTokens_inner,
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  makeDefaultVariables: makeDefaultVariables$2,
  refetchQueryDescription: SyntheticTokens_refetchQueryDescription,
  use: SyntheticTokens_use,
  useLazy: SyntheticTokens_useLazy,
  useLazyWithVariables: SyntheticTokens_useLazyWithVariables
};

var Raw$3 = {};

var query$3 = (require("@apollo/client").gql`
  query ($tokenId: String!)  {
    syntheticToken(id: $tokenId)  {
      __typename
      id
      syntheticMarket  {
        __typename
        id
        name
      }
      tokenType
    }
  }
`);

function parse$3(value) {
  var value$1 = value.syntheticToken;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.syntheticMarket;
    var value$3 = value$1.tokenType;
    var tmp$1;
    switch (value$3) {
      case "Long" :
          tmp$1 = "Long";
          break;
      case "Short" :
          tmp$1 = "Short";
          break;
      default:
        tmp$1 = {
          NAME: "FutureAddedValue",
          VAL: value$3
        };
    }
    tmp = {
      __typename: value$1.__typename,
      id: value$1.id,
      syntheticMarket: {
        __typename: value$2.__typename,
        id: value$2.id,
        name: value$2.name
      },
      tokenType: tmp$1
    };
  }
  return {
          syntheticToken: tmp
        };
}

function serialize$3(value) {
  var value$1 = value.syntheticToken;
  var syntheticToken;
  if (value$1 !== undefined) {
    var value$2 = value$1.tokenType;
    var tokenType = typeof value$2 === "string" ? (
        value$2 === "Long" ? "Long" : "Short"
      ) : value$2.VAL;
    var value$3 = value$1.syntheticMarket;
    var value$4 = value$3.name;
    var value$5 = value$3.id;
    var value$6 = value$3.__typename;
    var syntheticMarket = {
      __typename: value$6,
      id: value$5,
      name: value$4
    };
    var value$7 = value$1.id;
    var value$8 = value$1.__typename;
    syntheticToken = {
      __typename: value$8,
      id: value$7,
      syntheticMarket: syntheticMarket,
      tokenType: tokenType
    };
  } else {
    syntheticToken = null;
  }
  return {
          syntheticToken: syntheticToken
        };
}

function serializeVariables$3(inp) {
  return {
          tokenId: inp.tokenId
        };
}

function makeVariables$3(tokenId, param) {
  return {
          tokenId: tokenId
        };
}

var SyntheticToken_inner = {
  Raw: Raw$3,
  query: query$3,
  parse: parse$3,
  serialize: serialize$3,
  serializeVariables: serializeVariables$3,
  makeVariables: makeVariables$3
};

var include$3 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$3,
      Raw: Raw$3,
      parse: parse$3,
      serialize: serialize$3,
      serializeVariables: serializeVariables$3
    });

var SyntheticToken_refetchQueryDescription = include$3.refetchQueryDescription;

var SyntheticToken_use = include$3.use;

var SyntheticToken_useLazy = include$3.useLazy;

var SyntheticToken_useLazyWithVariables = include$3.useLazyWithVariables;

var SyntheticToken = {
  SyntheticToken_inner: SyntheticToken_inner,
  Raw: Raw$3,
  query: query$3,
  parse: parse$3,
  serialize: serialize$3,
  serializeVariables: serializeVariables$3,
  makeVariables: makeVariables$3,
  refetchQueryDescription: SyntheticToken_refetchQueryDescription,
  use: SyntheticToken_use,
  useLazy: SyntheticToken_useLazy,
  useLazyWithVariables: SyntheticToken_useLazyWithVariables
};

var Raw$4 = {};

var query$4 = (require("@apollo/client").gql`
  query ($userId: String!)  {
    currentStakes(where: {user: $userId})  {
      __typename
      id
      currentStake  {
        __typename
        id
        timestamp
        blockNumber
        creationTxHash
        tokenType  {
          __typename
          tokenAddress
          totalStaked
          tokenType
          syntheticMarket  {
            __typename
            name
            symbol
          }
        }
        amount
        withdrawn
      }
    }
  }
`);

function parse$4(value) {
  var value$1 = value.currentStakes;
  return {
          currentStakes: value$1.map(function (value) {
                var value$1 = value.currentStake;
                var value$2 = value$1.tokenType;
                var value$3 = value$2.tokenType;
                var tmp;
                switch (value$3) {
                  case "Long" :
                      tmp = "Long";
                      break;
                  case "Short" :
                      tmp = "Short";
                      break;
                  default:
                    tmp = {
                      NAME: "FutureAddedValue",
                      VAL: value$3
                    };
                }
                var value$4 = value$2.syntheticMarket;
                return {
                        __typename: value.__typename,
                        id: value.id,
                        currentStake: {
                          __typename: value$1.__typename,
                          id: value$1.id,
                          timestamp: GqlConverters.$$BigInt.parse(value$1.timestamp),
                          blockNumber: GqlConverters.$$BigInt.parse(value$1.blockNumber),
                          creationTxHash: GqlConverters.Bytes.parse(value$1.creationTxHash),
                          tokenType: {
                            __typename: value$2.__typename,
                            tokenAddress: GqlConverters.Address.parse(value$2.tokenAddress),
                            totalStaked: GqlConverters.$$BigInt.parse(value$2.totalStaked),
                            tokenType: tmp,
                            syntheticMarket: {
                              __typename: value$4.__typename,
                              name: value$4.name,
                              symbol: value$4.symbol
                            }
                          },
                          amount: GqlConverters.$$BigInt.parse(value$1.amount),
                          withdrawn: value$1.withdrawn
                        }
                      };
              })
        };
}

function serialize$4(value) {
  var value$1 = value.currentStakes;
  var currentStakes = value$1.map(function (value) {
        var value$1 = value.currentStake;
        var value$2 = value$1.withdrawn;
        var value$3 = value$1.amount;
        var value$4 = GqlConverters.$$BigInt.serialize(value$3);
        var value$5 = value$1.tokenType;
        var value$6 = value$5.syntheticMarket;
        var value$7 = value$6.symbol;
        var value$8 = value$6.name;
        var value$9 = value$6.__typename;
        var syntheticMarket = {
          __typename: value$9,
          name: value$8,
          symbol: value$7
        };
        var value$10 = value$5.tokenType;
        var tokenType = typeof value$10 === "string" ? (
            value$10 === "Long" ? "Long" : "Short"
          ) : value$10.VAL;
        var value$11 = value$5.totalStaked;
        var value$12 = GqlConverters.$$BigInt.serialize(value$11);
        var value$13 = value$5.tokenAddress;
        var value$14 = GqlConverters.Address.serialize(value$13);
        var value$15 = value$5.__typename;
        var tokenType$1 = {
          __typename: value$15,
          tokenAddress: value$14,
          totalStaked: value$12,
          tokenType: tokenType,
          syntheticMarket: syntheticMarket
        };
        var value$16 = value$1.creationTxHash;
        var value$17 = GqlConverters.Bytes.serialize(value$16);
        var value$18 = value$1.blockNumber;
        var value$19 = GqlConverters.$$BigInt.serialize(value$18);
        var value$20 = value$1.timestamp;
        var value$21 = GqlConverters.$$BigInt.serialize(value$20);
        var value$22 = value$1.id;
        var value$23 = value$1.__typename;
        var currentStake = {
          __typename: value$23,
          id: value$22,
          timestamp: value$21,
          blockNumber: value$19,
          creationTxHash: value$17,
          tokenType: tokenType$1,
          amount: value$4,
          withdrawn: value$2
        };
        var value$24 = value.id;
        var value$25 = value.__typename;
        return {
                __typename: value$25,
                id: value$24,
                currentStake: currentStake
              };
      });
  return {
          currentStakes: currentStakes
        };
}

function serializeVariables$4(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables$4(userId, param) {
  return {
          userId: userId
        };
}

var UsersStakes_inner = {
  Raw: Raw$4,
  query: query$4,
  parse: parse$4,
  serialize: serialize$4,
  serializeVariables: serializeVariables$4,
  makeVariables: makeVariables$4
};

var include$4 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$4,
      Raw: Raw$4,
      parse: parse$4,
      serialize: serialize$4,
      serializeVariables: serializeVariables$4
    });

var UsersStakes_refetchQueryDescription = include$4.refetchQueryDescription;

var UsersStakes_use = include$4.use;

var UsersStakes_useLazy = include$4.useLazy;

var UsersStakes_useLazyWithVariables = include$4.useLazyWithVariables;

var UsersStakes = {
  UsersStakes_inner: UsersStakes_inner,
  Raw: Raw$4,
  query: query$4,
  parse: parse$4,
  serialize: serialize$4,
  serializeVariables: serializeVariables$4,
  makeVariables: makeVariables$4,
  refetchQueryDescription: UsersStakes_refetchQueryDescription,
  use: UsersStakes_use,
  useLazy: UsersStakes_useLazy,
  useLazyWithVariables: UsersStakes_useLazyWithVariables
};

var Raw$5 = {};

var query$5 = (require("@apollo/client").gql`
  query ($userId: String!)  {
    currentStakes(where: {user: $userId, withdrawn: false})  {
      __typename
      id
      currentStake  {
        __typename
        id
        timestamp
        blockNumber
        creationTxHash
        tokenType  {
          __typename
          tokenAddress
          totalStaked
          tokenType
          syntheticMarket  {
            __typename
            name
            symbol
          }
        }
        amount
      }
    }
  }
`);

function parse$5(value) {
  var value$1 = value.currentStakes;
  return {
          currentStakes: value$1.map(function (value) {
                var value$1 = value.currentStake;
                var value$2 = value$1.tokenType;
                var value$3 = value$2.tokenType;
                var tmp;
                switch (value$3) {
                  case "Long" :
                      tmp = "Long";
                      break;
                  case "Short" :
                      tmp = "Short";
                      break;
                  default:
                    tmp = {
                      NAME: "FutureAddedValue",
                      VAL: value$3
                    };
                }
                var value$4 = value$2.syntheticMarket;
                return {
                        __typename: value.__typename,
                        id: value.id,
                        currentStake: {
                          __typename: value$1.__typename,
                          id: value$1.id,
                          timestamp: GqlConverters.$$BigInt.parse(value$1.timestamp),
                          blockNumber: GqlConverters.$$BigInt.parse(value$1.blockNumber),
                          creationTxHash: GqlConverters.Bytes.parse(value$1.creationTxHash),
                          tokenType: {
                            __typename: value$2.__typename,
                            tokenAddress: GqlConverters.Bytes.parse(value$2.tokenAddress),
                            totalStaked: GqlConverters.$$BigInt.parse(value$2.totalStaked),
                            tokenType: tmp,
                            syntheticMarket: {
                              __typename: value$4.__typename,
                              name: value$4.name,
                              symbol: value$4.symbol
                            }
                          },
                          amount: GqlConverters.$$BigInt.parse(value$1.amount)
                        }
                      };
              })
        };
}

function serialize$5(value) {
  var value$1 = value.currentStakes;
  var currentStakes = value$1.map(function (value) {
        var value$1 = value.currentStake;
        var value$2 = value$1.amount;
        var value$3 = GqlConverters.$$BigInt.serialize(value$2);
        var value$4 = value$1.tokenType;
        var value$5 = value$4.syntheticMarket;
        var value$6 = value$5.symbol;
        var value$7 = value$5.name;
        var value$8 = value$5.__typename;
        var syntheticMarket = {
          __typename: value$8,
          name: value$7,
          symbol: value$6
        };
        var value$9 = value$4.tokenType;
        var tokenType = typeof value$9 === "string" ? (
            value$9 === "Long" ? "Long" : "Short"
          ) : value$9.VAL;
        var value$10 = value$4.totalStaked;
        var value$11 = GqlConverters.$$BigInt.serialize(value$10);
        var value$12 = value$4.tokenAddress;
        var value$13 = GqlConverters.Bytes.serialize(value$12);
        var value$14 = value$4.__typename;
        var tokenType$1 = {
          __typename: value$14,
          tokenAddress: value$13,
          totalStaked: value$11,
          tokenType: tokenType,
          syntheticMarket: syntheticMarket
        };
        var value$15 = value$1.creationTxHash;
        var value$16 = GqlConverters.Bytes.serialize(value$15);
        var value$17 = value$1.blockNumber;
        var value$18 = GqlConverters.$$BigInt.serialize(value$17);
        var value$19 = value$1.timestamp;
        var value$20 = GqlConverters.$$BigInt.serialize(value$19);
        var value$21 = value$1.id;
        var value$22 = value$1.__typename;
        var currentStake = {
          __typename: value$22,
          id: value$21,
          timestamp: value$20,
          blockNumber: value$18,
          creationTxHash: value$16,
          tokenType: tokenType$1,
          amount: value$3
        };
        var value$23 = value.id;
        var value$24 = value.__typename;
        return {
                __typename: value$24,
                id: value$23,
                currentStake: currentStake
              };
      });
  return {
          currentStakes: currentStakes
        };
}

function serializeVariables$5(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables$5(userId, param) {
  return {
          userId: userId
        };
}

var UsersActiveStakes_inner = {
  Raw: Raw$5,
  query: query$5,
  parse: parse$5,
  serialize: serialize$5,
  serializeVariables: serializeVariables$5,
  makeVariables: makeVariables$5
};

var include$5 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$5,
      Raw: Raw$5,
      parse: parse$5,
      serialize: serialize$5,
      serializeVariables: serializeVariables$5
    });

var UsersActiveStakes_refetchQueryDescription = include$5.refetchQueryDescription;

var UsersActiveStakes_use = include$5.use;

var UsersActiveStakes_useLazy = include$5.useLazy;

var UsersActiveStakes_useLazyWithVariables = include$5.useLazyWithVariables;

var UsersActiveStakes = {
  UsersActiveStakes_inner: UsersActiveStakes_inner,
  Raw: Raw$5,
  query: query$5,
  parse: parse$5,
  serialize: serialize$5,
  serializeVariables: serializeVariables$5,
  makeVariables: makeVariables$5,
  refetchQueryDescription: UsersActiveStakes_refetchQueryDescription,
  use: UsersActiveStakes_use,
  useLazy: UsersActiveStakes_useLazy,
  useLazyWithVariables: UsersActiveStakes_useLazyWithVariables
};

export {
  LatestSystemState ,
  MarketDetails ,
  SyntheticTokens ,
  SyntheticToken ,
  UsersStakes ,
  UsersActiveStakes ,
  
}
/* query Not a pure module */
