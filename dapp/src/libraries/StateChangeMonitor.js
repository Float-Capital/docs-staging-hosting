// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as RootProvider from "./RootProvider.js";
import * as ApolloClient__React_Hooks_UseQuery from "rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.js";

var initialDataFreshnessId = "refetchString";

var context = React.createContext(initialDataFreshnessId);

var provider = context.Provider;

var Raw = {};

var query = (require("@apollo/client").gql`
  query   {
    stateChanges(first: 1, orderBy: timestamp, orderDirection: desc)  {
      __typename
      id
    }
  }
`);

function parse(value) {
  var value$1 = value.stateChanges;
  return {
          stateChanges: value$1.map(function (value) {
                return {
                        __typename: value.__typename,
                        id: value.id
                      };
              })
        };
}

function serialize(value) {
  var value$1 = value.stateChanges;
  var stateChanges = value$1.map(function (value) {
        var value$1 = value.id;
        var value$2 = value.__typename;
        return {
                __typename: value$2,
                id: value$1
              };
      });
  return {
          stateChanges: stateChanges
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var LatestStateChange_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var useLazy = include.useLazy;

var LatestStateChange_refetchQueryDescription = include.refetchQueryDescription;

var LatestStateChange_use = include.use;

var LatestStateChange_useLazyWithVariables = include.useLazyWithVariables;

var LatestStateChange = {
  LatestStateChange_inner: LatestStateChange_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: LatestStateChange_refetchQueryDescription,
  use: LatestStateChange_use,
  useLazy: useLazy,
  useLazyWithVariables: LatestStateChange_useLazyWithVariables
};

function StateChangeMonitor(Props) {
  var children = Props.children;
  var match = React.useState(function () {
        return [
                initialDataFreshnessId,
                initialDataFreshnessId
              ];
      });
  var setDataFreshnessId = match[1];
  var match$1 = match[0];
  var nextDataFreshnessId = match$1[1];
  var match$2 = Curry.app(useLazy, [
        undefined,
        undefined,
        undefined,
        undefined,
        /* CacheAndNetwork */0,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var queryResult = match$2[1];
  var executeQuery = match$2[0];
  var isLoggedIn = RootProvider.useIsLoggedIn(undefined);
  React.useEffect((function () {
          if (queryResult.TAG === /* Executed */0) {
            var match = queryResult._0.data;
            if (match !== undefined) {
              var match$1 = match.stateChanges;
              if (match$1.length === 1) {
                var match$2 = match$1[0];
                var id = match$2.id;
                if (id !== nextDataFreshnessId) {
                  Curry._1(setDataFreshnessId, (function (param) {
                          return [
                                  nextDataFreshnessId,
                                  id
                                ];
                        }));
                }
                
              }
              
            }
            
          }
          
        }), [queryResult]);
  React.useEffect((function () {
          if (!isLoggedIn) {
            return ;
          }
          Curry._3(executeQuery, undefined, undefined, undefined);
          var interval = setInterval((function (param) {
                  return Curry._3(executeQuery, undefined, undefined, undefined);
                }), 3000);
          return (function (param) {
                    clearInterval(interval);
                    
                  });
        }), [isLoggedIn]);
  return React.createElement(provider, {
              value: match$1[0],
              children: children
            });
}

function useDataFreshnessString(param) {
  return React.useContext(context);
}

var make = StateChangeMonitor;

export {
  initialDataFreshnessId ,
  context ,
  provider ,
  LatestStateChange ,
  make ,
  useDataFreshnessString ,
  
}
/* context Not a pure module */
