// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Misc from "./Misc.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Client from "../data/Client.js";
import * as Ethers from "ethers";
import * as Globals from "./Globals.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as RootProvider from "./RootProvider.js";
import * as GqlConverters from "./GqlConverters.js";
import FromUnixTime from "date-fns/fromUnixTime";
import * as ApolloClient__React_Hooks_UseQuery from "rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  fragment BasicUserInfo on User   {
    __typename
    id
    totalMintedFloat
    floatTokenBalance
    numberOfTransactions
    totalGasUsed
  }
`);

function parse(value) {
  return {
          __typename: value.__typename,
          id: value.id,
          totalMintedFloat: GqlConverters.$$BigInt.parse(value.totalMintedFloat),
          floatTokenBalance: GqlConverters.$$BigInt.parse(value.floatTokenBalance),
          numberOfTransactions: GqlConverters.$$BigInt.parse(value.numberOfTransactions),
          totalGasUsed: GqlConverters.$$BigInt.parse(value.totalGasUsed)
        };
}

function serialize(value) {
  var value$1 = value.totalGasUsed;
  var value$2 = GqlConverters.$$BigInt.serialize(value$1);
  var value$3 = value.numberOfTransactions;
  var value$4 = GqlConverters.$$BigInt.serialize(value$3);
  var value$5 = value.floatTokenBalance;
  var value$6 = GqlConverters.$$BigInt.serialize(value$5);
  var value$7 = value.totalMintedFloat;
  var value$8 = GqlConverters.$$BigInt.serialize(value$7);
  var value$9 = value.id;
  var value$10 = value.__typename;
  return {
          __typename: value$10,
          id: value$9,
          totalMintedFloat: value$8,
          floatTokenBalance: value$6,
          numberOfTransactions: value$4,
          totalGasUsed: value$2
        };
}

function verifyArgsAndParse(_BasicUserInfo, value) {
  return parse(value);
}

function verifyName(param) {
  
}

var BasicUserInfo = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  verifyArgsAndParse: verifyArgsAndParse,
  verifyName: verifyName
};

var Raw$1 = {};

var query$1 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!)  {
    user(id: $userId)  {
      ...BasicUserInfo
    }
  }
  ${frag_0}
`)(query);

function parse$1(value) {
  var value$1 = value.user;
  return {
          user: !(value$1 == null) ? parse(value$1) : undefined
        };
}

function serialize$1(value) {
  var value$1 = value.user;
  var user = value$1 !== undefined ? serialize(value$1) : null;
  return {
          user: user
        };
}

function serializeVariables(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables(userId, param) {
  return {
          userId: userId
        };
}

var UserQuery_inner = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$1,
      Raw: Raw$1,
      parse: parse$1,
      serialize: serialize$1,
      serializeVariables: serializeVariables
    });

var UserQuery_refetchQueryDescription = include.refetchQueryDescription;

var UserQuery_use = include.use;

var UserQuery_useLazy = include.useLazy;

var UserQuery_useLazyWithVariables = include.useLazyWithVariables;

var UserQuery = {
  UserQuery_inner: UserQuery_inner,
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  refetchQueryDescription: UserQuery_refetchQueryDescription,
  use: UserQuery_use,
  useLazy: UserQuery_useLazy,
  useLazyWithVariables: UserQuery_useLazyWithVariables
};

var Raw$2 = {};

var query$2 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!, $timestamp: BigInt!)  {
    stateChanges(where: {timestamp_gt: $timestamp})  {
      __typename
      timestamp
      affectedUsers(where: {id: $userId})  {
        ...BasicUserInfo
      }
    }
  }
  ${frag_0}
`)(query);

function parse$2(value) {
  var value$1 = value.stateChanges;
  return {
          stateChanges: value$1.map(function (value) {
                var value$1 = value.affectedUsers;
                return {
                        __typename: value.__typename,
                        timestamp: GqlConverters.$$BigInt.parse(value.timestamp),
                        affectedUsers: !(value$1 == null) ? value$1.map(parse) : undefined
                      };
              })
        };
}

function serialize$2(value) {
  var value$1 = value.stateChanges;
  var stateChanges = value$1.map(function (value) {
        var value$1 = value.affectedUsers;
        var affectedUsers = value$1 !== undefined ? value$1.map(serialize) : null;
        var value$2 = value.timestamp;
        var value$3 = GqlConverters.$$BigInt.serialize(value$2);
        var value$4 = value.__typename;
        return {
                __typename: value$4,
                timestamp: value$3,
                affectedUsers: affectedUsers
              };
      });
  return {
          stateChanges: stateChanges
        };
}

function serializeVariables$1(inp) {
  return {
          userId: inp.userId,
          timestamp: inp.timestamp
        };
}

function makeVariables$1(userId, timestamp, param) {
  return {
          userId: userId,
          timestamp: timestamp
        };
}

var StateChangePoll_inner = {
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1
};

var include$1 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$2,
      Raw: Raw$2,
      parse: parse$2,
      serialize: serialize$2,
      serializeVariables: serializeVariables$1
    });

var StateChangePoll_refetchQueryDescription = include$1.refetchQueryDescription;

var StateChangePoll_use = include$1.use;

var StateChangePoll_useLazy = include$1.useLazy;

var StateChangePoll_useLazyWithVariables = include$1.useLazyWithVariables;

var StateChangePoll = {
  StateChangePoll_inner: StateChangePoll_inner,
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  refetchQueryDescription: StateChangePoll_refetchQueryDescription,
  use: StateChangePoll_use,
  useLazy: StateChangePoll_useLazy,
  useLazyWithVariables: StateChangePoll_useLazyWithVariables
};

function queryLatestStateChanges(client, pollVariables) {
  return Curry._6(client.rescript_query, {
              query: query$2,
              Raw: Raw$2,
              parse: parse$2,
              serialize: serialize$2,
              serializeVariables: serializeVariables$1
            }, undefined, undefined, /* NetworkOnly */2, undefined, pollVariables);
}

var initialDataFreshnessId = "refetchString";

var context = React.createContext(initialDataFreshnessId);

var provider = context.Provider;

function StateChangeMonitor(Props) {
  var children = Props.children;
  var match = React.useState(function () {
        return [
                initialDataFreshnessId,
                initialDataFreshnessId
              ];
      });
  var match$1 = React.useState(function () {
        return Ethers.BigNumber.from(Misc.Time.getCurrentTimestamp(undefined));
      });
  var setLatestStateChangeTimestamp = match$1[1];
  var latestStateChangeTimestamp = match$1[0];
  var optCurrentUser = RootProvider.useCurrentUser(undefined);
  var client = Client.useApolloClient(undefined);
  React.useEffect((function () {
          if (optCurrentUser === undefined) {
            return ;
          }
          var currentUser = Caml_option.valFromOption(optCurrentUser);
          var interval = setInterval((function (param) {
                  var currentUser$1 = Globals.ethAdrToLowerStr(currentUser);
                  var pollVariables_timestamp = GqlConverters.$$BigInt.serialize(latestStateChangeTimestamp);
                  var pollVariables = {
                    userId: currentUser$1,
                    timestamp: pollVariables_timestamp
                  };
                  queryLatestStateChanges(client, pollVariables).then(function (queryResult) {
                        if (queryResult.TAG !== /* Ok */0) {
                          return ;
                        }
                        var stateChanges = queryResult._0.data.stateChanges;
                        if (stateChanges.length !== 0) {
                          Belt_Array.map(stateChanges, (function (param) {
                                  var timestamp = param.timestamp;
                                  if (timestamp.gt(latestStateChangeTimestamp)) {
                                    Curry._1(setLatestStateChangeTimestamp, (function (param) {
                                            return timestamp;
                                          }));
                                  }
                                  Belt_Option.map(param.affectedUsers, (function (affectedUsers) {
                                          return Belt_Array.map(affectedUsers, (function (userData) {
                                                        Curry._6(client.rescript_writeFragment, {
                                                              query: query,
                                                              Raw: Raw,
                                                              parse: parse,
                                                              serialize: serialize
                                                            }, {
                                                              __typename: userData.__typename,
                                                              id: userData.id,
                                                              totalMintedFloat: userData.totalMintedFloat,
                                                              floatTokenBalance: userData.floatTokenBalance,
                                                              numberOfTransactions: userData.numberOfTransactions,
                                                              totalGasUsed: userData.totalGasUsed
                                                            }, undefined, "User:" + "0x374252d2c9f0075b7e2ca2a9868b44f1f62fba80", undefined, undefined);
                                                        
                                                      }));
                                        }));
                                  
                                }));
                          return ;
                        }
                        
                      });
                  
                }), 3000);
          return (function (param) {
                    clearInterval(interval);
                    
                  });
        }), [
        optCurrentUser,
        latestStateChangeTimestamp
      ]);
  FromUnixTime(latestStateChangeTimestamp.toNumber());
  return React.createElement(provider, {
              value: match[0][0],
              children: children
            });
}

function useDataFreshnessString(param) {
  return React.useContext(context);
}

var make = StateChangeMonitor;

export {
  BasicUserInfo ,
  UserQuery ,
  StateChangePoll ,
  queryLatestStateChanges ,
  initialDataFreshnessId ,
  context ,
  provider ,
  make ,
  useDataFreshnessString ,
  
}
/* query Not a pure module */
