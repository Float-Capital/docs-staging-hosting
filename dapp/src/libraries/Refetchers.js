// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Client = require("../data/Client.js");
var Queries = require("../data/Queries.js");

function useRefetchLastOracleTimestamp(marketIndex, stateForRefetchExecution) {
  var client = Client.useApolloClient(undefined);
  var reqVariables = {
    marketIndex: marketIndex.toString()
  };
  React.useEffect((function () {
          var timeout = setTimeout((function (param) {
                  Curry._6(client.rescript_query, {
                          query: Queries.OraclesLastUpdate.query,
                          Raw: Queries.OraclesLastUpdate.Raw,
                          parse: Queries.OraclesLastUpdate.parse,
                          serialize: Queries.OraclesLastUpdate.serialize,
                          serializeVariables: Queries.OraclesLastUpdate.serializeVariables
                        }, undefined, undefined, /* NetworkOnly */2, undefined, reqVariables).then(function (queryResult) {
                        if (queryResult.TAG !== /* Ok */0) {
                          return ;
                        }
                        Curry._1(client.rescript_writeQuery, {
                              query: Queries.OraclesLastUpdate.query,
                              Raw: Queries.OraclesLastUpdate.Raw,
                              parse: Queries.OraclesLastUpdate.parse,
                              serialize: Queries.OraclesLastUpdate.serialize,
                              serializeVariables: Queries.OraclesLastUpdate.serializeVariables
                            });
                        
                      });
                  
                }), 1000);
          return (function (param) {
                    clearTimeout(timeout);
                    
                  });
        }), [stateForRefetchExecution]);
  
}

function useRefetchConfirmedSynths(userId, stateForRefetchExecution) {
  var client = Client.useApolloClient(undefined);
  var reqVariables = {
    userId: userId
  };
  React.useEffect((function () {
          console.log("refetch confirmed synths in refetched");
          var timeout = setTimeout((function (param) {
                  Curry._6(client.rescript_query, {
                          query: Queries.UsersConfirmedMints.query,
                          Raw: Queries.UsersConfirmedMints.Raw,
                          parse: Queries.UsersConfirmedMints.parse,
                          serialize: Queries.UsersConfirmedMints.serialize,
                          serializeVariables: Queries.UsersConfirmedMints.serializeVariables
                        }, undefined, undefined, /* NetworkOnly */2, undefined, reqVariables).then(function (queryResult) {
                        if (queryResult.TAG === /* Ok */0 && queryResult._0.data.user !== undefined) {
                          Curry._1(client.rescript_writeQuery, {
                                query: Queries.UsersConfirmedMints.query,
                                Raw: Queries.UsersConfirmedMints.Raw,
                                parse: Queries.UsersConfirmedMints.parse,
                                serialize: Queries.UsersConfirmedMints.serialize,
                                serializeVariables: Queries.UsersConfirmedMints.serializeVariables
                              });
                          return ;
                        }
                        
                      });
                  
                }), 1000);
          return (function (param) {
                    clearTimeout(timeout);
                    
                  });
        }), [stateForRefetchExecution]);
  
}

function useRefetchPendingSynths(userId, stateForRefetchExecution) {
  var client = Client.useApolloClient(undefined);
  var reqVariables = {
    userId: userId
  };
  React.useEffect((function () {
          console.log("refetch pending synths in refetched");
          var timeout = setTimeout((function (param) {
                  Curry._6(client.rescript_query, {
                          query: Queries.UsersPendingMints.query,
                          Raw: Queries.UsersPendingMints.Raw,
                          parse: Queries.UsersPendingMints.parse,
                          serialize: Queries.UsersPendingMints.serialize,
                          serializeVariables: Queries.UsersPendingMints.serializeVariables
                        }, undefined, undefined, /* NetworkOnly */2, undefined, reqVariables).then(function (queryResult) {
                        if (queryResult.TAG === /* Ok */0 && queryResult._0.data.user !== undefined) {
                          Curry._1(client.rescript_writeQuery, {
                                query: Queries.UsersPendingMints.query,
                                Raw: Queries.UsersPendingMints.Raw,
                                parse: Queries.UsersPendingMints.parse,
                                serialize: Queries.UsersPendingMints.serialize,
                                serializeVariables: Queries.UsersPendingMints.serializeVariables
                              });
                          return ;
                        }
                        
                      });
                  
                }), 1000);
          return (function (param) {
                    clearTimeout(timeout);
                    
                  });
        }), [stateForRefetchExecution]);
  
}

exports.useRefetchLastOracleTimestamp = useRefetchLastOracleTimestamp;
exports.useRefetchConfirmedSynths = useRefetchConfirmedSynths;
exports.useRefetchPendingSynths = useRefetchPendingSynths;
/* react Not a pure module */
