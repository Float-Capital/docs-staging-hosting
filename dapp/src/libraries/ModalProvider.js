// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Modal = require("../components/UI/Base/Modal.js");
var React = require("react");

var context = React.createContext({
      showModal: (function (param) {
          
        }),
      hideModal: (function (param) {
          
        }),
      showModalWithTitle: (function (param, param$1) {
          
        }),
      setModalState: (function (param) {
          
        })
    });

var provider = context.Provider;

function ModalProvider$ModalContext$Provider(Props) {
  var value = Props.value;
  var children = Props.children;
  return React.createElement(provider, {
              value: value,
              children: children
            });
}

var Provider = {
  provider: provider,
  make: ModalProvider$ModalContext$Provider
};

var ModalContext = {
  context: context,
  Provider: Provider
};

function defaultModalInfo_hideModalCallback(param) {
  
}

var defaultModalInfo = {
  title: "",
  content: null,
  showModal: false,
  hideModalCallback: defaultModalInfo_hideModalCallback
};

function useModalDisplay(param) {
  var modalSetters = React.useContext(context);
  React.useEffect((function () {
          return modalSetters.hideModal;
        }), []);
  return modalSetters;
}

function useModalDisplayChain(param) {
  var modalSetters = React.useContext(context);
  var chainHasBeenHidden = React.useRef(false);
  var chainHasBeenInitialized = React.useRef(false);
  var hideModal = function (param) {
    chainHasBeenHidden.current = true;
    return Curry._1(modalSetters.hideModal, undefined);
  };
  var startModalChain = function (content) {
    chainHasBeenHidden.current = false;
    chainHasBeenInitialized.current = true;
    return Curry._1(modalSetters.setModalState, (function (param) {
                  return {
                          title: "",
                          content: content,
                          showModal: true,
                          hideModalCallback: (function (param) {
                              chainHasBeenHidden.current = true;
                              
                            })
                        };
                }));
  };
  var showNextModalInChain = function (content) {
    if (chainHasBeenInitialized.current) {
      if (!chainHasBeenHidden.current) {
        return Curry._1(modalSetters.showModal, content);
      } else {
        return ;
      }
    } else {
      console.log("Not showing the modal, please start a chain first");
      return ;
    }
  };
  React.useEffect((function () {
          return modalSetters.hideModal;
        }), []);
  return {
          showNextModalInChain: showNextModalInChain,
          hideModalChain: hideModal,
          startModalChain: startModalChain
        };
}

function ModalProvider(Props) {
  var children = Props.children;
  var match = React.useState(function () {
        return defaultModalInfo;
      });
  var setModalState = match[1];
  var match$1 = match[0];
  var hideModalCallback = match$1.hideModalCallback;
  var showModal = match$1.showModal;
  var hideModal = function (param) {
    if (showModal) {
      Curry._1(hideModalCallback, undefined);
      return Curry._1(setModalState, (function (param) {
                    return defaultModalInfo;
                  }));
    }
    
  };
  return React.createElement(ModalProvider$ModalContext$Provider, {
              value: {
                showModal: (function (content) {
                    return Curry._1(setModalState, (function (state) {
                                  return {
                                          title: "",
                                          content: content,
                                          showModal: true,
                                          hideModalCallback: state.hideModalCallback
                                        };
                                }));
                  }),
                hideModal: hideModal,
                showModalWithTitle: (function (content, title) {
                    return Curry._1(setModalState, (function (state) {
                                  return {
                                          title: title,
                                          content: content,
                                          showModal: true,
                                          hideModalCallback: state.hideModalCallback
                                        };
                                }));
                  }),
                setModalState: setModalState
              },
              children: null
            }, children, showModal ? React.createElement(Modal.make, {
                    title: match$1.title,
                    closeModal: hideModal,
                    children: match$1.content
                  }) : null);
}

var make = ModalProvider;

exports.ModalContext = ModalContext;
exports.defaultModalInfo = defaultModalInfo;
exports.useModalDisplay = useModalDisplay;
exports.useModalDisplayChain = useModalDisplayChain;
exports.make = make;
/* context Not a pure module */
