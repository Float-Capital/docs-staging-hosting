// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Card = require("./components/UI/Card.js");
var React = require("react");
var Config = require("./Config.js");
var Globals = require("./libraries/Globals.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var MiniLoader = require("./components/UI/MiniLoader.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var FormatMoney = require("./components/UI/FormatMoney.js");
var DataFetchers = require("./components/Data/DataFetchers.js");
var RootProvider = require("./libraries/RootProvider.js");
var ClaimFloatImmediatlyPerToken = require("./components/Claim/ClaimFloatImmediatlyPerToken.js");

function StakeDetails$UsersActiveStakes(Props) {
  var currentUser = Props.currentUser;
  var activeStakes = DataFetchers.useUsersStakes(currentUser);
  var match = activeStakes.data;
  var tmp;
  if (match !== undefined) {
    var currentStakes = match.currentStakes;
    tmp = currentStakes.length !== 0 ? React.createElement(React.Fragment, undefined, Belt_Array.map(currentStakes, (function (param) {
                  var match = param.currentStake;
                  var match$1 = match.syntheticToken;
                  var tokenAddress = match$1.tokenAddress;
                  var amountFormatted = FormatMoney.formatEther(undefined, match.amount);
                  var timeSinceStaking = Globals.timestampToDuration(match.timestamp);
                  if (match.withdrawn) {
                    console.log("This is a bug in the graph, no withdrawn stakes should show in the `currentStakes`");
                    return null;
                  } else {
                    return React.createElement(Card.make, {
                                children: null
                              }, React.createElement("div", {
                                    className: "flex justify-between items-start w-full "
                                  }, React.createElement("div", {
                                        className: "flex justify-start items-center "
                                      }, React.createElement("h3", {
                                            className: "text-xl"
                                          }, match$1.syntheticMarket.symbol)), React.createElement("a", {
                                        className: "text-xs hover:text-gray-500 hover:underline  ml-5",
                                        href: Config.blockExplorer + "/tx/" + match.creationTxHash
                                      }, "Last updated " + timeSinceStaking + " ago")), React.createElement("div", {
                                    className: "flex justify-between items-end w-full"
                                  }, React.createElement("h4", {
                                        className: "text-lg"
                                      }, match$1.tokenType), React.createElement("p", {
                                        className: "text-primary "
                                      }, React.createElement("a", {
                                            href: Config.blockExplorer + "/token/" + Globals.ethAdrToStr(tokenAddress) + "?a=" + Globals.ethAdrToStr(currentUser),
                                            rel: "noopener noreferrer",
                                            target: "_"
                                          }, React.createElement("span", {
                                                className: "text-bold text-4xl"
                                              }, amountFormatted), " Tokens")), React.createElement("div", {
                                        className: "flex items-center"
                                      }, React.createElement(ClaimFloatImmediatlyPerToken.make, {
                                            tokenAddress: tokenAddress
                                          }))));
                  }
                }))) : React.createElement("h2", undefined, "You have no active stakes.");
  } else {
    tmp = activeStakes.error !== undefined ? "Error" : React.createElement(MiniLoader.make, {});
  }
  return React.createElement("div", {
              className: "flex flex-col"
            }, React.createElement("h2", {
                  className: "text-xl"
                }, "Your stakes"), tmp);
}

var UsersActiveStakes = {
  make: StakeDetails$UsersActiveStakes
};

function StakeDetails(Props) {
  var optCurrentUser = RootProvider.useCurrentUser(undefined);
  if (optCurrentUser !== undefined) {
    return React.createElement(StakeDetails$UsersActiveStakes, {
                currentUser: Caml_option.valFromOption(optCurrentUser)
              });
  } else {
    return "Login to view your stakes";
  }
}

var make = StakeDetails;

exports.UsersActiveStakes = UsersActiveStakes;
exports.make = make;
/* Card Not a pure module */
