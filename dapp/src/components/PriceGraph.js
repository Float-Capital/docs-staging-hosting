// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Misc = require("../libraries/Misc.js");
var View = require("../libraries/View.js");
var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Button = require("./UI/Base/Button.js");
var Client = require("../data/Client.js");
var Ethers = require("../ethereum/Ethers.js");
var Js_int = require("rescript/lib/js/js_int.js");
var Js_math = require("rescript/lib/js/js_math.js");
var Queries = require("../data/Queries.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Recharts = require("recharts");
var CONSTANTS = require("../CONSTANTS.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Float = require("rescript/lib/js/belt_Float.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Format = require("date-fns/format").default;
var BsRecharts__XAxis = require("@ahrefs/bs-recharts/src/BsRecharts__XAxis.js");
var BsRecharts__YAxis = require("@ahrefs/bs-recharts/src/BsRecharts__YAxis.js");
var BsRecharts__Tooltip = require("@ahrefs/bs-recharts/src/BsRecharts__Tooltip.js");
var FromUnixTime = require("date-fns/fromUnixTime").default;
var BsRecharts__ResponsiveContainer = require("@ahrefs/bs-recharts/src/BsRecharts__ResponsiveContainer.js");

var ethAdrToLowerStr = Ethers.Utils.ethAdrToLowerStr;

function PriceGraph$LoadedGraph(Props) {
  var data = Props.data;
  var xAxisFormat = Props.xAxisFormat;
  var minYValue = Props.minYValue;
  var maxYValue = Props.maxYValue;
  var totalRange = maxYValue - minYValue;
  var yAxisRange = [
    minYValue - totalRange * 0.05,
    maxYValue + totalRange * 0.05
  ];
  var isMobile = View.useIsTailwindMobile(undefined);
  return React.createElement(Recharts.ResponsiveContainer, Curry._3(BsRecharts__ResponsiveContainer.makeProps(isMobile ? ({
                            TAG: 0,
                            _0: 200,
                            [Symbol.for("name")]: "Px"
                          }) : ({
                            TAG: 1,
                            _0: 100,
                            [Symbol.for("name")]: "Prc"
                          }), {
                        TAG: 1,
                        _0: 100,
                        [Symbol.for("name")]: "Prc"
                      })(undefined, "w-full text-xs m-0 p-0", undefined, undefined, undefined), React.createElement(Recharts.LineChart, {
                      data: data,
                      margin: {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                      },
                      children: null
                    }, React.createElement(Recharts.Line, {
                          type: "natural",
                          dataKey: "price",
                          dot: false,
                          stroke: "#0d4184",
                          strokeWidth: 2
                        }), React.createElement(Recharts.Tooltip, Curry.app(BsRecharts__Tooltip.makeProps(undefined)(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined), [
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              (function (value) {
                                  return Format(value, "ha do MMM ''yy");
                                }),
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined
                            ])), React.createElement(Recharts.XAxis, Curry.app(BsRecharts__XAxis.makeProps(undefined)(undefined, undefined, undefined, undefined, undefined, undefined, "date", undefined, undefined, undefined), [
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              (function (value) {
                                  return Format(value, xAxisFormat);
                                }),
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined
                            ])), React.createElement(Recharts.YAxis, Curry.app(BsRecharts__YAxis.makeProps(undefined)("number", undefined, undefined, undefined, false, undefined, undefined, yAxisRange, undefined, undefined), [
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              (function (value) {
                                  return value.toFixed(3);
                                }),
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined
                            ]))), undefined, undefined));
}

var LoadedGraph = {
  make: PriceGraph$LoadedGraph
};

function minThreshodFromGraphSetting(graphSetting) {
  if (typeof graphSetting !== "number") {
    return 0;
  }
  switch (graphSetting) {
    case /* Day */0 :
        return CONSTANTS.oneDayInSeconds;
    case /* Week */1 :
        return CONSTANTS.oneWeekInSeconds;
    case /* Month */2 :
        return CONSTANTS.oneMonthInSeconds;
    case /* ThreeMonth */3 :
        return CONSTANTS.threeMonthsInSeconds;
    case /* Year */4 :
        return CONSTANTS.oneYearInSeconds;
    
  }
}

function btnTextFromGraphSetting(graphSetting) {
  if (typeof graphSetting !== "number") {
    return "MAX";
  }
  switch (graphSetting) {
    case /* Day */0 :
        return "1D";
    case /* Week */1 :
        return "1W";
    case /* Month */2 :
        return "1M";
    case /* ThreeMonth */3 :
        return "3M";
    case /* Year */4 :
        return "1Y";
    
  }
}

function getMaxTimeDateFormatter(timeMarketExists) {
  if (timeMarketExists < CONSTANTS.halfDayInSeconds) {
    return "ha";
  } else if (timeMarketExists < CONSTANTS.oneWeekInSeconds) {
    return "iii";
  } else if (timeMarketExists < CONSTANTS.twoWeeksInSeconds || timeMarketExists < CONSTANTS.threeMonthsInSeconds) {
    return "iii MMM";
  } else {
    return "MMM";
  }
}

function dateFormattersFromGraphSetting(graphSetting) {
  if (typeof graphSetting !== "number") {
    return getMaxTimeDateFormatter(graphSetting._0);
  }
  switch (graphSetting) {
    case /* Day */0 :
        return "ha";
    case /* Week */1 :
    case /* Month */2 :
        return "iii";
    case /* ThreeMonth */3 :
        return "iii MMM";
    case /* Year */4 :
        return "MMM";
    
  }
}

function getMaxTimeIntervalAndAmount(timeMarketExists) {
  if (timeMarketExists < CONSTANTS.halfDayInSeconds) {
    return [
            CONSTANTS.fiveMinutesInSeconds,
            1000
          ];
  } else if (timeMarketExists < CONSTANTS.oneWeekInSeconds) {
    return [
            CONSTANTS.oneHourInSeconds,
            1000
          ];
  } else if (timeMarketExists < CONSTANTS.twoWeeksInSeconds) {
    return [
            CONSTANTS.halfDayInSeconds,
            1000
          ];
  } else if (timeMarketExists < CONSTANTS.threeMonthsInSeconds) {
    return [
            CONSTANTS.oneDayInSeconds,
            1000
          ];
  } else if (timeMarketExists < CONSTANTS.oneYearInSeconds) {
    return [
            CONSTANTS.oneWeekInSeconds,
            1000
          ];
  } else {
    return [
            CONSTANTS.twoWeeksInSeconds,
            1000
          ];
  }
}

function zoomAndNumDataPointsFromGraphSetting(graphSetting) {
  if (typeof graphSetting !== "number") {
    return getMaxTimeIntervalAndAmount(graphSetting._0);
  }
  switch (graphSetting) {
    case /* Day */0 :
        return [
                CONSTANTS.fiveMinutesInSeconds,
                288
              ];
    case /* Week */1 :
        return [
                CONSTANTS.oneHourInSeconds,
                168
              ];
    case /* Month */2 :
        return [
                CONSTANTS.halfDayInSeconds,
                60
              ];
    case /* ThreeMonth */3 :
        return [
                CONSTANTS.oneDayInSeconds,
                90
              ];
    case /* Year */4 :
        return [
                CONSTANTS.oneWeekInSeconds,
                52
              ];
    
  }
}

function extractGraphPriceInfo(rawPriceData, graphZoomSetting) {
  return Belt_Array.reduceReverse(rawPriceData, {
              dataArray: [],
              minYValue: Js_int.max,
              maxYValue: 0,
              dateFormat: dateFormattersFromGraphSetting(graphZoomSetting)
            }, (function (data, param) {
                var price = Belt_Option.getExn(Belt_Float.fromString(Ethers.Utils.formatEther(param.endPrice)));
                return {
                        dataArray: Belt_Array.concat(data.dataArray, [{
                                date: param.startTimestamp,
                                price: price
                              }]),
                        minYValue: price < data.minYValue ? price : data.minYValue,
                        maxYValue: price > data.maxYValue ? price : data.maxYValue,
                        dateFormat: data.dateFormat
                      };
              }));
}

function generateDummyData(endTimestamp) {
  return Belt_Array.reduce(new Array(60), [
                {
                  dataArray: [],
                  minYValue: 200,
                  maxYValue: 100,
                  dateFormat: "iii"
                },
                endTimestamp,
                500
              ], (function (param, _i) {
                  var timestamp = param[1];
                  var data = param[0];
                  var newTimestamp = timestamp - CONSTANTS.oneDayInSeconds;
                  var randomDelta = Js_math.random_int(-30, 25);
                  var randomPrice = param[2] + randomDelta;
                  return [
                          {
                            dataArray: Belt_Array.concat([{
                                    date: FromUnixTime(timestamp),
                                    price: randomPrice
                                  }], data.dataArray),
                            minYValue: randomPrice < data.minYValue ? randomPrice : data.minYValue,
                            maxYValue: randomPrice > data.maxYValue ? randomPrice : data.maxYValue,
                            dateFormat: data.dateFormat
                          },
                          newTimestamp,
                          randomPrice
                        ];
                }))[0];
}

function PriceGraph(Props) {
  var marketName = Props.marketName;
  var oracleAddress = Props.oracleAddress;
  var timestampCreated = Props.timestampCreated;
  var currentTimestamp = Misc.Time.getCurrentTimestamp(undefined);
  var timestampCreatedInt = timestampCreated.toNumber();
  var timeMaketHasExisted = currentTimestamp - timestampCreatedInt | 0;
  var match = React.useState(function () {
        return generateDummyData(currentTimestamp);
      });
  var setDisplayData = match[1];
  var match$1 = match[0];
  var match$2 = React.useState(function () {
        
      });
  var setOverlayMessageText = match$2[1];
  var match$3 = React.useState(function () {
        return {
                _0: timeMaketHasExisted,
                [Symbol.for("name")]: "Max"
              };
      });
  var setGraphSetting = match$3[1];
  var graphSetting = match$3[0];
  var match$4 = zoomAndNumDataPointsFromGraphSetting(graphSetting);
  var priceHistory = Curry.app(Queries.PriceHistory.use, [
        undefined,
        Caml_option.some(Client.createContext(/* PriceHistory */1)),
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        {
          intervalId: ethAdrToLowerStr(oracleAddress) + "-" + String(match$4[0]),
          numDataPoints: match$4[1]
        }
      ]);
  React.useEffect((function () {
          var exit = 0;
          var match = priceHistory.data;
          if (priceHistory.error !== undefined) {
            Curry._1(setOverlayMessageText, (function (param) {
                    return "Error loading data";
                  }));
          } else if (match !== undefined) {
            var match$1 = match.priceIntervalManager;
            if (match$1 !== undefined) {
              var prices = match$1.prices;
              Curry._1(setOverlayMessageText, (function (param) {
                      
                    }));
              Curry._1(setDisplayData, (function (param) {
                      return extractGraphPriceInfo(prices, graphSetting);
                    }));
            } else {
              Curry._1(setOverlayMessageText, (function (param) {
                      return "Unable to find prices for this market";
                    }));
            }
          } else {
            exit = 1;
          }
          if (exit === 1) {
            Curry._1(setOverlayMessageText, (function (param) {
                    return "Loading data for " + marketName;
                  }));
          }
          
        }), [
        graphSetting,
        priceHistory.loading
      ]);
  var overlayMessage = function (message) {
    return React.createElement("div", {
                className: "v-align-in-responsive-height text-center text-gray-500 bg-white bg-opacity-90 p-2 z-10 rounded-lg"
              }, message);
  };
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "flex-1 p-1 my-4 mr-6 flex flex-col relative"
                }, React.createElement("h3", {
                      className: "ml-5"
                    }, marketName + " Price"), React.createElement(PriceGraph$LoadedGraph, {
                      data: match$1.dataArray,
                      xAxisFormat: dateFormattersFromGraphSetting(graphSetting),
                      minYValue: match$1.minYValue,
                      maxYValue: match$1.maxYValue
                    }), Belt_Option.mapWithDefault(match$2[0], null, overlayMessage), React.createElement("div", {
                      className: "flex flex-row justify-between ml-5"
                    }, Belt_Array.map([
                          /* Day */0,
                          /* Week */1,
                          /* Month */2,
                          /* ThreeMonth */3,
                          /* Year */4,
                          {
                            _0: timeMaketHasExisted,
                            [Symbol.for("name")]: "Max"
                          }
                        ], (function (buttonSetting) {
                            var text = btnTextFromGraphSetting(buttonSetting);
                            return React.createElement(Button.Tiny.make, {
                                        onClick: (function (param) {
                                            return Curry._1(setGraphSetting, (function (param) {
                                                          return buttonSetting;
                                                        }));
                                          }),
                                        children: text,
                                        disabled: minThreshodFromGraphSetting(buttonSetting) > timeMaketHasExisted,
                                        active: typeof buttonSetting === "number" || typeof graphSetting === "number" ? Caml_obj.caml_equal(buttonSetting, graphSetting) : true,
                                        key: text
                                      });
                          })))));
}

var make = PriceGraph;

exports.ethAdrToLowerStr = ethAdrToLowerStr;
exports.LoadedGraph = LoadedGraph;
exports.minThreshodFromGraphSetting = minThreshodFromGraphSetting;
exports.btnTextFromGraphSetting = btnTextFromGraphSetting;
exports.getMaxTimeDateFormatter = getMaxTimeDateFormatter;
exports.dateFormattersFromGraphSetting = dateFormattersFromGraphSetting;
exports.getMaxTimeIntervalAndAmount = getMaxTimeIntervalAndAmount;
exports.zoomAndNumDataPointsFromGraphSetting = zoomAndNumDataPointsFromGraphSetting;
exports.extractGraphPriceInfo = extractGraphPriceInfo;
exports.generateDummyData = generateDummyData;
exports.make = make;
/* Misc Not a pure module */
