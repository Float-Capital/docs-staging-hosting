// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../Form.js";
import * as Next from "../../bindings/Next.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../UI/Button.js";
import * as Config from "../../Config.js";
import * as Ethers from "../../ethereum/Ethers.js";
import * as Ethers$1 from "ethers";
import * as CONSTANTS from "../../CONSTANTS.js";
import * as Contracts from "../../ethereum/Contracts.js";
import * as DataHooks from "../../data/DataHooks.js";
import * as Formality from "re-formality/src/Formality.js";
import * as AmountInput from "../UI/AmountInput.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as RootProvider from "../../libraries/RootProvider.js";
import * as ContractHooks from "../Testing/Admin/ContractHooks.js";
import * as ToastProvider from "../UI/ToastProvider.js";
import * as ContractActions from "../../ethereum/ContractActions.js";
import * as Formality__ReactUpdate from "re-formality/src/Formality__ReactUpdate.js";

var validators = {
  amount: {
    strategy: /* OnFirstBlur */0,
    validate: (function (param) {
        return Form.Validators.etherNumberInput(param.amount);
      })
  }
};

function initialFieldsStatuses(_input) {
  return {
          amount: /* Pristine */0
        };
}

function initialState(input) {
  return {
          input: input,
          fieldsStatuses: {
            amount: /* Pristine */0
          },
          collectionsStatuses: undefined,
          formStatus: /* Editing */0,
          submissionStatus: /* NeverSubmitted */0
        };
}

function validateForm(input, validators, fieldsStatuses) {
  var match = fieldsStatuses.amount;
  var match$1 = match ? match._0 : Curry._1(validators.amount.validate, input);
  if (match$1.TAG === /* Ok */0) {
    return {
            TAG: 0,
            output: {
              amount: match$1._0
            },
            fieldsStatuses: {
              amount: {
                _0: match$1,
                _1: /* Shown */0,
                [Symbol.for("name")]: "Dirty"
              }
            },
            collectionsStatuses: undefined,
            [Symbol.for("name")]: "Valid"
          };
  } else {
    return {
            TAG: 1,
            fieldsStatuses: {
              amount: {
                _0: match$1,
                _1: /* Shown */0,
                [Symbol.for("name")]: "Dirty"
              }
            },
            collectionsStatuses: undefined,
            [Symbol.for("name")]: "Invalid"
          };
  }
}

function useForm(initialInput, onSubmit) {
  var memoizedInitialState = React.useMemo((function () {
          return initialState(initialInput);
        }), [initialInput]);
  var match = Formality__ReactUpdate.useReducer(memoizedInitialState, (function (state, action) {
          if (typeof action === "number") {
            switch (action) {
              case /* BlurAmountField */0 :
                  var result = Formality.validateFieldOnBlurWithValidator(state.input, state.fieldsStatuses.amount, validators.amount, (function (status) {
                          return {
                                  amount: status
                                };
                        }));
                  if (result !== undefined) {
                    return {
                            TAG: 0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: result,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: state.formStatus,
                              submissionStatus: state.submissionStatus
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  } else {
                    return /* NoUpdate */0;
                  }
              case /* Submit */1 :
                  var match = state.formStatus;
                  if (typeof match !== "number" && match.TAG === /* Submitting */0) {
                    return /* NoUpdate */0;
                  }
                  var match$1 = validateForm(state.input, validators, state.fieldsStatuses);
                  if (match$1.TAG !== /* Valid */0) {
                    return {
                            TAG: 0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: match$1.fieldsStatuses,
                              collectionsStatuses: match$1.collectionsStatuses,
                              formStatus: /* Editing */0,
                              submissionStatus: /* AttemptedToSubmit */1
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  }
                  var output = match$1.output;
                  var error = state.formStatus;
                  var tmp;
                  tmp = typeof error === "number" || error.TAG !== /* SubmissionFailed */1 ? undefined : Caml_option.some(error._0);
                  return {
                          TAG: 1,
                          _0: {
                            input: state.input,
                            fieldsStatuses: match$1.fieldsStatuses,
                            collectionsStatuses: match$1.collectionsStatuses,
                            formStatus: {
                              TAG: 0,
                              _0: tmp,
                              [Symbol.for("name")]: "Submitting"
                            },
                            submissionStatus: /* AttemptedToSubmit */1
                          },
                          _1: (function (param) {
                              var dispatch = param.dispatch;
                              return Curry._2(onSubmit, output, {
                                          notifyOnSuccess: (function (input) {
                                              return Curry._1(dispatch, {
                                                          TAG: 1,
                                                          _0: input,
                                                          [Symbol.for("name")]: "SetSubmittedStatus"
                                                        });
                                            }),
                                          notifyOnFailure: (function (error) {
                                              return Curry._1(dispatch, {
                                                          TAG: 2,
                                                          _0: error,
                                                          [Symbol.for("name")]: "SetSubmissionFailedStatus"
                                                        });
                                            }),
                                          reset: (function (param) {
                                              return Curry._1(dispatch, /* Reset */4);
                                            }),
                                          dismissSubmissionResult: (function (param) {
                                              return Curry._1(dispatch, /* DismissSubmissionResult */3);
                                            })
                                        });
                            }),
                          [Symbol.for("name")]: "UpdateWithSideEffects"
                        };
                  break;
              case /* DismissSubmissionError */2 :
                  var match$2 = state.formStatus;
                  if (typeof match$2 === "number" || match$2.TAG !== /* SubmissionFailed */1) {
                    return /* NoUpdate */0;
                  } else {
                    return {
                            TAG: 0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: state.fieldsStatuses,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: /* Editing */0,
                              submissionStatus: state.submissionStatus
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  }
              case /* DismissSubmissionResult */3 :
                  var match$3 = state.formStatus;
                  if (typeof match$3 === "number") {
                    if (match$3 === /* Editing */0) {
                      return /* NoUpdate */0;
                    }
                    
                  } else if (match$3.TAG === /* Submitting */0) {
                    return /* NoUpdate */0;
                  }
                  return {
                          TAG: 0,
                          _0: {
                            input: state.input,
                            fieldsStatuses: state.fieldsStatuses,
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: /* Editing */0,
                            submissionStatus: state.submissionStatus
                          },
                          [Symbol.for("name")]: "Update"
                        };
              case /* Reset */4 :
                  return {
                          TAG: 0,
                          _0: initialState(initialInput),
                          [Symbol.for("name")]: "Update"
                        };
              
            }
          } else {
            switch (action.TAG | 0) {
              case /* UpdateAmountField */0 :
                  var nextInput = Curry._1(action._0, state.input);
                  return {
                          TAG: 0,
                          _0: {
                            input: nextInput,
                            fieldsStatuses: Formality.validateFieldOnChangeWithValidator(nextInput, state.fieldsStatuses.amount, state.submissionStatus, validators.amount, (function (status) {
                                    return {
                                            amount: status
                                          };
                                  })),
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: state.formStatus,
                            submissionStatus: state.submissionStatus
                          },
                          [Symbol.for("name")]: "Update"
                        };
              case /* SetSubmittedStatus */1 :
                  var input = action._0;
                  if (input !== undefined) {
                    return {
                            TAG: 0,
                            _0: {
                              input: input,
                              fieldsStatuses: {
                                amount: /* Pristine */0
                              },
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: /* Submitted */1,
                              submissionStatus: state.submissionStatus
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  } else {
                    return {
                            TAG: 0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: {
                                amount: /* Pristine */0
                              },
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: /* Submitted */1,
                              submissionStatus: state.submissionStatus
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  }
              case /* SetSubmissionFailedStatus */2 :
                  return {
                          TAG: 0,
                          _0: {
                            input: state.input,
                            fieldsStatuses: state.fieldsStatuses,
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: {
                              TAG: 1,
                              _0: action._0,
                              [Symbol.for("name")]: "SubmissionFailed"
                            },
                            submissionStatus: state.submissionStatus
                          },
                          [Symbol.for("name")]: "Update"
                        };
              case /* MapSubmissionError */3 :
                  var map = action._0;
                  var error$1 = state.formStatus;
                  if (typeof error$1 === "number") {
                    return /* NoUpdate */0;
                  }
                  if (error$1.TAG !== /* Submitting */0) {
                    return {
                            TAG: 0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: state.fieldsStatuses,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: {
                                TAG: 1,
                                _0: Curry._1(map, error$1._0),
                                [Symbol.for("name")]: "SubmissionFailed"
                              },
                              submissionStatus: state.submissionStatus
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  }
                  var error$2 = error$1._0;
                  if (error$2 !== undefined) {
                    return {
                            TAG: 0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: state.fieldsStatuses,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: {
                                TAG: 0,
                                _0: Caml_option.some(Curry._1(map, Caml_option.valFromOption(error$2))),
                                [Symbol.for("name")]: "Submitting"
                              },
                              submissionStatus: state.submissionStatus
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  } else {
                    return /* NoUpdate */0;
                  }
              
            }
          }
        }));
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state.formStatus;
  var tmp;
  tmp = typeof match$1 === "number" || match$1.TAG !== /* Submitting */0 ? false : true;
  return {
          updateAmount: (function (nextInputFn, nextValue) {
              return Curry._1(dispatch, {
                          TAG: 0,
                          _0: (function (__x) {
                              return Curry._2(nextInputFn, __x, nextValue);
                            }),
                          [Symbol.for("name")]: "UpdateAmountField"
                        });
            }),
          blurAmount: (function (param) {
              return Curry._1(dispatch, /* BlurAmountField */0);
            }),
          amountResult: Formality.exposeFieldResult(state.fieldsStatuses.amount),
          input: state.input,
          status: state.formStatus,
          dirty: (function (param) {
              var match = state.fieldsStatuses;
              if (match.amount) {
                return true;
              } else {
                return false;
              }
            }),
          valid: (function (param) {
              var match = validateForm(state.input, validators, state.fieldsStatuses);
              if (match.TAG === /* Valid */0) {
                return true;
              } else {
                return false;
              }
            }),
          submitting: tmp,
          submit: (function (param) {
              return Curry._1(dispatch, /* Submit */1);
            }),
          dismissSubmissionError: (function (param) {
              return Curry._1(dispatch, /* DismissSubmissionError */2);
            }),
          dismissSubmissionResult: (function (param) {
              return Curry._1(dispatch, /* DismissSubmissionResult */3);
            }),
          mapSubmissionError: (function (map) {
              return Curry._1(dispatch, {
                          TAG: 3,
                          _0: map,
                          [Symbol.for("name")]: "MapSubmissionError"
                        });
            }),
          reset: (function (param) {
              return Curry._1(dispatch, /* Reset */4);
            })
        };
}

var RedeemForm = {
  validators: validators,
  initialFieldsStatuses: initialFieldsStatuses,
  initialCollectionsStatuses: undefined,
  initialState: initialState,
  validateForm: validateForm,
  useForm: useForm
};

function useBalance(erc20Address) {
  return ContractHooks.useErc20BalanceRefresh(erc20Address).data;
}

function RedeemForm$RedeemFormInput(Props) {
  var onSubmitOpt = Props.onSubmit;
  var valueOpt = Props.value;
  var optBalanceOpt = Props.optBalance;
  var disabledOpt = Props.disabled;
  var onChangeOpt = Props.onChange;
  var onBlurOpt = Props.onBlur;
  var onMaxClickOpt = Props.onMaxClick;
  var onChangeSideOpt = Props.onChangeSide;
  var isLongOpt = Props.isLong;
  var hasBothTokensOpt = Props.hasBothTokens;
  var market = Props.market;
  var onSubmit = onSubmitOpt !== undefined ? onSubmitOpt : (function (param) {
        
      });
  var value = valueOpt !== undefined ? valueOpt : "";
  var optBalance = optBalanceOpt !== undefined ? Caml_option.valFromOption(optBalanceOpt) : undefined;
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var onChange = onChangeOpt !== undefined ? onChangeOpt : (function (param) {
        
      });
  var onBlur = onBlurOpt !== undefined ? onBlurOpt : (function (param) {
        
      });
  var onMaxClick = onMaxClickOpt !== undefined ? onMaxClickOpt : (function (param) {
        
      });
  var onChangeSide = onChangeSideOpt !== undefined ? onChangeSideOpt : (function (param) {
        
      });
  var isLong = isLongOpt !== undefined ? isLongOpt : false;
  var hasBothTokens = hasBothTokensOpt !== undefined ? hasBothTokensOpt : false;
  var tokenType = isLong ? "long" : "short";
  return React.createElement(Form.make, {
              className: "",
              onSubmit: onSubmit,
              children: null
            }, hasBothTokens ? React.createElement("select", {
                    className: "trade-select",
                    disabled: disabled,
                    name: "longshort",
                    value: isLong ? "long" : "short",
                    onChange: onChangeSide
                  }, React.createElement("option", {
                        value: "long"
                      }, "Long 🐮"), React.createElement("option", {
                        value: "short"
                      }, "Short 🐻")) : null, React.createElement(AmountInput.make, {
                  placeholder: "Redeem",
                  value: value,
                  optBalance: optBalance,
                  disabled: disabled,
                  onBlur: onBlur,
                  onChange: onChange,
                  onMaxClick: onMaxClick
                }), React.createElement(Button.make, {
                  onClick: (function (param) {
                      return Curry._1(onSubmit, undefined);
                    }),
                  children: "Redeem " + tokenType + " " + market.name
                }));
}

var RedeemFormInput = {
  make: RedeemForm$RedeemFormInput
};

function tokenRedeemPosition(market, isLong, longTokenBalance, shortTokenBalance) {
  var hasLongTokens = longTokenBalance.gt(CONSTANTS.zeroBN);
  var hasShortTokens = shortTokenBalance.gt(CONSTANTS.zeroBN);
  var hasTokens = hasShortTokens || hasLongTokens;
  var hasBothTokens = hasShortTokens && hasLongTokens;
  var isLongAndHasLongTokens = isLong && hasLongTokens;
  var isActuallyLong = hasBothTokens ? isLong : !isLongAndHasLongTokens;
  var syntheticTokenAddress = hasBothTokens ? (
      isLong ? market.syntheticLong.tokenAddress : market.syntheticShort.tokenAddress
    ) : (
      isLongAndHasLongTokens ? market.syntheticShort.tokenAddress : market.syntheticLong.tokenAddress
    );
  return [
          isActuallyLong,
          syntheticTokenAddress,
          hasTokens,
          hasBothTokens
        ];
}

function isGreaterThanApproval(amount, amountApproved) {
  return amount.gt(amountApproved);
}

function isGreaterThanBalance(amount, balance) {
  return amount.gt(balance);
}

function useBalanceAndApproved(erc20Address, spender) {
  var match = ContractHooks.useErc20BalanceRefresh(erc20Address);
  var match$1 = ContractHooks.useERC20ApprovedRefresh(erc20Address, spender);
  return [
          match.data,
          match$1.data
        ];
}

function RedeemForm$ConnectedRedeemForm(Props) {
  var signer = Props.signer;
  var market = Props.market;
  var isLong = Props.isLong;
  var router = Router.useRouter();
  var user = RootProvider.useCurrentUserExn(undefined);
  var longTokenBalance = Belt_Option.getWithDefault(DataHooks.Util.graphResponseToOption(DataHooks.useSyntheticTokenBalance(user, market.syntheticLong.tokenAddress)), Ethers$1.BigNumber.from("0"));
  var shortTokenBalance = Belt_Option.getWithDefault(DataHooks.Util.graphResponseToOption(DataHooks.useSyntheticTokenBalance(user, market.syntheticShort.tokenAddress)), Ethers$1.BigNumber.from("0"));
  var match = tokenRedeemPosition(market, isLong, longTokenBalance, shortTokenBalance);
  var syntheticTokenAddress = match[1];
  var isActuallyLong = match[0];
  console.log("isActuallyLong");
  console.log(isActuallyLong);
  var match$1 = ContractActions.useContractFunction(signer);
  var txState = match$1[1];
  var contractExecutionHandler = match$1[0];
  var match$2 = ContractActions.useContractFunction(signer);
  var setTxStateApprove = match$2[2];
  var txStateApprove = match$2[1];
  var contractExecutionHandlerApprove = match$2[0];
  var match$3 = React.useState(function () {
        return function (param) {
          
        };
      });
  var setContractActionToCallAfterApproval = match$3[1];
  var contractActionToCallAfterApproval = match$3[0];
  var longShortAddres = Config.useLongShortAddress(undefined);
  var marketIndex = market.marketIndex;
  var match$4 = useBalanceAndApproved(syntheticTokenAddress, longShortAddres);
  var optTokenAmountApproved = match$4[1];
  var optTokenBalance = match$4[0];
  var form = useForm({
        amount: ""
      }, (function (param, _form) {
          var amount = param.amount;
          var redeemFunction = function (param) {
            return Curry._2(contractExecutionHandler, (function (param) {
                          return Contracts.LongShort.make(longShortAddres, param);
                        }), isActuallyLong ? (function (param) {
                            return param.redeemLong(marketIndex, amount);
                          }) : (function (param) {
                            return param.redeemShort(marketIndex, amount);
                          }));
          };
          var needsToApprove = amount.gt(Belt_Option.getWithDefault(optTokenAmountApproved, Ethers$1.BigNumber.from("0")));
          if (needsToApprove) {
            Curry._1(setContractActionToCallAfterApproval, (function (param) {
                    return redeemFunction;
                  }));
            var arg = amount.mul(Ethers$1.BigNumber.from("2"));
            return Curry._2(contractExecutionHandlerApprove, (function (param) {
                          return Contracts.Erc20.make(syntheticTokenAddress, param);
                        }), (function (param) {
                          return param.approve(longShortAddres, arg);
                        }));
          } else {
            return redeemFunction(undefined);
          }
        }));
  var toastDispatch = React.useContext(ToastProvider.DispatchToastContext.context);
  var optCurrentUser = RootProvider.useCurrentUser(undefined);
  var userPage = optCurrentUser !== undefined ? "/user/" + Ethers.Utils.ethAdrToLowerStr(Caml_option.valFromOption(optCurrentUser)) : "/";
  React.useEffect((function () {
          if (typeof txStateApprove === "number") {
            switch (txStateApprove) {
              case /* UnInitialised */0 :
                  break;
              case /* Created */1 :
                  Curry._1(toastDispatch, {
                        _0: "Please approve your " + Config.paymentTokenName + " token",
                        _1: "",
                        _2: /* Info */2,
                        [Symbol.for("name")]: "Show"
                      });
                  break;
              case /* Failed */2 :
                  Curry._1(toastDispatch, {
                        _0: "The transaction failed",
                        _1: "",
                        _2: /* Error */0,
                        [Symbol.for("name")]: "Show"
                      });
                  break;
              
            }
          } else {
            switch (txStateApprove.TAG | 0) {
              case /* SignedAndSubmitted */0 :
                  Curry._1(toastDispatch, {
                        _0: "Approval transaction processing",
                        _1: "",
                        _2: /* Info */2,
                        [Symbol.for("name")]: "Show"
                      });
                  break;
              case /* Declined */1 :
                  Curry._1(toastDispatch, {
                        _0: "The transaction was rejected by your wallet",
                        _1: txStateApprove._0,
                        _2: /* Error */0,
                        [Symbol.for("name")]: "Show"
                      });
                  break;
              case /* Complete */2 :
                  Curry._1(contractActionToCallAfterApproval, undefined);
                  Curry._1(setTxStateApprove, (function (param) {
                          return /* UnInitialised */0;
                        }));
                  Curry._1(toastDispatch, {
                        _0: "Approve transaction confirmed",
                        _1: "",
                        _2: /* Success */3,
                        [Symbol.for("name")]: "Show"
                      });
                  break;
              
            }
          }
          
        }), [txStateApprove]);
  React.useEffect((function () {
          if (typeof txState === "number") {
            switch (txState) {
              case /* UnInitialised */0 :
                  break;
              case /* Created */1 :
                  Curry._1(toastDispatch, {
                        _0: "Confirm the transaction to redeem tokens",
                        _1: "",
                        _2: /* Info */2,
                        [Symbol.for("name")]: "Show"
                      });
                  break;
              case /* Failed */2 :
                  Curry._1(toastDispatch, {
                        _0: "The transaction failed",
                        _1: "",
                        _2: /* Error */0,
                        [Symbol.for("name")]: "Show"
                      });
                  break;
              
            }
          } else {
            switch (txState.TAG | 0) {
              case /* SignedAndSubmitted */0 :
                  Curry._1(toastDispatch, {
                        _0: "Redeem transaction pending",
                        _1: "",
                        _2: /* Info */2,
                        [Symbol.for("name")]: "Show"
                      });
                  break;
              case /* Declined */1 :
                  Curry._1(toastDispatch, {
                        _0: "The transaction was rejected by your wallet",
                        _1: txState._0,
                        _2: /* Warning */1,
                        [Symbol.for("name")]: "Show"
                      });
                  break;
              case /* Complete */2 :
                  Curry._1(toastDispatch, {
                        _0: "Redeem transaction confirmed",
                        _1: "",
                        _2: /* Success */3,
                        [Symbol.for("name")]: "Show"
                      });
                  router.push(userPage);
                  break;
              
            }
          }
          
        }), [txState]);
  if (match[2]) {
    return React.createElement(RedeemForm$RedeemFormInput, {
                onSubmit: form.submit,
                value: form.input.amount,
                optBalance: optTokenBalance,
                disabled: form.submitting,
                onChange: (function ($$event) {
                    return Curry._2(form.updateAmount, (function (param, amount) {
                                  return {
                                          amount: amount
                                        };
                                }), $$event.target.value);
                  }),
                onBlur: (function (param) {
                    return Curry._1(form.blurAmount, undefined);
                  }),
                onMaxClick: (function (param) {
                    return Curry._2(form.updateAmount, (function (param, amount) {
                                  return {
                                          amount: amount
                                        };
                                }), optTokenBalance !== undefined ? Ethers.Utils.formatEther(Caml_option.valFromOption(optTokenBalance)) : "0");
                  }),
                onChangeSide: (function ($$event) {
                    router.query["mintOption"] = $$event.target.value;
                    router.query["token"] = isActuallyLong ? Ethers.Utils.ethAdrToLowerStr(market.syntheticLong.tokenAddress) : Ethers.Utils.ethAdrToLowerStr(market.syntheticShort.tokenAddress);
                    return Next.Router.pushObjShallow(router, {
                                pathname: router.pathname,
                                query: router.query
                              });
                  }),
                isLong: isActuallyLong,
                hasBothTokens: match[3],
                market: market
              });
  } else {
    return React.createElement("p", undefined, "No tokens in this market to redeem");
  }
}

var ConnectedRedeemForm = {
  make: RedeemForm$ConnectedRedeemForm
};

function RedeemForm$1(Props) {
  var market = Props.market;
  var isLong = Props.isLong;
  var optSigner = ContractActions.useSigner(undefined);
  var router = Router.useRouter();
  if (optSigner !== undefined) {
    return React.createElement(RedeemForm$ConnectedRedeemForm, {
                signer: optSigner,
                market: market,
                isLong: isLong
              });
  } else {
    return React.createElement("div", {
                onClick: (function (param) {
                    router.push("/login?nextPath=" + router.asPath);
                    
                  })
              }, React.createElement(RedeemForm$RedeemFormInput, {
                    isLong: isLong,
                    hasBothTokens: false,
                    market: market
                  }));
  }
}

var make = RedeemForm$1;

export {
  RedeemForm ,
  useBalance ,
  RedeemFormInput ,
  tokenRedeemPosition ,
  isGreaterThanApproval ,
  isGreaterThanBalance ,
  useBalanceAndApproved ,
  ConnectedRedeemForm ,
  make ,
  
}
/* Form Not a pure module */
