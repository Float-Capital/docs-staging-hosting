// Generated by ReScript, PLEASE EDIT WITH CARE

import Swr from "swr";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Config from "../../../Config.js";
import * as Contracts from "../../../ethereum/Contracts.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as RootProvider from "../../../libraries/RootProvider.js";
import * as ContractActions from "../../../ethereum/ContractActions.js";
import * as StateChangeMonitor from "../../../libraries/StateChangeMonitor.js";

function useErc20Balance(erc20Address) {
  var optChainId = RootProvider.useChainId(undefined);
  var optUserId = RootProvider.useCurrentUser(undefined);
  var optProviderOrSigner = ContractActions.useProviderOrSigner(undefined);
  var fetchBalanceFunction = function (param, param$1, param$2, userId) {
    var providerOrSigner = Belt_Option.getExn(optProviderOrSigner);
    return Contracts.Erc20.make(erc20Address, providerOrSigner).balanceOf(userId);
  };
  return Swr((function (param) {
                if (optChainId !== undefined && optProviderOrSigner !== undefined && optUserId !== undefined) {
                  return [
                          "erc20balance",
                          erc20Address,
                          optChainId,
                          Caml_option.valFromOption(optUserId)
                        ];
                }
                
              }), fetchBalanceFunction, undefined);
}

function useERC20Approved(erc20Address, spender) {
  var optChainId = RootProvider.useChainId(undefined);
  var optUserId = RootProvider.useCurrentUser(undefined);
  var optProviderOrSigner = ContractActions.useProviderOrSigner(undefined);
  var fetchBalanceFunction = function (param, param$1, param$2, param$3, userId) {
    var providerOrSigner = Belt_Option.getExn(optProviderOrSigner);
    return Contracts.Erc20.make(erc20Address, providerOrSigner).allowance(userId, spender);
  };
  return Swr((function (param) {
                if (optChainId !== undefined && optProviderOrSigner !== undefined && optUserId !== undefined) {
                  return [
                          "allowance",
                          erc20Address,
                          spender,
                          optChainId,
                          Caml_option.valFromOption(optUserId)
                        ];
                }
                
              }), fetchBalanceFunction, undefined);
}

function useSwrAutoUpdate(useHook) {
  var result = Curry._1(useHook, undefined);
  var dataFreshnessString = StateChangeMonitor.useDataFreshnessString(undefined);
  React.useEffect((function () {
          Curry._1(result.revalidate, undefined);
          
        }), [dataFreshnessString]);
  return result;
}

function useErc20BalanceRefresh(erc20Address) {
  return useSwrAutoUpdate(function (param) {
              return useErc20Balance(erc20Address);
            });
}

function useDaiBalanceRefresh(param) {
  Belt_Option.getWithDefault(RootProvider.useChainId(undefined), Config.networkId);
  return useSwrAutoUpdate(function (param) {
              return useErc20Balance(Config.dai);
            });
}

function useERC20ApprovedRefresh(erc20Address, spender) {
  return useSwrAutoUpdate(function (param) {
              return useERC20Approved(erc20Address, spender);
            });
}

export {
  useErc20Balance ,
  useERC20Approved ,
  useSwrAutoUpdate ,
  useErc20BalanceRefresh ,
  useDaiBalanceRefresh ,
  useERC20ApprovedRefresh ,
  
}
/* swr Not a pure module */
