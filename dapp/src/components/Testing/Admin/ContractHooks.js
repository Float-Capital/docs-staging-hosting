// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Swr = require("swr").default;
var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Config = require("../../../config/Config.js");
var Contracts = require("../../../ethereum/Contracts.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var RootProvider = require("../../../libraries/RootProvider.js");
var ContractActions = require("../../../ethereum/ContractActions.js");
var StateChangeMonitor = require("../../../libraries/StateChangeMonitor.js");

function useErc20Balance(erc20Address) {
  var optChainId = RootProvider.useChainId(undefined);
  var optUserId = RootProvider.useCurrentUser(undefined);
  var optProviderOrSigner = ContractActions.useProviderOrSigner(undefined);
  var fetchBalanceFunction = function (param, param$1, param$2, userId) {
    var providerOrSigner = Belt_Option.getExn(optProviderOrSigner);
    return Contracts.Erc20.make(erc20Address, providerOrSigner).balanceOf(userId);
  };
  return Swr((function (param) {
                if (optChainId !== undefined && optProviderOrSigner !== undefined && optUserId !== undefined) {
                  return [
                          "erc20balance",
                          erc20Address,
                          optChainId,
                          Caml_option.valFromOption(optUserId)
                        ];
                }
                
              }), fetchBalanceFunction, undefined);
}

function useERC20Approved(erc20Address, spender) {
  var optChainId = RootProvider.useChainId(undefined);
  var optUserId = RootProvider.useCurrentUser(undefined);
  var optProviderOrSigner = ContractActions.useProviderOrSigner(undefined);
  var fetchBalanceFunction = function (param, param$1, param$2, param$3, userId) {
    var providerOrSigner = Belt_Option.getExn(optProviderOrSigner);
    return Contracts.Erc20.make(erc20Address, providerOrSigner).allowance(userId, spender);
  };
  return Swr((function (param) {
                if (optChainId !== undefined && optProviderOrSigner !== undefined && optUserId !== undefined) {
                  return [
                          "allowance",
                          erc20Address,
                          spender,
                          optChainId,
                          Caml_option.valFromOption(optUserId)
                        ];
                }
                
              }), fetchBalanceFunction, undefined);
}

function useSwrAutoUpdate(useHook) {
  var result = Curry._1(useHook, undefined);
  var dataFreshnessString = StateChangeMonitor.useDataFreshnessString(undefined);
  React.useEffect((function () {
          Curry._1(result.revalidate, undefined);
          
        }), [dataFreshnessString]);
  return result;
}

function useErc20BalanceRefresh(erc20Address) {
  return useSwrAutoUpdate(function (param) {
              return useErc20Balance(erc20Address);
            });
}

function useDaiBalanceRefresh(param) {
  return useSwrAutoUpdate(function (param) {
              return useErc20Balance(Config.dai);
            });
}

function useERC20ApprovedRefresh(erc20Address, spender) {
  return useSwrAutoUpdate(function (param) {
              return useERC20Approved(erc20Address, spender);
            });
}

exports.useErc20Balance = useErc20Balance;
exports.useERC20Approved = useERC20Approved;
exports.useSwrAutoUpdate = useSwrAutoUpdate;
exports.useErc20BalanceRefresh = useErc20BalanceRefresh;
exports.useDaiBalanceRefresh = useDaiBalanceRefresh;
exports.useERC20ApprovedRefresh = useERC20ApprovedRefresh;
/* swr Not a pure module */
