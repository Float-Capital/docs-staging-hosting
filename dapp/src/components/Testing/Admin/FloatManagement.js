// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Misc from "../../../libraries/Misc.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Config from "../../../Config.js";
import * as Globals from "../../../libraries/Globals.js";
import * as Queries from "../../../data/Queries.js";
import * as CONSTANTS from "../../../CONSTANTS.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as FormatMoney from "../../UI/FormatMoney.js";
import * as RootProvider from "../../../libraries/RootProvider.js";
import * as AddToMetamask from "../../UI/AddToMetamask.js";
import * as GqlConverters from "../../../libraries/GqlConverters.js";
import * as ApolloClient__React_Hooks_UseQuery from "rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  fragment LongSynth on SyntheticToken   {
    __typename
    floatMintedLong: floatMintedFromSpecificToken
    longAddress: tokenAddress
  }
`);

function parse(value) {
  return {
          __typename: value.__typename,
          floatMintedLong: GqlConverters.$$BigInt.parse(value.floatMintedLong),
          longAddress: GqlConverters.Address.parse(value.longAddress)
        };
}

function serialize(value) {
  var value$1 = value.longAddress;
  var value$2 = GqlConverters.Address.serialize(value$1);
  var value$3 = value.floatMintedLong;
  var value$4 = GqlConverters.$$BigInt.serialize(value$3);
  var value$5 = value.__typename;
  return {
          __typename: value$5,
          floatMintedLong: value$4,
          longAddress: value$2
        };
}

function verifyArgsAndParse(_LongSynth, value) {
  return parse(value);
}

function verifyName(param) {
  
}

var LongSynth = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  verifyArgsAndParse: verifyArgsAndParse,
  verifyName: verifyName
};

var Raw$1 = {};

var query$1 = (require("@apollo/client").gql`
  fragment ShortSynth on SyntheticToken   {
    __typename
    floatMintedShort: floatMintedFromSpecificToken
    shortAddress: tokenAddress
  }
`);

function parse$1(value) {
  return {
          __typename: value.__typename,
          floatMintedShort: GqlConverters.$$BigInt.parse(value.floatMintedShort),
          shortAddress: GqlConverters.Address.parse(value.shortAddress)
        };
}

function serialize$1(value) {
  var value$1 = value.shortAddress;
  var value$2 = GqlConverters.Address.serialize(value$1);
  var value$3 = value.floatMintedShort;
  var value$4 = GqlConverters.$$BigInt.serialize(value$3);
  var value$5 = value.__typename;
  return {
          __typename: value$5,
          floatMintedShort: value$4,
          shortAddress: value$2
        };
}

function verifyArgsAndParse$1(_ShortSynth, value) {
  return parse$1(value);
}

function verifyName$1(param) {
  
}

var ShortSynth = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  verifyArgsAndParse: verifyArgsAndParse$1,
  verifyName: verifyName$1
};

var Raw$2 = {};

var query$2 = ((frag_0, frag_1) => require("@apollo/client").gql`
  query   {
    syntheticMarkets  {
      __typename
      name
      symbol
      syntheticLong  {
        ...LongSynth
      }
      syntheticShort  {
        ...ShortSynth
      }
    }
  }
  ${frag_0}
  ${frag_1}
`)(query, query$1);

function parse$2(value) {
  var value$1 = value.syntheticMarkets;
  return {
          syntheticMarkets: value$1.map(function (value) {
                return {
                        __typename: value.__typename,
                        name: value.name,
                        symbol: value.symbol,
                        syntheticLong: parse(value.syntheticLong),
                        syntheticShort: parse$1(value.syntheticShort)
                      };
              })
        };
}

function serialize$2(value) {
  var value$1 = value.syntheticMarkets;
  var syntheticMarkets = value$1.map(function (value) {
        var value$1 = value.syntheticShort;
        var syntheticShort = serialize$1(value$1);
        var value$2 = value.syntheticLong;
        var syntheticLong = serialize(value$2);
        var value$3 = value.symbol;
        var value$4 = value.name;
        var value$5 = value.__typename;
        return {
                __typename: value$5,
                name: value$4,
                symbol: value$3,
                syntheticLong: syntheticLong,
                syntheticShort: syntheticShort
              };
      });
  return {
          syntheticMarkets: syntheticMarkets
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var FloatBreakdown_inner = {
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$2,
      Raw: Raw$2,
      parse: parse$2,
      serialize: serialize$2,
      serializeVariables: serializeVariables
    });

var use = include.use;

var FloatBreakdown_refetchQueryDescription = include.refetchQueryDescription;

var FloatBreakdown_useLazy = include.useLazy;

var FloatBreakdown_useLazyWithVariables = include.useLazyWithVariables;

var FloatBreakdown = {
  FloatBreakdown_inner: FloatBreakdown_inner,
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: FloatBreakdown_refetchQueryDescription,
  use: use,
  useLazy: FloatBreakdown_useLazy,
  useLazyWithVariables: FloatBreakdown_useLazyWithVariables
};

var Raw$3 = {};

var query$3 = (require("@apollo/client").gql`
  query ($synthToken: String!, $userAddress: String!)  {
    currentStakes(where: {userAddress: $userAddress, syntheticToken: $synthToken})  {
      __typename
      lastMintState  {
        __typename
        timestamp
        accumulativeFloatPerSecond
      }
      currentStake  {
        __typename
        amount
      }
    }
    states(first: 1, orderBy: stateIndex, orderDirection: desc, where: {syntheticToken: $synthToken, timeSinceLastUpdate_gt: 0})  {
      __typename
      stateIndex
      accumulativeFloatPerSecond
      floatRatePerSecondOverInterval
    }
  }
`);

function parse$3(value) {
  var value$1 = value.currentStakes;
  var value$2 = value.states;
  return {
          currentStakes: value$1.map(function (value) {
                var value$1 = value.lastMintState;
                var value$2 = value.currentStake;
                return {
                        __typename: value.__typename,
                        lastMintState: {
                          __typename: value$1.__typename,
                          timestamp: GqlConverters.$$BigInt.parse(value$1.timestamp),
                          accumulativeFloatPerSecond: GqlConverters.$$BigInt.parse(value$1.accumulativeFloatPerSecond)
                        },
                        currentStake: {
                          __typename: value$2.__typename,
                          amount: GqlConverters.$$BigInt.parse(value$2.amount)
                        }
                      };
              }),
          states: value$2.map(function (value) {
                return {
                        __typename: value.__typename,
                        stateIndex: GqlConverters.$$BigInt.parse(value.stateIndex),
                        accumulativeFloatPerSecond: GqlConverters.$$BigInt.parse(value.accumulativeFloatPerSecond),
                        floatRatePerSecondOverInterval: GqlConverters.$$BigInt.parse(value.floatRatePerSecondOverInterval)
                      };
              })
        };
}

function serialize$3(value) {
  var value$1 = value.states;
  var states = value$1.map(function (value) {
        var value$1 = value.floatRatePerSecondOverInterval;
        var value$2 = GqlConverters.$$BigInt.serialize(value$1);
        var value$3 = value.accumulativeFloatPerSecond;
        var value$4 = GqlConverters.$$BigInt.serialize(value$3);
        var value$5 = value.stateIndex;
        var value$6 = GqlConverters.$$BigInt.serialize(value$5);
        var value$7 = value.__typename;
        return {
                __typename: value$7,
                stateIndex: value$6,
                accumulativeFloatPerSecond: value$4,
                floatRatePerSecondOverInterval: value$2
              };
      });
  var value$2 = value.currentStakes;
  var currentStakes = value$2.map(function (value) {
        var value$1 = value.currentStake;
        var value$2 = value$1.amount;
        var value$3 = GqlConverters.$$BigInt.serialize(value$2);
        var value$4 = value$1.__typename;
        var currentStake = {
          __typename: value$4,
          amount: value$3
        };
        var value$5 = value.lastMintState;
        var value$6 = value$5.accumulativeFloatPerSecond;
        var value$7 = GqlConverters.$$BigInt.serialize(value$6);
        var value$8 = value$5.timestamp;
        var value$9 = GqlConverters.$$BigInt.serialize(value$8);
        var value$10 = value$5.__typename;
        var lastMintState = {
          __typename: value$10,
          timestamp: value$9,
          accumulativeFloatPerSecond: value$7
        };
        var value$11 = value.__typename;
        return {
                __typename: value$11,
                lastMintState: lastMintState,
                currentStake: currentStake
              };
      });
  return {
          currentStakes: currentStakes,
          states: states
        };
}

function serializeVariables$1(inp) {
  return {
          synthToken: inp.synthToken,
          userAddress: inp.userAddress
        };
}

function makeVariables$1(synthToken, userAddress, param) {
  return {
          synthToken: synthToken,
          userAddress: userAddress
        };
}

var LastUserStakeUpdate_inner = {
  Raw: Raw$3,
  query: query$3,
  parse: parse$3,
  serialize: serialize$3,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1
};

var include$1 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$3,
      Raw: Raw$3,
      parse: parse$3,
      serialize: serialize$3,
      serializeVariables: serializeVariables$1
    });

var use$1 = include$1.use;

var LastUserStakeUpdate_refetchQueryDescription = include$1.refetchQueryDescription;

var LastUserStakeUpdate_useLazy = include$1.useLazy;

var LastUserStakeUpdate_useLazyWithVariables = include$1.useLazyWithVariables;

var LastUserStakeUpdate = {
  LastUserStakeUpdate_inner: LastUserStakeUpdate_inner,
  Raw: Raw$3,
  query: query$3,
  parse: parse$3,
  serialize: serialize$3,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  refetchQueryDescription: LastUserStakeUpdate_refetchQueryDescription,
  use: use$1,
  useLazy: LastUserStakeUpdate_useLazy,
  useLazyWithVariables: LastUserStakeUpdate_useLazyWithVariables
};

function FloatManagement$Claimable(Props) {
  var userAddress = Props.userAddress;
  var synthToken = Props.synthToken;
  var claimableQuery = Curry.app(use$1, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        {
          synthToken: synthToken,
          userAddress: userAddress
        }
      ]);
  var currentTimestamp = Misc.Time.useCurrentTimeBN(1000);
  var match = claimableQuery.data;
  if (match !== undefined) {
    var match$1 = match.currentStakes;
    if (match$1.length === 1) {
      var match$2 = match$1[0];
      var match$3 = match.states;
      if (match$3.length === 1) {
        var amount = match$2.currentStake.amount;
        var match$4 = match$2.lastMintState;
        var match$5 = match$3[0];
        var amountOfFloatToClaim = match$5.accumulativeFloatPerSecond.sub(match$4.accumulativeFloatPerSecond).mul(amount).div(CONSTANTS.tenToThe18);
        var predictedAmountOfFloatToClaim = currentTimestamp.sub(match$4.timestamp).mul(amount.mul(match$5.floatRatePerSecondOverInterval).div(CONSTANTS.tenToThe18));
        var totalAmountOfFloatToClaim = amountOfFloatToClaim.add(predictedAmountOfFloatToClaim);
        return React.createElement(React.Fragment, undefined, "You have generated " + FormatMoney.formatEther(totalAmountOfFloatToClaim) + " FLOAT since your last mint");
      }
      
    }
    
  }
  if (claimableQuery.error !== undefined) {
    return "Error loading users float data";
  } else {
    return "Loading stake due";
  }
}

var Claimable = {
  make: FloatManagement$Claimable
};

function FloatManagement(Props) {
  var user = RootProvider.useCurrentUserExn(undefined);
  var floatTokenAddress = Config.useFloatAddress(undefined);
  var userQuery = Curry.app(Queries.UsersState.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        {
          userId: Globals.ethAdrToLowerStr(user)
        }
      ]);
  var floatBreakdown = Curry.app(use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var match = userQuery.data;
  var tmp;
  if (match !== undefined) {
    var match$1 = match.user;
    tmp = match$1 !== undefined ? React.createElement(React.Fragment, undefined, "you have minted " + FormatMoney.formatEther(match$1.totalMintedFloat) + " FLOAT, and currently have a balance of " + FormatMoney.formatEther(match$1.floatTokenBalance), React.createElement(AddToMetamask.make, {
                tokenAddress: Globals.ethAdrToStr(floatTokenAddress),
                tokenSymbol: "FLOAT"
              })) : (
        userQuery.error !== undefined ? "Error loading users float data" : "Loading total minted by user"
      );
  } else {
    tmp = userQuery.error !== undefined ? "Error loading users float data" : "Loading total minted by user";
  }
  var match$2 = floatBreakdown.data;
  return React.createElement("div", undefined, tmp, React.createElement("hr", undefined), React.createElement("hr", undefined), match$2 !== undefined ? Belt_Array.map(match$2.syntheticMarkets, (function (param) {
                      var match = param.syntheticShort;
                      var floatMintedShort = match.floatMintedShort;
                      var match$1 = param.syntheticLong;
                      var floatMintedLong = match$1.floatMintedLong;
                      return React.createElement("div", undefined, param.name + " (" + param.symbol + ") float minted:", React.createElement("br", undefined), "-from LONG side: " + FormatMoney.formatEther(floatMintedLong), React.createElement("br", undefined), "-from SHORT side: " + FormatMoney.formatEther(floatMintedShort), React.createElement("br", undefined), floatMintedLong.gt(CONSTANTS.zeroBN) ? React.createElement(FloatManagement$Claimable, {
                                        userAddress: Globals.ethAdrToLowerStr(user),
                                        synthToken: Globals.ethAdrToLowerStr(match$1.longAddress)
                                      }) : null, React.createElement("br", undefined), floatMintedShort.gt(CONSTANTS.zeroBN) ? React.createElement(FloatManagement$Claimable, {
                                        userAddress: Globals.ethAdrToLowerStr(user),
                                        synthToken: Globals.ethAdrToLowerStr(match.shortAddress)
                                      }) : null, React.createElement("hr", undefined));
                    })) : (
                floatBreakdown.error !== undefined ? "Error" : "Loading total minted by user"
              ));
}

var make = FloatManagement;

export {
  LongSynth ,
  ShortSynth ,
  FloatBreakdown ,
  LastUserStakeUpdate ,
  Claimable ,
  make ,
  
}
/* query Not a pure module */
