// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cn from "re-classnames/src/Cn.js";
import * as Form from "../../Form.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Config from "../../../Config.js";
import * as Ethers from "../../../ethereum/Ethers.js";
import * as Ethers$1 from "ethers";
import * as Contracts from "../../../ethereum/Contracts.js";
import * as Formality from "re-formality/src/Formality.js";
import * as TxTemplate from "../../Ethereum/TxTemplate.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ContractHooks from "./ContractHooks.js";
import * as ContractActions from "../../../ethereum/ContractActions.js";
import * as Formality__ReactUpdate from "re-formality/src/Formality__ReactUpdate.js";

var validators_optBalance = {
  strategy: /* OnFirstBlur */0,
  validate: (function (param) {
      return {
              TAG: 0,
              _0: param.optBalance,
              [Symbol.for("name")]: "Ok"
            };
    })
};

var validators_amount = {
  strategy: /* OnFirstBlur */0,
  validate: (function (param) {
      var optBalance = param.optBalance;
      var amount = param.amount;
      var amountRegex = /^[+]?\d+(\.\d+)?$/;
      var value = amount.amount;
      var optAmountApproved = amount.optAmountApproved;
      if (value === "") {
        return {
                TAG: 1,
                _0: "Amount is required",
                [Symbol.for("name")]: "Error"
              };
      }
      if (!amountRegex.test(value)) {
        return {
                TAG: 1,
                _0: "Incorrect number format - please use '.' for floating points.",
                [Symbol.for("name")]: "Error"
              };
      }
      var checkRequiresApproval = function (amount) {
        if (optAmountApproved !== undefined && Caml_option.valFromOption(optAmountApproved).gte(amount)) {
          return false;
        } else {
          return true;
        }
      };
      return Belt_Option.mapWithDefault(Ethers.Utils.parseEther(value), {
                  TAG: 1,
                  _0: "Couldn't parse Ether value",
                  [Symbol.for("name")]: "Error"
                }, (function (etherValue) {
                    if (optBalance === undefined) {
                      return {
                              TAG: 0,
                              _0: {
                                requiresApproval: checkRequiresApproval(etherValue),
                                amount: etherValue
                              },
                              [Symbol.for("name")]: "Ok"
                            };
                    }
                    var balance = Caml_option.valFromOption(optBalance);
                    if (balance.gte(etherValue)) {
                      return {
                              TAG: 0,
                              _0: {
                                requiresApproval: checkRequiresApproval(etherValue),
                                amount: etherValue
                              },
                              [Symbol.for("name")]: "Ok"
                            };
                    } else {
                      return {
                              TAG: 1,
                              _0: "You cannot spend more than your balance of " + Ethers.Utils.formatEther(balance),
                              [Symbol.for("name")]: "Error"
                            };
                    }
                  }));
    })
};

var validators = {
  optBalance: validators_optBalance,
  amount: validators_amount
};

function initialFieldsStatuses(_input) {
  return {
          optBalance: /* Pristine */0,
          amount: /* Pristine */0
        };
}

function initialState(input) {
  return {
          input: input,
          fieldsStatuses: {
            optBalance: /* Pristine */0,
            amount: /* Pristine */0
          },
          collectionsStatuses: undefined,
          formStatus: /* Editing */0,
          submissionStatus: /* NeverSubmitted */0
        };
}

function validateForm(input, validators, fieldsStatuses) {
  var match = fieldsStatuses.optBalance;
  var match_0 = match ? match._0 : Curry._1(validators.optBalance.validate, input);
  var match$1 = fieldsStatuses.amount;
  var match_0$1 = match$1 ? match$1._0 : Curry._1(validators.amount.validate, input);
  var optBalanceResult = match_0;
  var optBalanceResult$1;
  if (optBalanceResult.TAG === /* Ok */0) {
    var amountResult = match_0$1;
    if (amountResult.TAG === /* Ok */0) {
      return {
              TAG: 0,
              output: {
                amount: amountResult._0,
                optBalance: optBalanceResult._0
              },
              fieldsStatuses: {
                optBalance: {
                  _0: optBalanceResult,
                  _1: /* Shown */0,
                  [Symbol.for("name")]: "Dirty"
                },
                amount: {
                  _0: amountResult,
                  _1: /* Shown */0,
                  [Symbol.for("name")]: "Dirty"
                }
              },
              collectionsStatuses: undefined,
              [Symbol.for("name")]: "Valid"
            };
    }
    optBalanceResult$1 = optBalanceResult;
  } else {
    optBalanceResult$1 = optBalanceResult;
  }
  return {
          TAG: 1,
          fieldsStatuses: {
            optBalance: {
              _0: optBalanceResult$1,
              _1: /* Shown */0,
              [Symbol.for("name")]: "Dirty"
            },
            amount: {
              _0: match_0$1,
              _1: /* Shown */0,
              [Symbol.for("name")]: "Dirty"
            }
          },
          collectionsStatuses: undefined,
          [Symbol.for("name")]: "Invalid"
        };
}

function useForm(initialInput, onSubmit) {
  var memoizedInitialState = React.useMemo((function () {
          return initialState(initialInput);
        }), [initialInput]);
  var match = Formality__ReactUpdate.useReducer(memoizedInitialState, (function (state, action) {
          if (typeof action === "number") {
            switch (action) {
              case /* BlurOptBalanceField */0 :
                  var result = Formality.validateFieldOnBlurWithValidator(state.input, state.fieldsStatuses.optBalance, validators_optBalance, (function (status) {
                          var init = state.fieldsStatuses;
                          return {
                                  optBalance: status,
                                  amount: init.amount
                                };
                        }));
                  if (result !== undefined) {
                    return {
                            TAG: 0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: result,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: state.formStatus,
                              submissionStatus: state.submissionStatus
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  } else {
                    return /* NoUpdate */0;
                  }
              case /* BlurAmountField */1 :
                  var result$1 = Formality.validateFieldOnBlurWithValidator(state.input, state.fieldsStatuses.amount, validators_amount, (function (status) {
                          var init = state.fieldsStatuses;
                          return {
                                  optBalance: init.optBalance,
                                  amount: status
                                };
                        }));
                  if (result$1 !== undefined) {
                    return {
                            TAG: 0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: result$1,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: state.formStatus,
                              submissionStatus: state.submissionStatus
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  } else {
                    return /* NoUpdate */0;
                  }
              case /* Submit */2 :
                  var match = state.formStatus;
                  if (typeof match !== "number" && match.TAG === /* Submitting */0) {
                    return /* NoUpdate */0;
                  }
                  var match$1 = validateForm(state.input, validators, state.fieldsStatuses);
                  if (match$1.TAG !== /* Valid */0) {
                    return {
                            TAG: 0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: match$1.fieldsStatuses,
                              collectionsStatuses: match$1.collectionsStatuses,
                              formStatus: /* Editing */0,
                              submissionStatus: /* AttemptedToSubmit */1
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  }
                  var output = match$1.output;
                  var error = state.formStatus;
                  var tmp;
                  tmp = typeof error === "number" || error.TAG !== /* SubmissionFailed */1 ? undefined : Caml_option.some(error._0);
                  return {
                          TAG: 1,
                          _0: {
                            input: state.input,
                            fieldsStatuses: match$1.fieldsStatuses,
                            collectionsStatuses: match$1.collectionsStatuses,
                            formStatus: {
                              TAG: 0,
                              _0: tmp,
                              [Symbol.for("name")]: "Submitting"
                            },
                            submissionStatus: /* AttemptedToSubmit */1
                          },
                          _1: (function (param) {
                              var dispatch = param.dispatch;
                              return Curry._2(onSubmit, output, {
                                          notifyOnSuccess: (function (input) {
                                              return Curry._1(dispatch, {
                                                          TAG: 2,
                                                          _0: input,
                                                          [Symbol.for("name")]: "SetSubmittedStatus"
                                                        });
                                            }),
                                          notifyOnFailure: (function (error) {
                                              return Curry._1(dispatch, {
                                                          TAG: 3,
                                                          _0: error,
                                                          [Symbol.for("name")]: "SetSubmissionFailedStatus"
                                                        });
                                            }),
                                          reset: (function (param) {
                                              return Curry._1(dispatch, /* Reset */5);
                                            }),
                                          dismissSubmissionResult: (function (param) {
                                              return Curry._1(dispatch, /* DismissSubmissionResult */4);
                                            })
                                        });
                            }),
                          [Symbol.for("name")]: "UpdateWithSideEffects"
                        };
                  break;
              case /* DismissSubmissionError */3 :
                  var match$2 = state.formStatus;
                  if (typeof match$2 === "number" || match$2.TAG !== /* SubmissionFailed */1) {
                    return /* NoUpdate */0;
                  } else {
                    return {
                            TAG: 0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: state.fieldsStatuses,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: /* Editing */0,
                              submissionStatus: state.submissionStatus
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  }
              case /* DismissSubmissionResult */4 :
                  var match$3 = state.formStatus;
                  if (typeof match$3 === "number") {
                    if (match$3 === /* Editing */0) {
                      return /* NoUpdate */0;
                    }
                    
                  } else if (match$3.TAG === /* Submitting */0) {
                    return /* NoUpdate */0;
                  }
                  return {
                          TAG: 0,
                          _0: {
                            input: state.input,
                            fieldsStatuses: state.fieldsStatuses,
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: /* Editing */0,
                            submissionStatus: state.submissionStatus
                          },
                          [Symbol.for("name")]: "Update"
                        };
              case /* Reset */5 :
                  return {
                          TAG: 0,
                          _0: initialState(initialInput),
                          [Symbol.for("name")]: "Update"
                        };
              
            }
          } else {
            switch (action.TAG | 0) {
              case /* UpdateOptBalanceField */0 :
                  var nextInput = Curry._1(action._0, state.input);
                  return {
                          TAG: 0,
                          _0: {
                            input: nextInput,
                            fieldsStatuses: Formality.validateFieldOnChangeWithValidator(nextInput, state.fieldsStatuses.optBalance, state.submissionStatus, validators_optBalance, (function (status) {
                                    var init = state.fieldsStatuses;
                                    return {
                                            optBalance: status,
                                            amount: init.amount
                                          };
                                  })),
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: state.formStatus,
                            submissionStatus: state.submissionStatus
                          },
                          [Symbol.for("name")]: "Update"
                        };
              case /* UpdateAmountField */1 :
                  var nextInput$1 = Curry._1(action._0, state.input);
                  return {
                          TAG: 0,
                          _0: {
                            input: nextInput$1,
                            fieldsStatuses: Formality.validateFieldOnChangeWithValidator(nextInput$1, state.fieldsStatuses.amount, state.submissionStatus, validators_amount, (function (status) {
                                    var init = state.fieldsStatuses;
                                    return {
                                            optBalance: init.optBalance,
                                            amount: status
                                          };
                                  })),
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: state.formStatus,
                            submissionStatus: state.submissionStatus
                          },
                          [Symbol.for("name")]: "Update"
                        };
              case /* SetSubmittedStatus */2 :
                  var input = action._0;
                  if (input !== undefined) {
                    return {
                            TAG: 0,
                            _0: {
                              input: input,
                              fieldsStatuses: {
                                optBalance: /* Pristine */0,
                                amount: /* Pristine */0
                              },
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: /* Submitted */1,
                              submissionStatus: state.submissionStatus
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  } else {
                    return {
                            TAG: 0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: {
                                optBalance: /* Pristine */0,
                                amount: /* Pristine */0
                              },
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: /* Submitted */1,
                              submissionStatus: state.submissionStatus
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  }
              case /* SetSubmissionFailedStatus */3 :
                  return {
                          TAG: 0,
                          _0: {
                            input: state.input,
                            fieldsStatuses: state.fieldsStatuses,
                            collectionsStatuses: state.collectionsStatuses,
                            formStatus: {
                              TAG: 1,
                              _0: action._0,
                              [Symbol.for("name")]: "SubmissionFailed"
                            },
                            submissionStatus: state.submissionStatus
                          },
                          [Symbol.for("name")]: "Update"
                        };
              case /* MapSubmissionError */4 :
                  var map = action._0;
                  var error$1 = state.formStatus;
                  if (typeof error$1 === "number") {
                    return /* NoUpdate */0;
                  }
                  if (error$1.TAG !== /* Submitting */0) {
                    return {
                            TAG: 0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: state.fieldsStatuses,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: {
                                TAG: 1,
                                _0: Curry._1(map, error$1._0),
                                [Symbol.for("name")]: "SubmissionFailed"
                              },
                              submissionStatus: state.submissionStatus
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  }
                  var error$2 = error$1._0;
                  if (error$2 !== undefined) {
                    return {
                            TAG: 0,
                            _0: {
                              input: state.input,
                              fieldsStatuses: state.fieldsStatuses,
                              collectionsStatuses: state.collectionsStatuses,
                              formStatus: {
                                TAG: 0,
                                _0: Caml_option.some(Curry._1(map, Caml_option.valFromOption(error$2))),
                                [Symbol.for("name")]: "Submitting"
                              },
                              submissionStatus: state.submissionStatus
                            },
                            [Symbol.for("name")]: "Update"
                          };
                  } else {
                    return /* NoUpdate */0;
                  }
              
            }
          }
        }));
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state.formStatus;
  var tmp;
  tmp = typeof match$1 === "number" || match$1.TAG !== /* Submitting */0 ? false : true;
  return {
          updateOptBalance: (function (nextInputFn, nextValue) {
              return Curry._1(dispatch, {
                          TAG: 0,
                          _0: (function (__x) {
                              return Curry._2(nextInputFn, __x, nextValue);
                            }),
                          [Symbol.for("name")]: "UpdateOptBalanceField"
                        });
            }),
          updateAmount: (function (nextInputFn, nextValue) {
              return Curry._1(dispatch, {
                          TAG: 1,
                          _0: (function (__x) {
                              return Curry._2(nextInputFn, __x, nextValue);
                            }),
                          [Symbol.for("name")]: "UpdateAmountField"
                        });
            }),
          blurOptBalance: (function (param) {
              return Curry._1(dispatch, /* BlurOptBalanceField */0);
            }),
          blurAmount: (function (param) {
              return Curry._1(dispatch, /* BlurAmountField */1);
            }),
          optBalanceResult: Formality.exposeFieldResult(state.fieldsStatuses.optBalance),
          amountResult: Formality.exposeFieldResult(state.fieldsStatuses.amount),
          input: state.input,
          status: state.formStatus,
          dirty: (function (param) {
              var match = state.fieldsStatuses;
              if (match.optBalance || match.amount) {
                return true;
              } else {
                return false;
              }
            }),
          valid: (function (param) {
              var match = validateForm(state.input, validators, state.fieldsStatuses);
              if (match.TAG === /* Valid */0) {
                return true;
              } else {
                return false;
              }
            }),
          submitting: tmp,
          submit: (function (param) {
              return Curry._1(dispatch, /* Submit */2);
            }),
          dismissSubmissionError: (function (param) {
              return Curry._1(dispatch, /* DismissSubmissionError */3);
            }),
          dismissSubmissionResult: (function (param) {
              return Curry._1(dispatch, /* DismissSubmissionResult */4);
            }),
          mapSubmissionError: (function (map) {
              return Curry._1(dispatch, {
                          TAG: 4,
                          _0: map,
                          [Symbol.for("name")]: "MapSubmissionError"
                        });
            }),
          reset: (function (param) {
              return Curry._1(dispatch, /* Reset */5);
            })
        };
}

var AdminMintForm = {
  validators: validators,
  initialFieldsStatuses: initialFieldsStatuses,
  initialCollectionsStatuses: undefined,
  initialState: initialState,
  validateForm: validateForm,
  useForm: useForm
};

var initialInput = {
  amount: {
    optAmountApproved: undefined,
    amount: ""
  },
  optBalance: undefined
};

function MintLong(Props) {
  var marketIndex = Props.marketIndex;
  var signer = ContractActions.useSignerExn(undefined);
  var match = ContractActions.useContractFunction(signer);
  var setTxState = match[2];
  var contractExecutionHandler = match[0];
  var match$1 = ContractActions.useContractFunction(signer);
  var setTxState2 = match$1[2];
  var txState2 = match$1[1];
  var contractExecutionHandler2 = match$1[0];
  var match$2 = React.useState(function () {
        return function (param) {
          
        };
      });
  var setFunctionToExecuteOnce = match$2[1];
  var functionToExecuteOnce = match$2[0];
  var match$3 = ContractHooks.useERC20ApprovedRefresh(Config.dai, Config.longShort);
  var optAmountApproved = match$3.data;
  var form = useForm(initialInput, (function (param, _form) {
          var match = param.amount;
          var amount = match.amount;
          var mintFunction = function (param) {
            return Curry._2(contractExecutionHandler, (function (param) {
                          return Contracts.LongShort.make(Config.longShort, param);
                        }), (function (param) {
                          return param.mintLong(marketIndex, amount);
                        }));
          };
          if (!match.requiresApproval) {
            return mintFunction(undefined);
          }
          Curry._1(setFunctionToExecuteOnce, (function (param) {
                  return mintFunction;
                }));
          var arg = amount.mul(Ethers$1.BigNumber.from("2"));
          return Curry._2(contractExecutionHandler2, (function (param) {
                        return Contracts.Erc20.make(Config.dai, param);
                      }), (function (param) {
                        return param.approve(Config.longShort, arg);
                      }));
        }));
  var match$4 = ContractHooks.useDaiBalanceRefresh(undefined);
  var optBalance = match$4.data;
  React.useEffect((function () {
          Curry._2(form.updateAmount, (function (input, param) {
                  return {
                          amount: {
                            optAmountApproved: param.optAmountApproved,
                            amount: input.amount.amount
                          },
                          optBalance: input.optBalance
                        };
                }), {
                optAmountApproved: optAmountApproved,
                amount: ""
              });
          
        }), [optAmountApproved]);
  React.useEffect((function () {
          Curry._2(form.updateOptBalance, (function (input, value) {
                  return {
                          amount: input.amount,
                          optBalance: value
                        };
                }), optBalance);
          
        }), [optBalance]);
  React.useEffect((function () {
          if (typeof txState2 !== "number" && txState2.TAG === /* Complete */2) {
            Curry._1(functionToExecuteOnce, undefined);
            Curry._1(setTxState2, (function (param) {
                    return /* UnInitialised */0;
                  }));
          }
          
        }), [txState2]);
  var match$5 = form.amountResult;
  var requiresApprove;
  var exit = 0;
  if (match$5 !== undefined && match$5.TAG === /* Ok */0) {
    requiresApprove = match$5._0.requiresApproval;
  } else {
    exit = 1;
  }
  if (exit === 1) {
    requiresApprove = optAmountApproved !== undefined && Caml_option.valFromOption(optAmountApproved).gte(Ethers.Utils.parseEtherUnsafe("1")) ? false : true;
  }
  var submitButtonText = requiresApprove ? "Approve and Mint" : "Mint";
  var match$6 = form.amountResult;
  var tmp;
  tmp = match$6 !== undefined ? (
      match$6.TAG === /* Ok */0 ? React.createElement("div", {
              className: "text-green-600"
            }, "✓") : React.createElement("div", {
              className: "text-red-600"
            }, match$6._0)
    ) : null;
  var match$7 = form.status;
  return React.createElement(TxTemplate.make, {
              children: React.createElement(TxTemplate.make, {
                    children: React.createElement(Form.make, {
                          className: "",
                          onSubmit: (function (param) {
                              return Curry._1(form.submit, undefined);
                            }),
                          children: React.createElement("div", {
                                className: ""
                              }, React.createElement("h2", {
                                    className: "text-xl"
                                  }, "Mint Long Tokens"), React.createElement("div", undefined, React.createElement("label", {
                                        htmlFor: "amount"
                                      }, "Amount: "), React.createElement("input", {
                                        className: "border-2 border-grey-500",
                                        id: "amount",
                                        disabled: form.submitting,
                                        type: "text",
                                        value: form.input.amount.amount,
                                        onBlur: (function (param) {
                                            return Curry._1(form.blurAmount, undefined);
                                          }),
                                        onChange: (function ($$event) {
                                            return Curry._2(form.updateAmount, (function (input, value) {
                                                          return {
                                                                  amount: value,
                                                                  optBalance: input.optBalance
                                                                };
                                                        }), {
                                                        optAmountApproved: optAmountApproved,
                                                        amount: $$event.target.value
                                                      });
                                          })
                                      }), tmp), React.createElement("div", undefined, React.createElement("button", {
                                        className: "text-lg disabled:opacity-50 bg-green-500 rounded-lg",
                                        disabled: form.submitting
                                      }, form.submitting ? "Submitting..." : submitButtonText), typeof match$7 === "number" && match$7 !== 0 ? React.createElement("div", {
                                          className: Cn.fromList({
                                                hd: "form-status",
                                                tl: {
                                                  hd: "success",
                                                  tl: /* [] */0
                                                }
                                              })
                                        }, "✓ Finished Minting") : null))
                        }),
                    txState: txState2
                  }),
              txState: match[1],
              resetTxState: (function (param) {
                  Curry._1(form.reset, undefined);
                  return Curry._1(setTxState, (function (param) {
                                return /* UnInitialised */0;
                              }));
                })
            });
}

var make = MintLong;

export {
  AdminMintForm ,
  initialInput ,
  make ,
  
}
/* Form Not a pure module */
