// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Misc from "../../libraries/Misc.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Config from "../../Config.js";
import * as Ethers from "../../ethereum/Ethers.js";
import * as Ethers$1 from "ethers";
import * as Globals from "../../libraries/Globals.js";
import * as Queries from "../../data/Queries.js";
import * as Contracts from "../../ethereum/Contracts.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as RootProvider from "../../libraries/RootProvider.js";
import * as AccessControl from "../AccessControl.js";
import * as ContractActions from "../../ethereum/ContractActions.js";
import Format from "date-fns/format";
import FromUnixTime from "date-fns/fromUnixTime";
import FormatDistanceToNow from "date-fns/formatDistanceToNow";

function queryLatestStateChanges(client, pollVariables) {
  return Curry._6(client.rescript_query, {
              query: Queries.StateChangePoll.query,
              Raw: Queries.StateChangePoll.Raw,
              parse: Queries.StateChangePoll.parse,
              serialize: Queries.StateChangePoll.serialize,
              serializeVariables: Queries.StateChangePoll.serializeVariables
            }, undefined, undefined, /* NetworkOnly */2, undefined, pollVariables);
}

function StateUpdates$TestTxButton(Props) {
  var signer = ContractActions.useSignerExn(undefined);
  var match = ContractActions.useContractFunction(signer);
  var contractExecutionHandler = match[0];
  return React.createElement("button", {
              onClick: (function (param) {
                  var arg = Ethers$1.BigNumber.from(3);
                  var arg$1 = Ethers.Utils.parseEther("1");
                  return Curry._2(contractExecutionHandler, (function (param) {
                                return Contracts.LongShort.make(Config.longShort, param);
                              }), (function (param) {
                                return param.mintShortAndStake(arg, arg$1);
                              }));
                })
            }, ">>Make test transaction<<");
}

var TestTxButton = {
  make: StateUpdates$TestTxButton
};

function StateUpdates$ExampleStateUpdates(Props) {
  var match = React.useState(function () {
        return Ethers$1.BigNumber.from(Misc.Time.getCurrentTimestamp(undefined));
      });
  var optCurrentUser = RootProvider.useCurrentUser(undefined);
  var basicUserQuery = Curry.app(Queries.UserQuery.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        {
          userId: Belt_Option.mapWithDefault(optCurrentUser, "0x374252d2c9f0075b7e2ca2a9868b44f1f62fba80", Globals.ethAdrToLowerStr)
        }
      ]);
  var lastChangeJsDate = FromUnixTime(match[0].toNumber());
  var tmp;
  if (optCurrentUser !== undefined) {
    var match$1 = basicUserQuery.data;
    if (match$1 !== undefined) {
      var match$2 = match$1.user;
      tmp = match$2 !== undefined ? React.createElement(React.Fragment, undefined, "you have done " + match$2.numberOfTransactions.toString() + " transactions and used " + match$2.totalGasUsed.toString() + " in the float platform") : (
          basicUserQuery.error !== undefined ? "Error loading users float interaction data" : "Loading users float interaction data"
        );
    } else {
      tmp = basicUserQuery.error !== undefined ? "Error loading users float interaction data" : "Loading users float interaction data";
    }
  } else {
    tmp = "Your data will load once you log in";
  }
  return React.createElement(React.Fragment, undefined, React.createElement("div", undefined, "Latest timestamp: " + Format(lastChangeJsDate, "ha do MMM ''yy") + " (" + FormatDistanceToNow(lastChangeJsDate) + " ago)"), React.createElement("hr", undefined), React.createElement("hr", undefined), React.createElement("hr", undefined), React.createElement("div", undefined, tmp), React.createElement(AccessControl.make, {
                  children: React.createElement(StateUpdates$TestTxButton, {}),
                  alternateComponent: React.createElement("h1", undefined, "LOGIN TO MAKE TEST TRANSACTIONS")
                }));
}

var ExampleStateUpdates = {
  make: StateUpdates$ExampleStateUpdates
};

function $$default(param) {
  return React.createElement(StateUpdates$ExampleStateUpdates, {});
}

export {
  queryLatestStateChanges ,
  TestTxButton ,
  ExampleStateUpdates ,
  $$default ,
  $$default as default,
  
}
/* Misc Not a pure module */
