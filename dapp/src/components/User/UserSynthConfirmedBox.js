// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Button = require("../UI/Base/Button.js");
var Config = require("../../config/Config.js");
var Ethers = require("../../ethereum/Ethers.js");
var CONSTANTS = require("../../CONSTANTS.js");
var Contracts = require("../../ethereum/Contracts.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var RootProvider = require("../../libraries/RootProvider.js");
var ToastProvider = require("../UI/ToastProvider.js");
var ContractActions = require("../../ethereum/ContractActions.js");

function UserSynthConfirmedBox$ClaimSynthTokensTxStatusModals(Props) {
  var txState = Props.txState;
  var toastDispatch = React.useContext(ToastProvider.DispatchToastContext.context);
  React.useEffect((function () {
          if (typeof txState === "number") {
            if (txState !== /* UnInitialised */0) {
              Curry._1(toastDispatch, {
                    _0: "Confirm claim synth transaction in your wallet",
                    _1: "",
                    _2: /* Info */2,
                    [Symbol.for("name")]: "Show"
                  });
            }
            
          } else {
            switch (txState.TAG | 0) {
              case /* SignedAndSubmitted */0 :
                  Curry._1(toastDispatch, {
                        _0: "claim synth transaction pending",
                        _1: "",
                        _2: /* Info */2,
                        [Symbol.for("name")]: "Show"
                      });
                  break;
              case /* Declined */1 :
                  Curry._1(toastDispatch, {
                        _0: "The transaction was rejected by your wallet",
                        _1: txState._0,
                        _2: /* Error */0,
                        [Symbol.for("name")]: "Show"
                      });
                  break;
              case /* Complete */2 :
                  Curry._1(toastDispatch, {
                        _0: "Claim synth transaction confirmed ðŸŽ‰",
                        _1: "",
                        _2: /* Success */3,
                        [Symbol.for("name")]: "Show"
                      });
                  break;
              case /* Failed */3 :
                  Curry._1(toastDispatch, {
                        _0: "The transaction failed",
                        _1: "",
                        _2: /* Error */0,
                        [Symbol.for("name")]: "Show"
                      });
                  break;
              
            }
          }
          
        }), [txState]);
  return React.createElement(React.Fragment, undefined);
}

var ClaimSynthTokensTxStatusModals = {
  make: UserSynthConfirmedBox$ClaimSynthTokensTxStatusModals
};

function UserSynthConfirmedBox(Props) {
  var name = Props.name;
  var isLong = Props.isLong;
  var daiSpend = Props.daiSpend;
  var marketIndex = Props.marketIndex;
  var signer = ContractActions.useSignerExn(undefined);
  var optCurrentUser = RootProvider.useCurrentUser(undefined);
  var match = ContractActions.useContractFunction(signer);
  var contractExecutionHandler = match[0];
  return React.createElement("div", {
              className: "flex flex-col justify-between w-11/12 mx-auto p-2 mb-2 border-2 border-primary rounded-lg shadow relative"
            }, React.createElement("div", {
                  className: "flex flex-row justify-between"
                }, React.createElement("div", {
                      className: " text-sm self-center"
                    }, name), React.createElement("div", {
                      className: " text-sm self-center"
                    }, isLong ? "Long" : "Short"), React.createElement("div", {
                      className: "flex  text-sm self-center"
                    }, React.createElement("img", {
                          className: "h-5 pr-1",
                          src: CONSTANTS.daiDisplayToken.iconUrl
                        }), Ethers.Utils.formatEther(daiSpend))), React.createElement(Button.Tiny.make, {
                  onClick: (function (param) {
                      var arg = Belt_Option.getWithDefault(optCurrentUser, CONSTANTS.zeroAddress);
                      return Curry._2(contractExecutionHandler, (function (param) {
                                    return Contracts.LongShort.make(Config.longShort, param);
                                  }), (function (param) {
                                    return param.executeOutstandingNextPriceSettlementsUser(arg, marketIndex);
                                  }));
                    }),
                  children: "Claim synth tokens"
                }), React.createElement(UserSynthConfirmedBox$ClaimSynthTokensTxStatusModals, {
                  txState: match[1]
                }));
}

var make = UserSynthConfirmedBox;

exports.ClaimSynthTokensTxStatusModals = ClaimSynthTokensTxStatusModals;
exports.make = make;
/* react Not a pure module */
