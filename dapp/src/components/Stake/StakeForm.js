// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "../Admin/Form.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Button from "../UI/Button.js";
import * as Config from "../../Config.js";
import * as Loader from "../UI/Loader.js";
import * as Ethers from "ethers";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Queries from "../../libraries/Queries.js";
import * as Contracts from "../../ethereum/Contracts.js";
import * as AmountInput from "../UI/AmountInput.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Router from "next/router";
import * as ContractActions from "../../ethereum/ContractActions.js";

function StakeForm(Props) {
  var tokenId = Props.tokenId;
  var router = Router.useRouter();
  var tokenId$1 = Belt_Option.getWithDefault(Js_dict.get(router.query, "tokenId"), tokenId);
  var token = Curry.app(Queries.SyntheticToken.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        {
          tokenId: tokenId$1
        }
      ]);
  var signer = ContractActions.useSignerExn(undefined);
  var match = React.useState(function () {
        return function (param) {
          
        };
      });
  var setContractActionToCallAfterApproval = match[1];
  var contractActionToCallAfterApproval = match[0];
  var match$1 = ContractActions.useContractFunction(signer);
  var contractExecutionHandler = match$1[0];
  var match$2 = ContractActions.useContractFunction(signer);
  var setTxStateApprove = match$2[2];
  var txStateApprove = match$2[1];
  var contractExecutionHandlerApprove = match$2[0];
  var stakerContractAddress = Config.useStakerAddress(undefined);
  var amount = Ethers.BigNumber.from(1);
  var stakeAndEarnImmediatlyFunction = function (param) {
    var arg = Ethers.utils.getAddress(tokenId$1);
    var arg$1 = Ethers.BigNumber.from(1);
    return Curry._2(contractExecutionHandler, (function (param) {
                  return Contracts.Staker.make(stakerContractAddress, param);
                }), (function (param) {
                  return param.stakeAndEarnImmediately(arg, arg$1);
                }));
  };
  React.useEffect((function () {
          if (typeof txStateApprove !== "number" && txStateApprove.TAG === /* Complete */2) {
            Curry._1(contractActionToCallAfterApproval, undefined);
            Curry._1(setTxStateApprove, (function (param) {
                    return /* UnInitialised */0;
                  }));
          }
          
        }), [txStateApprove]);
  var match$3 = token.data;
  var tmp;
  if (token.loading) {
    tmp = React.createElement(Loader.make, {});
  } else if (token.error !== undefined) {
    console.log("Unable to fetch token");
    tmp = React.createElement(React.Fragment, undefined, "Unable to fetch token");
  } else if (match$3 !== undefined) {
    var synthetic = match$3.syntheticToken;
    tmp = synthetic !== undefined ? React.createElement(Form.make, {
            className: "",
            onSubmit: (function (param) {
                Curry._1(setContractActionToCallAfterApproval, (function (param) {
                        return stakeAndEarnImmediatlyFunction;
                      }));
                var partial_arg = Ethers.utils.getAddress(tokenId$1);
                var arg = amount.mul(Ethers.BigNumber.from("2"));
                return Curry._2(contractExecutionHandlerApprove, (function (param) {
                              return Contracts.Erc20.make(partial_arg, param);
                            }), (function (param) {
                              return param.approve(stakerContractAddress, arg);
                            }));
              }),
            children: null
          }, React.createElement("div", {
                className: "px-8 pt-2"
              }, React.createElement("div", {
                    className: "-mb-px flex justify-between"
                  }, React.createElement("div", {
                        className: "no-underline text-teal-dark border-b-2 border-teal-dark tracking-wide font-bold py-3 mr-8",
                        href: "#"
                      }, "Stake ↗️"), React.createElement("div", {
                        className: "no-underline text-grey-dark border-b-2 border-transparent tracking-wide font-bold py-3",
                        href: "#"
                      }, "Unstake ↗️"))), React.createElement(AmountInput.make, {
                placeholder: "stake",
                value: "",
                disabled: false,
                onBlur: (function (param) {
                    
                  }),
                onChange: (function (param) {
                    
                  }),
                onMaxClick: (function (param) {
                    
                  })
              }), React.createElement(Button.make, {
                onClick: (function (param) {
                    
                  }),
                children: "Stake " + synthetic.tokenType + " " + synthetic.syntheticMarket.name,
                variant: "large"
              })) : React.createElement(React.Fragment, undefined, "this is not a valid token to stake");
  } else {
    console.log("You might think this is impossible, but depending on the situation it might not be!");
    tmp = React.createElement(React.Fragment, undefined);
  }
  return React.createElement(React.Fragment, undefined, tmp);
}

var make = StakeForm;

export {
  make ,
  
}
/* Form Not a pure module */
