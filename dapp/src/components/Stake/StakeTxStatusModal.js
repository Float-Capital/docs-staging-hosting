// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Modal from "../UI/Modal.js";
import * as React from "react";
import * as Config from "../../Config.js";
import * as MiniLoader from "../UI/MiniLoader.js";
import * as MessageUsOnDiscord from "../Ethereum/MessageUsOnDiscord.js";
import * as ViewOnBlockExplorer from "../Ethereum/ViewOnBlockExplorer.js";

function StakeTxStatusModal(Props) {
  var txStateApprove = Props.txStateApprove;
  var txStateStake = Props.txStateStake;
  var resetFormButton = Props.resetFormButton;
  var tokenToStake = Props.tokenToStake;
  var exit = 0;
  if (typeof txStateApprove === "number") {
    if (txStateApprove !== /* UnInitialised */0) {
      return React.createElement(Modal.make, {
                  id: "stake-approve-1",
                  children: React.createElement("div", {
                        className: "text-center m-3"
                      }, React.createElement("p", undefined, "Confirm approve transaction in your wallet "))
                });
    }
    exit = 1;
  } else {
    switch (txStateApprove.TAG | 0) {
      case /* SignedAndSubmitted */0 :
          return React.createElement(Modal.make, {
                      id: "stake-approve-2",
                      children: React.createElement("div", {
                            className: "text-center m-3"
                          }, React.createElement(MiniLoader.make, {}), React.createElement("p", undefined, "Approval transaction pending... "), React.createElement(ViewOnBlockExplorer.make, {
                                txHash: txStateApprove._0
                              }))
                    });
      case /* Declined */1 :
          return React.createElement(React.Fragment, undefined, Curry._1(resetFormButton, undefined));
      case /* Complete */2 :
          if (typeof txStateStake === "number") {
            exit = 2;
          } else {
            if (txStateStake.TAG === /* SignedAndSubmitted */0) {
              return React.createElement(Modal.make, {
                          id: "stake-2",
                          children: React.createElement("div", {
                                className: "text-center m-3"
                              }, React.createElement("p", undefined, React.createElement("a", {
                                        href: Config.blockExplorer + "tx/" + txStateApprove._0.transactionHash,
                                        rel: "noopenner noreferer",
                                        target: "_"
                                      }, "Approval confirmed")), React.createElement("h1", undefined, React.createElement("a", {
                                        href: Config.blockExplorer + "tx/" + txStateStake._0,
                                        rel: "noopenner noreferer",
                                        target: "_"
                                      }, "Pending staking " + tokenToStake)))
                        });
            }
            exit = 1;
          }
          break;
      case /* Failed */3 :
          return React.createElement(Modal.make, {
                      id: "stake-approve-4",
                      children: React.createElement("div", {
                            className: "text-center m-3"
                          }, React.createElement("p", undefined, "The transaction failed."), React.createElement(ViewOnBlockExplorer.make, {
                                txHash: txStateApprove._0
                              }), React.createElement(MessageUsOnDiscord.make, {}), Curry._1(resetFormButton, undefined))
                    });
      
    }
  }
  switch (exit) {
    case 1 :
        if (typeof txStateStake === "number") {
          if (txStateStake === /* UnInitialised */0) {
            return null;
          } else {
            return React.createElement(Modal.make, {
                        id: "stake-1",
                        children: React.createElement("div", {
                              className: "text-center m-3"
                            }, React.createElement("h1", undefined, "Confirm the transaction to stake " + tokenToStake))
                      });
          }
        }
        switch (txStateStake.TAG | 0) {
          case /* SignedAndSubmitted */0 :
              return React.createElement(Modal.make, {
                          id: "stake-3",
                          children: React.createElement("div", {
                                className: "text-center m-3"
                              }, React.createElement(MiniLoader.make, {}), React.createElement("p", undefined, "Staking transaction pending... "), React.createElement(ViewOnBlockExplorer.make, {
                                    txHash: txStateStake._0
                                  }))
                        });
          case /* Declined */1 :
              return React.createElement(Modal.make, {
                          id: "stake-5",
                          children: React.createElement("div", {
                                className: "text-center m-3"
                              }, React.createElement("p", undefined, "The transaction was rejected by your wallet"), React.createElement(MessageUsOnDiscord.make, {}), Curry._1(resetFormButton, undefined))
                        });
          case /* Complete */2 :
              return React.createElement(Modal.make, {
                          id: "stake-4",
                          children: React.createElement("div", {
                                className: "text-center m-3"
                              }, React.createElement("p", undefined, "Transaction complete ðŸŽ‰"), Curry._1(resetFormButton, undefined))
                        });
          case /* Failed */3 :
              return React.createElement(Modal.make, {
                          id: "stake-6",
                          children: React.createElement("div", {
                                className: "text-center m-3"
                              }, React.createElement("h1", undefined, "The transaction failed."), React.createElement(ViewOnBlockExplorer.make, {
                                    txHash: txStateStake._0
                                  }), React.createElement(MessageUsOnDiscord.make, {}), Curry._1(resetFormButton, undefined))
                        });
          
        }
    case 2 :
        return React.createElement(Modal.make, {
                    id: "stake-approve-3",
                    children: React.createElement("div", {
                          className: "text-center m-3"
                        }, React.createElement("p", undefined, "Confirm transaction to stake " + tokenToStake))
                  });
    
  }
}

var make = StakeTxStatusModal;

export {
  make ,
  
}
/* Modal Not a pure module */
