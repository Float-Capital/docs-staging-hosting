// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Modal from "../UI/Modal.js";
import * as React from "react";
import * as Button from "../UI/Button.js";
import * as Config from "../../Config.js";
import * as MiniLoader from "../UI/MiniLoader.js";

function StakeTxStatus(Props) {
  var txStateApprove = Props.txStateApprove;
  var txStateStake = Props.txStateStake;
  var resetFormButton = Props.resetFormButton;
  var tokenToStake = Props.tokenToStake;
  var buttonText = Props.buttonText;
  var buttonDisabled = Props.buttonDisabled;
  var exit = 0;
  if (typeof txStateApprove === "number") {
    switch (txStateApprove) {
      case /* UnInitialised */0 :
          exit = 1;
          break;
      case /* Created */1 :
          return React.createElement(Modal.make, {
                      children: React.createElement("div", {
                            className: "text-center m-3"
                          }, React.createElement("p", undefined, "Confirm approve transaction in your wallet "))
                    });
      case /* Failed */2 :
          return React.createElement(Modal.make, {
                      children: React.createElement("div", {
                            className: "text-center m-3"
                          }, React.createElement("p", undefined, "The transaction failed."), React.createElement("p", undefined, React.createElement("a", {
                                    href: Config.discordInviteLink,
                                    rel: "noopenner noreferer",
                                    target: "_"
                                  }, "Connect with us on discord, if you would like some assistance")), Curry._1(resetFormButton, undefined))
                    });
      
    }
  } else {
    switch (txStateApprove.TAG | 0) {
      case /* SignedAndSubmitted */0 :
          return React.createElement(Modal.make, {
                      children: React.createElement("div", {
                            className: "text-center m-3"
                          }, React.createElement(MiniLoader.make, {}), React.createElement("p", undefined, "Approval transaction pending... "), React.createElement("a", {
                                href: Config.defaultBlockExplorer + "tx/" + txStateApprove._0,
                                rel: "noopenner noreferer",
                                target: "_"
                              }, React.createElement("p", undefined, "View on " + Config.defaultBlockExplorerName)))
                    });
      case /* Declined */1 :
          return React.createElement(React.Fragment, undefined, Curry._1(resetFormButton, undefined));
      case /* Complete */2 :
          if (typeof txStateStake === "number") {
            switch (txStateStake) {
              case /* UnInitialised */0 :
              case /* Created */1 :
                  exit = 2;
                  break;
              default:
                exit = 1;
            }
          } else {
            if (txStateStake.TAG === /* SignedAndSubmitted */0) {
              return React.createElement(Modal.make, {
                          children: React.createElement("div", {
                                className: "text-center m-3"
                              }, React.createElement("p", undefined, React.createElement("a", {
                                        href: Config.defaultBlockExplorer + "tx/" + txStateApprove._0.transactionHash,
                                        rel: "noopenner noreferer",
                                        target: "_"
                                      }, "Approval confirmed")), React.createElement("h1", undefined, React.createElement("a", {
                                        href: Config.defaultBlockExplorer + "tx/" + txStateStake._0,
                                        rel: "noopenner noreferer",
                                        target: "_"
                                      }, "Pending staking " + tokenToStake)))
                        });
            }
            exit = 1;
          }
          break;
      
    }
  }
  switch (exit) {
    case 1 :
        if (typeof txStateStake === "number") {
          switch (txStateStake) {
            case /* UnInitialised */0 :
                return React.createElement(Button.make, {
                            onClick: (function (param) {
                                
                              }),
                            children: buttonText,
                            disabled: buttonDisabled
                          });
            case /* Created */1 :
                return React.createElement(Modal.make, {
                            children: React.createElement("div", {
                                  className: "text-center m-3"
                                }, React.createElement("h1", undefined, "Confirm the transaction to stake " + tokenToStake))
                          });
            case /* Failed */2 :
                return React.createElement(Modal.make, {
                            children: React.createElement("div", {
                                  className: "text-center m-3"
                                }, React.createElement("h1", undefined, "The transaction failed."), React.createElement("p", undefined, React.createElement("a", {
                                          href: Config.discordInviteLink,
                                          rel: "noopenner noreferer",
                                          target: "_"
                                        }, "Connect with us on discord, if you would like some assistance")), Curry._1(resetFormButton, undefined))
                          });
            
          }
        } else {
          switch (txStateStake.TAG | 0) {
            case /* SignedAndSubmitted */0 :
                return React.createElement(Modal.make, {
                            children: React.createElement("div", {
                                  className: "text-center m-3"
                                }, React.createElement(MiniLoader.make, {}), React.createElement("p", undefined, "Staking transaction pending... "), React.createElement("a", {
                                      className: "hover:underline",
                                      href: Config.defaultBlockExplorer + "tx/" + txStateStake._0,
                                      rel: "noopenner noreferer",
                                      target: "_"
                                    }, React.createElement("p", undefined, "View on " + Config.defaultBlockExplorerName)))
                          });
            case /* Declined */1 :
                return React.createElement(Modal.make, {
                            children: React.createElement("div", {
                                  className: "text-center m-3"
                                }, React.createElement("p", undefined, "The transaction was rejected by your wallet"), React.createElement("a", {
                                      href: Config.discordInviteLink,
                                      rel: "noopenner noreferer",
                                      target: "_"
                                    }, "Connect with us on discord, if you would like some assistance"), Curry._1(resetFormButton, undefined))
                          });
            case /* Complete */2 :
                return React.createElement(Modal.make, {
                            children: React.createElement("div", {
                                  className: "text-center m-3"
                                }, React.createElement("p", undefined, "Transaction complete"), Curry._1(resetFormButton, undefined))
                          });
            
          }
        }
    case 2 :
        return React.createElement(Modal.make, {
                    children: React.createElement("div", {
                          className: "text-center m-3"
                        }, React.createElement("p", undefined, "Confirm transaction to stake " + tokenToStake))
                  });
    
  }
}

var make = StakeTxStatus;

export {
  make ,
  
}
/* Modal Not a pure module */
