// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Next from "../../bindings/Next.js";
import * as React from "react";
import * as Button from "../UI/Button.js";
import * as Config from "../../Config.js";
import * as Ethers from "../../ethereum/Ethers.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Tooltip from "../UI/Tooltip.js";
import * as CONSTANTS from "../../CONSTANTS.js";
import * as MarketBar from "../UI/MarketCard/MarketBar.js";
import * as Belt_Float from "bs-platform/lib/es6/belt_Float.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as FormatMoney from "../UI/FormatMoney.js";
import * as Router from "next/router";

function percentStr(n, outOf) {
  if (outOf.eq(CONSTANTS.zeroBN)) {
    return "0.00";
  } else {
    return Ethers.Utils.formatEtherToPrecision(n.mul(CONSTANTS.oneHundredEth).div(outOf), 2);
  }
}

function calculateBeta(totalValueLocked, totalLockedLong, totalLockedShort, isLong) {
  if (totalValueLocked.eq(CONSTANTS.zeroBN) || totalLockedLong.eq(CONSTANTS.zeroBN) || totalLockedShort.eq(CONSTANTS.zeroBN)) {
    return "0";
  } else if (totalLockedLong.eq(totalLockedShort)) {
    return "100";
  } else if (isLong && totalLockedShort.lt(totalLockedLong)) {
    return percentStr(totalLockedShort, totalLockedLong);
  } else if (!isLong && totalLockedLong.lt(totalLockedShort)) {
    return percentStr(totalLockedLong, totalLockedShort);
  } else {
    return "100";
  }
}

function MarketCard(Props) {
  var param = Props.marketData;
  var match = param.latestSystemState;
  var totalValueLocked = match.totalValueLocked;
  var totalLockedShort = match.totalLockedShort;
  var totalLockedLong = match.totalLockedLong;
  var marketIndex = param.marketIndex;
  var marketName = param.name;
  var router = Router.useRouter();
  var marketIndexOption = Js_dict.get(router.query, "marketIndex");
  var percentStrLong = percentStr(totalLockedLong, totalValueLocked);
  var percentStrShort = (100.0 - Belt_Option.getExn(Belt_Float.fromString(percentStrLong))).toFixed(2);
  var longBeta = calculateBeta(totalValueLocked, totalLockedLong, totalLockedShort, true);
  var shortBeta = calculateBeta(totalValueLocked, totalLockedLong, totalLockedShort, false);
  var marketPositionHeadings = function (isLong) {
    return React.createElement("div", {
                className: "flex flex-col items-center justify-center"
              }, React.createElement("h2", {
                    className: "font-bold text-sm"
                  }, marketName, React.createElement("span", {
                        className: "text-xs"
                      }, isLong ? "↗️" : "↘️")), React.createElement("div", {
                    className: "pt-2 mt-auto"
                  }, React.createElement("h3", {
                        className: "text-xs mt-1"
                      }, React.createElement("span", {
                            className: "font-bold"
                          }, isLong ? "LONG" : "SHORT"), " Liquidity")));
  };
  var marketPositionValues = function (isLong) {
    var value = FormatMoney.formatEther(undefined, isLong ? totalLockedLong : totalLockedShort);
    var beta = isLong ? longBeta : shortBeta;
    return React.createElement("div", {
                className: "text-sm text-center m-auto mb-4"
              }, React.createElement("div", {
                    className: "text-2xl tracking-widest font-alphbeta my-3"
                  }, value, React.createElement("span", {
                        className: "text-xs text-gray-600 font-mono"
                      }, Config.paymentTokenName)), React.createElement("span", {
                    className: "font-bold"
                  }, "Exposure "), React.createElement(Tooltip.make, {
                    tip: "The impact " + marketName + " price movements have on " + (
                      isLong ? "long" : "short"
                    ) + " value"
                  }), React.createElement("span", {
                    className: "font-bold"
                  }, ": "), beta + "%");
  };
  var liquidityRatio = function (param) {
    return React.createElement("div", {
                className: "w-full"
              }, totalValueLocked.eq(CONSTANTS.zeroBN) ? null : React.createElement(MarketBar.make, {
                      percentStrLong: percentStrLong,
                      percentStrShort: percentStrShort
                    }));
  };
  var mintButtons = function (param) {
    return React.createElement("div", {
                className: "flex w-full justify-around"
              }, React.createElement(Button.Small.make, {
                    onClick: (function (param) {
                        return Next.Router.pushShallow(router, "/markets?marketIndex=" + marketIndex.toString() + "&actionOption=long");
                      }),
                    children: "Mint Long"
                  }), React.createElement(Button.Small.make, {
                    onClick: (function (param) {
                        return Next.Router.pushShallow(router, "/markets?marketIndex=" + marketIndex.toString() + "&actionOption=short");
                      }),
                    children: "Mint Short"
                  }));
  };
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "p-1 mb-8 rounded-lg flex flex-col bg-white bg-opacity-75 my-5 shadow-lg"
                }, React.createElement("div", {
                      className: "flex justify-center w-full my-1"
                    }, React.createElement("h1", {
                          className: "font-bold text-xl font-alphbeta"
                        }, marketName, React.createElement(Tooltip.make, {
                              tip: "This market tracks " + marketName
                            }))), React.createElement("div", {
                      className: "flex flex-wrap justify-center w-full"
                    }, React.createElement("div", {
                          className: "order-2 md:order-1 w-1/2 md:w-1/4 flex items-center flex grow flex-wrap flex-col"
                        }, marketPositionHeadings(true), React.createElement("div", {
                              className: "md:block hidden"
                            }, marketPositionValues(true))), React.createElement("div", {
                          className: "order-1 md:order-2 w-full md:w-1/2 flex items-center flex-col"
                        }, React.createElement("h2", {
                              className: "text-xs mt-1"
                            }, React.createElement("span", {
                                  className: "font-bold"
                                }, "TOTAL"), " Liquidity"), React.createElement("div", {
                              className: "text-3xl font-alphbeta tracking-wider py-1"
                            }, FormatMoney.formatEther(undefined, totalValueLocked), React.createElement("span", {
                                  className: "text-xs text-gray-600 font-mono"
                                }, Config.paymentTokenName)), React.createElement("div", {
                              className: "md:block hidden w-full"
                            }, liquidityRatio(undefined), Belt_Option.isNone(marketIndexOption) ? mintButtons(undefined) : null)), React.createElement("div", {
                          className: "order-3 w-1/2 md:w-1/4 flex-grow flex-wrap flex-col"
                        }, marketPositionHeadings(false), React.createElement("div", {
                              className: "md:block hidden"
                            }, marketPositionValues(false)))), React.createElement("div", {
                      className: "block md:hidden pt-5"
                    }, React.createElement("div", {
                          className: "px-8"
                        }, liquidityRatio(undefined)), React.createElement("div", {
                          className: "flex md:hidden"
                        }, marketPositionValues(true), marketPositionValues(false)), Belt_Option.isNone(marketIndexOption) ? mintButtons(undefined) : null)));
}

var make = MarketCard;

export {
  percentStr ,
  calculateBeta ,
  make ,
  
}
/* react Not a pure module */
