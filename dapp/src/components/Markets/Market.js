// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mint from "../../Mint.js";
import * as Next from "../../bindings/Next.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Ethers from "../../ethereum/Ethers.js";
import * as Redeem from "../Redeem/Redeem.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Queries from "../../data/Queries.js";
import * as Unstake from "../Unstake.js";
import * as Belt_Int from "bs-platform/lib/es6/belt_Int.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as CONSTANTS from "../../CONSTANTS.js";
import * as DataHooks from "../../data/DataHooks.js";
import * as StakeForm from "../Stake/StakeForm.js";
import Link from "next/link";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as MarketCard from "./MarketCard.js";
import * as MiniLoader from "../UI/MiniLoader.js";
import * as PriceGraph from "../PriceGraph.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as RootProvider from "../../libraries/RootProvider.js";

function Market$Tab(Props) {
  var selectedOpt = Props.selected;
  var text = Props.text;
  var onClickOpt = Props.onClick;
  var selected = selectedOpt !== undefined ? selectedOpt : false;
  var onClick = onClickOpt !== undefined ? onClickOpt : (function (param) {
        
      });
  var bg = selected ? "bg-white" : "bg-gray-100";
  var opacity = selected ? "bg-opacity-70" : "opacity-70";
  var margin = selected ? "pb-1.5" : "mb-0.5";
  return React.createElement("li", {
              className: "mr-3 mb-0"
            }, React.createElement("div", {
                  className: bg + "  " + opacity + "  " + margin + " cursor-pointer inline-block rounded-t-lg py-1 px-4",
                  onClick: onClick
                }, text));
}

var Tab = {
  make: Market$Tab
};

function onlyIfAllSomeWithDefault4(list, $$default, fn) {
  var a = list[0];
  if (a === undefined) {
    return $$default;
  }
  var b = list[1];
  if (b !== undefined) {
    var c = list[2];
    if (c !== undefined) {
      var d = list[3];
      if (d !== undefined) {
        return Curry._4(fn, Caml_option.valFromOption(a), Caml_option.valFromOption(b), Caml_option.valFromOption(c), Caml_option.valFromOption(d));
      }
      
    }
    
  }
  return $$default;
}

function onlyIfAllSomeWithDefault3(list, $$default, fn) {
  var a = list[0];
  if (a === undefined) {
    return $$default;
  }
  var b = list[1];
  if (b === undefined) {
    return $$default;
  }
  var c = list[2];
  if (c !== undefined) {
    return Curry._3(fn, Caml_option.valFromOption(a), Caml_option.valFromOption(b), Caml_option.valFromOption(c));
  } else {
    return $$default;
  }
}

function optAddressWithDefaultZero(optAddress) {
  return Belt_Option.getWithDefault(optAddress, CONSTANTS.zeroAddress);
}

var allTabs = [
  /* Mint */0,
  /* Redeem */1,
  /* Stake */2,
  /* Unstake */3
];

function tabToStr(tab) {
  switch (tab) {
    case /* Mint */0 :
        return "Mint";
    case /* Redeem */1 :
        return "Redeem";
    case /* Stake */2 :
        return "Stake";
    case /* Unstake */3 :
        return "Unstake";
    
  }
}

function strToTab(tab) {
  var match = tab.toLowerCase();
  switch (match) {
    case "mint" :
        return /* Mint */0;
    case "redeem" :
        return /* Redeem */1;
    case "stake" :
        return /* Stake */2;
    case "unstake" :
        return /* Unstake */3;
    default:
      return /* Mint */0;
  }
}

function useUserHasBalances(user, marketInfo) {
  var userOrZeroAddress = Belt_Option.getWithDefault(user, CONSTANTS.zeroAddress);
  var match = Belt_Option.mapWithDefault(marketInfo, [
        CONSTANTS.zeroAddress,
        CONSTANTS.zeroAddress
      ], (function (param) {
          return [
                  param.longAddress,
                  param.shortAddress
                ];
        }));
  var hasLongBalance = DataHooks.Util.graphResponseToOption(DataHooks.useSyntheticTokenBalanceOrZero(userOrZeroAddress, match[0]));
  var hasShortBalance = DataHooks.Util.graphResponseToOption(DataHooks.useSyntheticTokenBalanceOrZero(userOrZeroAddress, match[1]));
  return onlyIfAllSomeWithDefault4([
              user,
              marketInfo,
              hasShortBalance,
              hasLongBalance
            ], undefined, (function (param, param$1, longBalance, shortBalance) {
                return {
                        hasLong: longBalance.gt(CONSTANTS.zeroBN),
                        hasShort: shortBalance.gt(CONSTANTS.zeroBN)
                      };
              }));
}

function useUserHasStakes(user, marketInfo) {
  var userOrZeroAddress = Belt_Option.getWithDefault(user, CONSTANTS.zeroAddress);
  var userStakes = DataHooks.Util.graphResponseToOption(DataHooks.useStakesForUser(Ethers.Utils.ethAdrToLowerStr(userOrZeroAddress)));
  return onlyIfAllSomeWithDefault3([
              user,
              marketInfo,
              userStakes
            ], undefined, (function (param, marketInfo, stakes) {
                return Belt_Array.reduce(stakes, {
                            hasLong: false,
                            hasShort: false
                          }, (function (previousAnswer, param) {
                              var tokenAddress = param.currentStake.syntheticToken.tokenAddress;
                              return {
                                      hasLong: previousAnswer.hasLong || Caml_obj.caml_equal(tokenAddress, marketInfo.longAddress),
                                      hasShort: previousAnswer.hasShort || Caml_obj.caml_equal(tokenAddress, marketInfo.shortAddress)
                                    };
                            }));
              }));
}

function useMarketInfo(param) {
  var markets = Curry.app(Queries.MarketDetails.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var router = Router.useRouter();
  var marketIndex = Belt_Option.getWithDefault(Js_dict.get(router.query, "marketIndex"), "1");
  var response = DataHooks.Util.queryToResponse(markets);
  if (typeof response === "number") {
    return /* Loading */0;
  }
  if (response.TAG === /* GraphError */0) {
    return {
            TAG: 0,
            _0: response._0,
            [Symbol.for("name")]: "GraphError"
          };
  }
  var optFirstMarket = Belt_Array.get(response._0.syntheticMarkets, Belt_Option.getWithDefault(Belt_Int.fromString(marketIndex), 1) - 1 | 0);
  return Belt_Option.mapWithDefault(optFirstMarket, {
              TAG: 0,
              _0: "Market doesn't exist",
              [Symbol.for("name")]: "GraphError"
            }, (function (market) {
                var match = market.syntheticShort;
                var match$1 = market.syntheticLong;
                return {
                        TAG: 1,
                        _0: {
                          longId: match$1.id,
                          shortId: match.id,
                          marketName: market.name,
                          marketSymbol: market.symbol,
                          longAddress: match$1.tokenAddress,
                          shortAddress: match.tokenAddress
                        },
                        [Symbol.for("name")]: "Response"
                      };
              }));
}

function isActuallyLong(userPositions, isLong) {
  if (userPositions !== undefined) {
    if (userPositions.hasLong && userPositions.hasShort) {
      return isLong;
    } else if (userPositions.hasLong) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
}

function onlyIfSomeTokensWithDefault(userHasPositions, component, $$default) {
  return Belt_Option.mapWithDefault(userHasPositions, React.createElement(MiniLoader.make, {}), (function (userPos) {
                if (userPos.hasLong || userPos.hasShort) {
                  return component;
                } else {
                  return $$default;
                }
              }));
}

function header(marketInfo) {
  if (typeof marketInfo === "number") {
    return null;
  }
  if (marketInfo.TAG === /* GraphError */0) {
    return null;
  }
  var match = marketInfo._0;
  return React.createElement("div", {
              className: "flex justify-between mb-2 pt-6 pl-6"
            }, match.marketName + " (" + match.marketSymbol + ")");
}

function Market$MarketInteractionCard$MaybeSelectOptions(Props) {
  var userHasPositions = Props.userHasPositions;
  var isLong = Props.isLong;
  var marketInfo = Props.marketInfo;
  var hasBothTokens = userHasPositions.hasLong && userHasPositions.hasShort;
  var router = Router.useRouter();
  return Belt_Option.mapWithDefault(marketInfo, null, (function (marketInfo) {
                var onChangeSide = function ($$event) {
                  router.query["actionOption"] = $$event.target.value;
                  router.query["token"] = isLong ? Ethers.Utils.ethAdrToLowerStr(marketInfo.longAddress) : Ethers.Utils.ethAdrToLowerStr(marketInfo.shortAddress);
                  return Next.Router.pushObjShallow(router, {
                              pathname: router.pathname,
                              query: router.query
                            });
                };
                if (hasBothTokens) {
                  return React.createElement("div", {
                              className: "px-6"
                            }, React.createElement("select", {
                                  className: "trade-select",
                                  name: "longshort",
                                  value: isLong ? "long" : "short",
                                  onChange: onChangeSide
                                }, React.createElement("option", {
                                      value: "long"
                                    }, "Long 🐮"), React.createElement("option", {
                                      value: "short"
                                    }, "Short 🐻")));
                } else {
                  return null;
                }
              }));
}

var MaybeSelectOptions = {
  make: Market$MarketInteractionCard$MaybeSelectOptions
};

function wrapper(children) {
  return React.createElement("div", {
              className: "pb-6 px-6"
            }, children);
}

function Market$MarketInteractionCard$StakeInteractionWrapper(Props) {
  var isLong = Props.isLong;
  var marketInfo = Props.marketInfo;
  var user = Props.user;
  var optMarketInfo = DataHooks.Util.graphResponseToOption(marketInfo);
  var userHasPositions = useUserHasBalances(user, optMarketInfo);
  var actuallyLong = isActuallyLong(userHasPositions, isLong);
  var tmp;
  if (typeof marketInfo === "number") {
    tmp = React.createElement(MiniLoader.make, {});
  } else if (marketInfo.TAG === /* GraphError */0) {
    tmp = React.createElement("div", undefined, marketInfo._0);
  } else {
    var match = marketInfo._0;
    var tokenId = actuallyLong ? match.longId : match.shortId;
    tmp = wrapper(React.createElement(StakeForm.make, {
              tokenId: tokenId
            }));
  }
  return React.createElement(React.Fragment, undefined, onlyIfSomeTokensWithDefault(userHasPositions, React.createElement(React.Fragment, undefined, Belt_Option.mapWithDefault(userHasPositions, null, (function (userPos) {
                            return React.createElement(Market$MarketInteractionCard$MaybeSelectOptions, {
                                        userHasPositions: userPos,
                                        isLong: isLong,
                                        marketInfo: optMarketInfo
                                      });
                          })), tmp), React.createElement("div", {
                      className: "pl-6"
                    }, "No tokens in this market to stake")));
}

var StakeInteractionWrapper = {
  make: Market$MarketInteractionCard$StakeInteractionWrapper
};

function Market$MarketInteractionCard$UnstakeInteractionWrapper(Props) {
  var isLong = Props.isLong;
  var marketInfo = Props.marketInfo;
  var user = Props.user;
  var optMarketInfo = DataHooks.Util.graphResponseToOption(marketInfo);
  var userHasPositions = useUserHasStakes(user, optMarketInfo);
  var actuallyLong = isActuallyLong(userHasPositions, isLong);
  var tmp;
  if (typeof marketInfo === "number") {
    tmp = React.createElement(MiniLoader.make, {});
  } else if (marketInfo.TAG === /* GraphError */0) {
    tmp = React.createElement("div", undefined, marketInfo._0);
  } else {
    var match = marketInfo._0;
    var tokenId = actuallyLong ? match.longId : match.shortId;
    tmp = wrapper(React.createElement(Unstake.make, {
              tokenId: tokenId
            }));
  }
  return React.createElement(React.Fragment, undefined, onlyIfSomeTokensWithDefault(userHasPositions, React.createElement(React.Fragment, undefined, Belt_Option.mapWithDefault(userHasPositions, null, (function (userPos) {
                            return React.createElement(Market$MarketInteractionCard$MaybeSelectOptions, {
                                        userHasPositions: userPos,
                                        isLong: isLong,
                                        marketInfo: optMarketInfo
                                      });
                          })), tmp), React.createElement("div", {
                      className: "p-6"
                    }, "No stakes in this market to unstake")));
}

var UnstakeInteractionWrapper = {
  make: Market$MarketInteractionCard$UnstakeInteractionWrapper
};

function Market$MarketInteractionCard(Props) {
  var router = Router.useRouter();
  var user = RootProvider.useCurrentUser(undefined);
  var selectedTab = Belt_Option.getWithDefault(Js_dict.get(router.query, "tab"), "Mint");
  var match = React.useState(function () {
        return strToTab(selectedTab);
      });
  var setSelected = match[1];
  var selected = match[0];
  var actionOption = Belt_Option.getWithDefault(Js_dict.get(router.query, "actionOption"), "short");
  var longSelected = actionOption === "long";
  var marketInfo = useMarketInfo(undefined);
  var tmp;
  switch (selected) {
    case /* Mint */0 :
        tmp = wrapper(React.createElement(Mint.Mint.make, {}));
        break;
    case /* Redeem */1 :
        tmp = wrapper(React.createElement(Redeem.make, {}));
        break;
    case /* Stake */2 :
        tmp = React.createElement(Market$MarketInteractionCard$StakeInteractionWrapper, {
              isLong: longSelected,
              marketInfo: marketInfo,
              user: user
            });
        break;
    case /* Unstake */3 :
        tmp = React.createElement(Market$MarketInteractionCard$UnstakeInteractionWrapper, {
              isLong: longSelected,
              marketInfo: marketInfo,
              user: user
            });
        break;
    
  }
  return React.createElement("div", {
              className: "flex-1 p-1 mb-2 "
            }, React.createElement("ul", {
                  className: "list-reset flex items-end"
                }, Belt_Array.map(allTabs, (function (tab) {
                        return React.createElement(Market$Tab, {
                                    selected: tab === selected,
                                    text: tabToStr(tab),
                                    onClick: (function (param) {
                                        Curry._1(setSelected, (function (param) {
                                                return tab;
                                              }));
                                        router.query["tab"] = tabToStr(tab).toLowerCase();
                                        return Next.Router.pushObjShallow(router, {
                                                    pathname: router.pathname,
                                                    query: router.query
                                                  });
                                      }),
                                    key: tabToStr(tab)
                                  });
                      }))), React.createElement("div", {
                  className: "rounded-b-lg min-h-market-interaction-card rounded-r-lg flex flex-col bg-white bg-opacity-70 shadow-lg"
                }, header(marketInfo), tmp));
}

var MarketInteractionCard_defaultUserHasPositions = {
  hasLong: false,
  hasShort: false
};

var MarketInteractionCard = {
  allTabs: allTabs,
  tabToStr: tabToStr,
  strToTab: strToTab,
  defaultUserHasPositions: MarketInteractionCard_defaultUserHasPositions,
  useUserHasBalances: useUserHasBalances,
  useUserHasStakes: useUserHasStakes,
  useMarketInfo: useMarketInfo,
  isActuallyLong: isActuallyLong,
  onlyIfSomeTokensWithDefault: onlyIfSomeTokensWithDefault,
  header: header,
  MaybeSelectOptions: MaybeSelectOptions,
  wrapper: wrapper,
  StakeInteractionWrapper: StakeInteractionWrapper,
  UnstakeInteractionWrapper: UnstakeInteractionWrapper,
  make: Market$MarketInteractionCard
};

function Market(Props) {
  var marketData = Props.marketData;
  return React.createElement("div", undefined, React.createElement(Link, {
                  href: "/markets",
                  children: React.createElement("div", {
                        className: "uppercase text-sm text-gray-600 hover:text-gray-500 cursor-pointer my-2"
                      }, "◀", React.createElement("span", {
                            className: "text-xs"
                          }, " Back to markets"))
                }), React.createElement("div", {
                  className: "flex flex-col md:flex-row justify-center items-stretch"
                }, React.createElement(Market$MarketInteractionCard, {}), React.createElement("div", {
                      className: "flex-1 w-full min-h-10 p-1 mb-2 ml-8 rounded-lg flex flex-col bg-white bg-opacity-70 shadow-lg"
                    }, React.createElement(PriceGraph.make, {
                          marketName: marketData.name
                        }))), React.createElement(MarketCard.make, {
                  marketData: marketData
                }));
}

var make = Market;

export {
  Tab ,
  onlyIfAllSomeWithDefault4 ,
  onlyIfAllSomeWithDefault3 ,
  optAddressWithDefaultZero ,
  MarketInteractionCard ,
  make ,
  
}
/* Mint Not a pure module */
