// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");

var buttonOuterStyle = "relative my-1";

function buttonShaddowStyle(active) {
  return (
          active ? "" : "transform translate-x-1 translate-y-1"
        ) + " w-full bg-primary inline-block";
}

function buttonTopStyle(active) {
  return (
          active ? "text-white bg-primary outline-none" : "transform -translate-x-1 -translate-y-1 hover:-translate-x-0.5 hover:-translate-y-0.5 active:translate-x-0 active:translate-y-0 active:text-white active:bg-primary active:outline-none"
        ) + " w-full transition ease-linear duration-0 italic cursor-pointer bg-white border text-primary uppercase tracking-btn-text";
}

function Button$Tiny(Props) {
  var onClickOpt = Props.onClick;
  var children = Props.children;
  var disabledOpt = Props.disabled;
  var activeOpt = Props.active;
  var onClick = onClickOpt !== undefined ? onClickOpt : (function (param) {
        
      });
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var active = activeOpt !== undefined ? activeOpt : false;
  return React.createElement("div", {
              className: "flex"
            }, React.createElement("div", {
                  className: buttonOuterStyle + " w-full"
                }, React.createElement("div", {
                      className: buttonShaddowStyle(active) + " h-full"
                    }, React.createElement("button", {
                          className: buttonTopStyle(active) + " min-h-full focus:outline-none px-2 text-xxs " + (
                            disabled ? " transform -translate-x-0.5 -translate-y-0.5 bg-gray-200 cursor-not-allowed" : ""
                          ),
                          disabled: disabled,
                          onClick: onClick
                        }, children))));
}

var Tiny = {
  make: Button$Tiny
};

function Button$Small(Props) {
  var onClickOpt = Props.onClick;
  var children = Props.children;
  var disabledOpt = Props.disabled;
  var activeOpt = Props.active;
  var onClick = onClickOpt !== undefined ? onClickOpt : (function (param) {
        
      });
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var active = activeOpt !== undefined ? activeOpt : false;
  return React.createElement("div", {
              className: buttonOuterStyle
            }, React.createElement("div", {
                  className: buttonShaddowStyle(active) + " border"
                }, React.createElement("button", {
                      className: buttonTopStyle(active) + " p-2 text-sm focus:outline-none " + (
                        disabled ? " transform -translate-x-0.5 -translate-y-0.5 bg-gray-200 cursor-not-allowed" : ""
                      ),
                      disabled: disabled,
                      onClick: onClick
                    }, children)));
}

var Small = {
  make: Button$Small
};

function Button$Element(Props) {
  var onClickOpt = Props.onClick;
  var children = Props.children;
  var disabledOpt = Props.disabled;
  var activeOpt = Props.active;
  var onClick = onClickOpt !== undefined ? onClickOpt : (function (param) {
        
      });
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var active = activeOpt !== undefined ? activeOpt : false;
  return React.createElement("div", {
              className: "inline-block"
            }, React.createElement("div", {
                  className: buttonOuterStyle
                }, React.createElement("div", {
                      className: buttonShaddowStyle(active) + " border-0 "
                    }, React.createElement("button", {
                          className: buttonTopStyle(active) + " p-3 focus:outline-none text-base mx-auto " + (
                            disabled ? " transform -translate-x-0.5 -translate-y-0.5 bg-gray-200 cursor-not-allowed" : ""
                          ),
                          disabled: disabled,
                          onClick: onClick
                        }, children))));
}

var $$Element = {
  make: Button$Element
};

function Button(Props) {
  var onClickOpt = Props.onClick;
  var children = Props.children;
  var disabledOpt = Props.disabled;
  var activeOpt = Props.active;
  var onClick = onClickOpt !== undefined ? onClickOpt : (function (param) {
        
      });
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  var active = activeOpt !== undefined ? activeOpt : false;
  return React.createElement("div", {
              className: buttonOuterStyle
            }, React.createElement("div", {
                  className: buttonShaddowStyle(active) + " border-0"
                }, React.createElement("button", {
                      className: buttonTopStyle(active) + " p-3 focus:outline-none text-base " + (
                        disabled ? " transform -translate-x-0.5 -translate-y-0.5 bg-gray-200 cursor-not-allowed" : ""
                      ),
                      disabled: disabled,
                      onClick: onClick
                    }, children)));
}

var make = Button;

exports.buttonOuterStyle = buttonOuterStyle;
exports.buttonShaddowStyle = buttonShaddowStyle;
exports.buttonTopStyle = buttonTopStyle;
exports.Tiny = Tiny;
exports.Small = Small;
exports.$$Element = $$Element;
exports.make = make;
/* react Not a pure module */
