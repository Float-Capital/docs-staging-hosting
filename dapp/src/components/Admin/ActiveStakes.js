// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Globals from "../../libraries/Globals.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as FormatMoney from "../UI/FormatMoney.js";
import * as DataFetchers from "../Data/DataFetchers.js";
import * as RootProvider from "../../libraries/RootProvider.js";

function ActiveStakes(Props) {
  var currentUser = RootProvider.useCurrentUserExn(undefined);
  var activeStakes = DataFetchers.useUsersStakes(currentUser);
  var match = activeStakes.data;
  if (match === undefined) {
    if (activeStakes.error !== undefined) {
      return "Error";
    } else {
      return "Loading";
    }
  }
  var currentStakes = match.currentStakes;
  if (currentStakes.length !== 0) {
    return React.createElement(React.Fragment, undefined, Belt_Array.map(currentStakes, (function (param) {
                      var match = param.currentStake;
                      var match$1 = match.tokenType;
                      var match$2 = match$1.syntheticMarket;
                      var amountFormatted = FormatMoney.formatEther(match.amount);
                      var totalStakedFormatted = FormatMoney.formatEther(match$1.totalStaked);
                      return React.createElement("div", undefined, React.createElement("h1", undefined, match$2.name + "(" + match$2.symbol + ")"), React.createElement("p", undefined, "Stake of " + amountFormatted + " for " + match$1.tokenType + " at address " + Globals.ethAdrToStr(match$1.tokenAddress) + ", which is " + (
                                      match.withdrawn ? "withdrawn" : "still active"
                                    ) + ". This stake was created at " + match.timestamp.toString() + ", in transaction " + match.creationTxHash + ". Total staked: " + totalStakedFormatted));
                    })));
  } else {
    return "NO ACTIVE STAKES";
  }
}

var make = ActiveStakes;

export {
  make ,
  
}
/* react Not a pure module */
