// Generated by ReScript, PLEASE EDIT WITH CARE

import Swr from "swr";
import * as Config from "../../Config.js";
import * as Contracts from "../../ethereum/Contracts.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as RootProvider from "../../libraries/RootProvider.js";
import * as ContractActions from "../../ethereum/ContractActions.js";

function useDaiBalance(param) {
  var optChainId = RootProvider.useChainId(undefined);
  var optUserId = RootProvider.useCurrentUser(undefined);
  var optProviderOrSigner = ContractActions.useProviderOrSigner(undefined);
  var fetchBalanceFunction = function (param, chainId, userId) {
    var providerOrSigner = Belt_Option.getExn(optProviderOrSigner);
    console.log([
          "The dai contract address",
          Config.daiContractAddress(String(chainId))
        ]);
    return Contracts.Erc20.make(Config.daiContractAddress(String(chainId)), providerOrSigner).balanceOf(userId);
  };
  return Swr((function (param) {
                if (optChainId !== undefined && optProviderOrSigner !== undefined && optUserId !== undefined) {
                  return [
                          "chainBalance",
                          optChainId,
                          Caml_option.valFromOption(optUserId)
                        ];
                }
                
              }), fetchBalanceFunction, undefined);
}

function useErc20Balance(erc20Address) {
  var optChainId = RootProvider.useChainId(undefined);
  var optUserId = RootProvider.useCurrentUser(undefined);
  var optProviderOrSigner = ContractActions.useProviderOrSigner(undefined);
  var fetchBalanceFunction = function (param, param$1, param$2, userId) {
    var providerOrSigner = Belt_Option.getExn(optProviderOrSigner);
    return Contracts.Erc20.make(erc20Address, providerOrSigner).balanceOf(userId);
  };
  return Swr((function (param) {
                if (optChainId !== undefined && optProviderOrSigner !== undefined && optUserId !== undefined) {
                  return [
                          "erc20balance",
                          erc20Address,
                          optChainId,
                          Caml_option.valFromOption(optUserId)
                        ];
                }
                
              }), fetchBalanceFunction, undefined);
}

function useERC20Approved(erc20Address, spender) {
  var optChainId = RootProvider.useChainId(undefined);
  var optUserId = RootProvider.useCurrentUser(undefined);
  var optProviderOrSigner = ContractActions.useProviderOrSigner(undefined);
  var fetchBalanceFunction = function (param, param$1, param$2, param$3, userId) {
    var providerOrSigner = Belt_Option.getExn(optProviderOrSigner);
    return Contracts.Erc20.make(erc20Address, providerOrSigner).allowance(userId, spender);
  };
  return Swr((function (param) {
                if (optChainId !== undefined && optProviderOrSigner !== undefined && optUserId !== undefined) {
                  return [
                          "allowance",
                          erc20Address,
                          spender,
                          optChainId,
                          Caml_option.valFromOption(optUserId)
                        ];
                }
                
              }), fetchBalanceFunction, undefined);
}

export {
  useDaiBalance ,
  useErc20Balance ,
  useERC20Approved ,
  
}
/* swr Not a pure module */
