// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Misc from "../../libraries/Misc.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Ethers from "ethers";
import * as Globals from "../../libraries/Globals.js";
import * as MintDai from "./MintDai.js";
import * as Queries from "../../libraries/Queries.js";
import * as MintLong from "./MintLong.js";
import * as MintShort from "./MintShort.js";
import * as ApproveDai from "./ApproveDai.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as RedeemSynth from "./RedeemSynth.js";
import * as ActiveStakes from "./ActiveStakes.js";
import * as MintAndStake from "./MintAndStake.js";
import * as RootProvider from "../../libraries/RootProvider.js";

var context = React.createContext(undefined);

var privKeyStorageId = "admin-private-key";

function AdminTestingPortal$AdminContext$Provider(Props) {
  var children = Props.children;
  var getPrivateKeyFromLocalStorage = function (__x) {
    return Caml_option.null_to_opt(__x.getItem(privKeyStorageId));
  };
  var optAuthHeader = Belt_Option.flatMap(Misc.optLocalstorage, getPrivateKeyFromLocalStorage);
  var match = React.useState(function () {
        return Belt_Option.isSome(optAuthHeader);
      });
  var setAuthSet = match[1];
  var authSet = match[0];
  var match$1 = React.useState(function () {
        return Belt_Option.getWithDefault(optAuthHeader, "");
      });
  var setAuthHeader = match$1[1];
  var authHeader = match$1[0];
  var match$2 = React.useState(function () {
        return true;
      });
  var setPrivateKeyMode = match$2[1];
  var privateKeyMode = match$2[0];
  var onChange = function (e) {
    return Curry._1(setAuthHeader, e.target.value);
  };
  var provider = context.Provider;
  var optCurrentUser = RootProvider.useCurrentUser(undefined);
  var optProvider = RootProvider.useWeb3(undefined);
  var optEthersSigner = Belt_Option.flatMap(optProvider, (function (provider) {
          if (privateKeyMode) {
            if (authSet) {
              return Belt_Option.map(optAuthHeader, (function (authHeader) {
                            return new Ethers.Wallet(authHeader, provider);
                          }));
            } else {
              return ;
            }
          } else {
            return Belt_Option.flatMap(optCurrentUser, (function (usersAddress) {
                          return provider.getSigner(usersAddress);
                        }));
          }
        }));
  var authDisplay = React.createElement("div", undefined, optCurrentUser !== undefined ? React.createElement(React.Fragment, undefined, React.createElement("span", {
                  className: "inline-flex"
                }, React.createElement("p", undefined, "Use injectod provider?"), React.createElement("input", {
                      checked: !privateKeyMode,
                      type: "checkbox",
                      onChange: (function (param) {
                          return Curry._1(setPrivateKeyMode, (function (param) {
                                        return !privateKeyMode;
                                      }));
                        })
                    })), React.createElement("br", undefined)) : null, authSet || !privateKeyMode ? React.createElement(React.Fragment, undefined, privateKeyMode ? React.createElement(React.Fragment, undefined, React.createElement("button", {
                        onClick: (function (param) {
                            return Curry._1(setAuthSet, (function (param) {
                                          return false;
                                        }));
                          })
                      }, "Edit your auth key"), React.createElement("br", undefined)) : null, children) : React.createElement("form", {
              onSubmit: (function ($$event) {
                  localStorage.setItem(privKeyStorageId, authHeader);
                  $$event.preventDefault();
                  return Curry._1(setAuthSet, (function (param) {
                                return true;
                              }));
                })
            }, React.createElement("label", undefined, "Auth Key: "), React.createElement("input", {
                  name: "auth_key",
                  type: "text",
                  onChange: onChange
                }), React.createElement("button", {
                  type: "submit"
                }, "submit"), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement("br", undefined), React.createElement("p", undefined, "NOTE: you may need to reload the webpage after doing this to activate the key")));
  return React.createElement(provider, {
              value: optEthersSigner,
              children: authDisplay
            });
}

var Provider = {
  privKeyStorageId: privKeyStorageId,
  make: AdminTestingPortal$AdminContext$Provider
};

var AdminContext = {
  context: context,
  Provider: Provider
};

function AdminTestingPortal$AdminActions(Props) {
  var optEthersWallet = React.useContext(context);
  var optNetwork = RootProvider.useChainId(undefined);
  var marketDetailsQuery = Curry.app(Queries.MarketDetails.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  if (optEthersWallet === undefined) {
    return React.createElement("h1", undefined, "No provider is selected. Even if you are using your own private key you still need to login with metamask for the connection to ethereum.");
  }
  var match = marketDetailsQuery.data;
  return React.createElement("div", undefined, React.createElement("h1", undefined, "Test Functions"), React.createElement("div", {
                  className: "border-dashed border-4 border-light-red-500"
                }, React.createElement(ApproveDai.make, {}), optNetwork !== undefined ? (
                    optNetwork !== 97 ? React.createElement(MintDai.make, {
                            ethersWallet: optEthersWallet
                          }) : null
                  ) : React.createElement(MintDai.make, {
                        ethersWallet: optEthersWallet
                      }), React.createElement("hr", undefined), React.createElement("h1", undefined, "Market specific Functions:"), marketDetailsQuery.loading ? "Loading..." : (
                    marketDetailsQuery.error !== undefined ? "Error loading data" : (
                        match !== undefined ? React.createElement(React.Fragment, undefined, Belt_Array.map(match.syntheticMarkets, (function (param) {
                                      var marketIndex = param.marketIndex;
                                      var symbol = param.symbol;
                                      return React.createElement("div", {
                                                  key: symbol,
                                                  className: "w-full"
                                                }, React.createElement("h1", {
                                                      className: "w-full text-5xl underline text-center"
                                                    }, "Market " + param.name + " (" + symbol + ")"), React.createElement("div", {
                                                      className: "flex justify-between items-center w-full"
                                                    }, React.createElement("div", undefined, React.createElement("h1", undefined, "Long(" + Globals.ethAdrToStr(param.syntheticLong.tokenAddress) + ")"), React.createElement(MintLong.make, {
                                                              marketIndex: marketIndex
                                                            }), React.createElement(RedeemSynth.make, {
                                                              isLong: true,
                                                              marketIndex: marketIndex
                                                            }), React.createElement(MintAndStake.make, {
                                                              marketIndex: marketIndex,
                                                              isLong: true
                                                            })), React.createElement("div", undefined, React.createElement("h1", undefined, "Short(" + Globals.ethAdrToStr(param.syntheticShort.tokenAddress) + ")"), React.createElement(MintShort.make, {
                                                              marketIndex: marketIndex
                                                            }), React.createElement(RedeemSynth.make, {
                                                              isLong: false,
                                                              marketIndex: marketIndex
                                                            }), React.createElement(MintAndStake.make, {
                                                              marketIndex: marketIndex,
                                                              isLong: false
                                                            }))));
                                    }))) : "You might think this is impossible, but depending on the situation it might not be!"
                      )
                  ), React.createElement("hr", undefined), React.createElement("div", undefined, React.createElement("h1", undefined, "Users active stakes"), React.createElement(ActiveStakes.make, {}))));
}

var AdminActions = {
  make: AdminTestingPortal$AdminActions
};

function $$default(param) {
  return React.createElement(AdminTestingPortal$AdminContext$Provider, {
              children: React.createElement(AdminTestingPortal$AdminActions, {})
            });
}

export {
  AdminContext ,
  AdminActions ,
  $$default ,
  $$default as default,
  
}
/* context Not a pure module */
