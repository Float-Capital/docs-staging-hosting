// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Misc from "../libraries/Misc.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Client from "./Client.js";
import * as Queries from "./Queries.js";
import * as CONSTANTS from "../CONSTANTS.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";

function useGetStakes(param) {
  var stakeDetailsQuery = Curry.app(Queries.StakingDetails.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var client = Client.useApolloClient(undefined);
  React.useEffect((function () {
          Curry._6(client.rescript_query, {
                  query: Queries.StakingDetails.query,
                  Raw: Queries.StakingDetails.Raw,
                  parse: Queries.StakingDetails.parse,
                  serialize: Queries.StakingDetails.serialize,
                  serializeVariables: Queries.StakingDetails.serializeVariables
                }, undefined, undefined, undefined, undefined, undefined).then(function (queryResult) {
                if (queryResult.TAG !== /* Ok */0) {
                  return ;
                }
                Belt_Array.map(queryResult._0.data.syntheticMarkets, (function (param) {
                        var syntheticShort = param.syntheticShort;
                        var syntheticLong = param.syntheticLong;
                        Curry._6(client.rescript_writeQuery, {
                              query: Queries.SyntheticToken.query,
                              Raw: Queries.SyntheticToken.Raw,
                              parse: Queries.SyntheticToken.parse,
                              serialize: Queries.SyntheticToken.serialize,
                              serializeVariables: Queries.SyntheticToken.serializeVariables
                            }, undefined, {
                              syntheticToken: syntheticLong
                            }, undefined, undefined, {
                              tokenId: syntheticLong.id
                            });
                        Curry._6(client.rescript_writeQuery, {
                              query: Queries.SyntheticToken.query,
                              Raw: Queries.SyntheticToken.Raw,
                              parse: Queries.SyntheticToken.parse,
                              serialize: Queries.SyntheticToken.serialize,
                              serializeVariables: Queries.SyntheticToken.serializeVariables
                            }, undefined, {
                              syntheticToken: syntheticShort
                            }, undefined, undefined, {
                              tokenId: syntheticShort.id
                            });
                        
                      }));
                
              });
          
        }), []);
  return stakeDetailsQuery;
}

function useFloatDetailsForUser(userId, synthToken) {
  var currentTimestamp = Misc.Time.useCurrentTimeBN(1000);
  var floatDetailsQuery = Curry.app(Queries.UsersFloatDetails.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        {
          userId: userId,
          synthToken: synthToken
        }
      ]);
  var match = floatDetailsQuery.data;
  if (match !== undefined) {
    var match$1 = match.currentStakes;
    if (match$1.length === 1) {
      var match$2 = match$1[0];
      var match$3 = match.states;
      if (match$3.length === 1) {
        var amount = match$2.currentStake.amount;
        var match$4 = match$2.lastMintState;
        var match$5 = match$3[0];
        var claimableFloat = match$5.accumulativeFloatPerToken.sub(match$4.accumulativeFloatPerToken).mul(amount).div(CONSTANTS.tenToThe42);
        var predictedFloat = currentTimestamp.sub(match$4.timestamp).mul(match$5.floatRatePerTokenOverInterval).mul(amount).div(CONSTANTS.tenToThe42);
        return {
                TAG: 1,
                _0: [
                  claimableFloat,
                  predictedFloat
                ],
                [Symbol.for("name")]: "Response"
              };
      }
      
    }
    
  }
  var match$6 = floatDetailsQuery.error;
  if (match$6 !== undefined) {
    return {
            TAG: 0,
            _0: match$6.message,
            [Symbol.for("name")]: "GraphError"
          };
  } else {
    return /* Loading */0;
  }
}

function useStakesForUser(userId) {
  var activeStakesQuery = Curry.app(Queries.UsersStakes.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        {
          userId: userId
        }
      ]);
  var match = activeStakesQuery.data;
  if (match !== undefined) {
    return {
            TAG: 1,
            _0: match.currentStakes,
            [Symbol.for("name")]: "Response"
          };
  }
  var match$1 = activeStakesQuery.error;
  if (match$1 !== undefined) {
    return {
            TAG: 0,
            _0: match$1.message,
            [Symbol.for("name")]: "GraphError"
          };
  } else {
    return /* Loading */0;
  }
}

export {
  useGetStakes ,
  useFloatDetailsForUser ,
  useStakesForUser ,
  
}
/* Misc Not a pure module */
