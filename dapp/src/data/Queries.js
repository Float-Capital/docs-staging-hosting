// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var GraphQL_PPX = require("@reasonml-community/graphql-ppx/bucklescript/GraphQL_PPX.js");
var GqlConverters = require("../libraries/GqlConverters.js");
var ApolloClient__React_Hooks_UseQuery = require("rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.js");

var Raw = {};

var query = (require("@apollo/client").gql`
  fragment BasicUserInfo on User   {
    __typename
    id
    totalMintedFloat
    floatTokenBalance
    numberOfTransactions
    timestampJoined
    tokenMints  {
      __typename
      tokensMinted
    }
  }
`);

function parse(value) {
  var value$1 = value.tokenMints;
  return {
          __typename: value.__typename,
          id: value.id,
          totalMintedFloat: GqlConverters.$$BigInt.parse(value.totalMintedFloat),
          floatTokenBalance: GqlConverters.$$BigInt.parse(value.floatTokenBalance),
          numberOfTransactions: GqlConverters.$$BigInt.parse(value.numberOfTransactions),
          timestampJoined: GqlConverters.$$BigInt.parse(value.timestampJoined),
          tokenMints: value$1.map(function (value) {
                return {
                        __typename: value.__typename,
                        tokensMinted: GqlConverters.$$BigInt.parse(value.tokensMinted)
                      };
              })
        };
}

function serialize(value) {
  var value$1 = value.tokenMints;
  var tokenMints = value$1.map(function (value) {
        var value$1 = value.tokensMinted;
        var value$2 = GqlConverters.$$BigInt.serialize(value$1);
        var value$3 = value.__typename;
        return {
                __typename: value$3,
                tokensMinted: value$2
              };
      });
  var value$2 = value.timestampJoined;
  var value$3 = GqlConverters.$$BigInt.serialize(value$2);
  var value$4 = value.numberOfTransactions;
  var value$5 = GqlConverters.$$BigInt.serialize(value$4);
  var value$6 = value.floatTokenBalance;
  var value$7 = GqlConverters.$$BigInt.serialize(value$6);
  var value$8 = value.totalMintedFloat;
  var value$9 = GqlConverters.$$BigInt.serialize(value$8);
  var value$10 = value.id;
  var value$11 = value.__typename;
  return {
          __typename: value$11,
          id: value$10,
          totalMintedFloat: value$9,
          floatTokenBalance: value$7,
          numberOfTransactions: value$5,
          timestampJoined: value$3,
          tokenMints: tokenMints
        };
}

function verifyArgsAndParse(_BasicUserInfo, value) {
  return parse(value);
}

function verifyName(param) {
  
}

var BasicUserInfo = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  verifyArgsAndParse: verifyArgsAndParse,
  verifyName: verifyName
};

var Raw$1 = {};

var query$1 = (require("@apollo/client").gql`
  fragment LatestSynthPrice on LatestPrice   {
    __typename
    id
    price  {
      __typename
      price
      timeUpdated
    }
  }
`);

function parse$1(value) {
  var value$1 = value.price;
  return {
          __typename: value.__typename,
          id: value.id,
          price: {
            __typename: value$1.__typename,
            price: GqlConverters.$$BigInt.parse(value$1.price),
            timeUpdated: GqlConverters.$$BigInt.parse(value$1.timeUpdated)
          }
        };
}

function serialize$1(value) {
  var value$1 = value.price;
  var value$2 = value$1.timeUpdated;
  var value$3 = GqlConverters.$$BigInt.serialize(value$2);
  var value$4 = value$1.price;
  var value$5 = GqlConverters.$$BigInt.serialize(value$4);
  var value$6 = value$1.__typename;
  var price = {
    __typename: value$6,
    price: value$5,
    timeUpdated: value$3
  };
  var value$7 = value.id;
  var value$8 = value.__typename;
  return {
          __typename: value$8,
          id: value$7,
          price: price
        };
}

function verifyArgsAndParse$1(_LatestSynthPrice, value) {
  return parse$1(value);
}

function verifyName$1(param) {
  
}

var LatestSynthPrice = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  verifyArgsAndParse: verifyArgsAndParse$1,
  verifyName: verifyName$1
};

var Raw$2 = {};

var query$2 = (require("@apollo/client").gql`
  fragment LatestSystemStateBasic on SystemState   {
    __typename
    totalLockedLong
    totalLockedShort
    underlyingPrice  {
      __typename
      price  {
        __typename
        price
      }
    }
  }
`);

function parse$2(value) {
  var value$1 = value.underlyingPrice;
  var value$2 = value$1.price;
  return {
          __typename: value.__typename,
          totalLockedLong: GqlConverters.$$BigInt.parse(value.totalLockedLong),
          totalLockedShort: GqlConverters.$$BigInt.parse(value.totalLockedShort),
          underlyingPrice: {
            __typename: value$1.__typename,
            price: {
              __typename: value$2.__typename,
              price: GqlConverters.$$BigInt.parse(value$2.price)
            }
          }
        };
}

function serialize$2(value) {
  var value$1 = value.underlyingPrice;
  var value$2 = value$1.price;
  var value$3 = value$2.price;
  var value$4 = GqlConverters.$$BigInt.serialize(value$3);
  var value$5 = value$2.__typename;
  var price = {
    __typename: value$5,
    price: value$4
  };
  var value$6 = value$1.__typename;
  var underlyingPrice = {
    __typename: value$6,
    price: price
  };
  var value$7 = value.totalLockedShort;
  var value$8 = GqlConverters.$$BigInt.serialize(value$7);
  var value$9 = value.totalLockedLong;
  var value$10 = GqlConverters.$$BigInt.serialize(value$9);
  var value$11 = value.__typename;
  return {
          __typename: value$11,
          totalLockedLong: value$10,
          totalLockedShort: value$8,
          underlyingPrice: underlyingPrice
        };
}

function verifyArgsAndParse$2(_LatestSystemStateBasic, value) {
  return parse$2(value);
}

function verifyName$2(param) {
  
}

var LatestSystemStateBasic = {
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  verifyArgsAndParse: verifyArgsAndParse$2,
  verifyName: verifyName$2
};

var Raw$3 = {};

var query$3 = ((frag_0) => require("@apollo/client").gql`
  fragment LatestSystemStateInfo on SystemState   {
    __typename
    timestamp
    totalLockedLong
    totalLockedShort
    totalValueLocked
    longTokenPrice  {
      ...LatestSynthPrice
    }
    shortTokenPrice  {
      ...LatestSynthPrice
    }
  }
  ${frag_0}
`)(query$1);

function parse$3(value) {
  return {
          __typename: value.__typename,
          timestamp: GqlConverters.$$BigInt.parse(value.timestamp),
          totalLockedLong: GqlConverters.$$BigInt.parse(value.totalLockedLong),
          totalLockedShort: GqlConverters.$$BigInt.parse(value.totalLockedShort),
          totalValueLocked: GqlConverters.$$BigInt.parse(value.totalValueLocked),
          longTokenPrice: parse$1(value.longTokenPrice),
          shortTokenPrice: parse$1(value.shortTokenPrice)
        };
}

function serialize$3(value) {
  var value$1 = value.shortTokenPrice;
  var shortTokenPrice = serialize$1(value$1);
  var value$2 = value.longTokenPrice;
  var longTokenPrice = serialize$1(value$2);
  var value$3 = value.totalValueLocked;
  var value$4 = GqlConverters.$$BigInt.serialize(value$3);
  var value$5 = value.totalLockedShort;
  var value$6 = GqlConverters.$$BigInt.serialize(value$5);
  var value$7 = value.totalLockedLong;
  var value$8 = GqlConverters.$$BigInt.serialize(value$7);
  var value$9 = value.timestamp;
  var value$10 = GqlConverters.$$BigInt.serialize(value$9);
  var value$11 = value.__typename;
  return {
          __typename: value$11,
          timestamp: value$10,
          totalLockedLong: value$8,
          totalLockedShort: value$6,
          totalValueLocked: value$4,
          longTokenPrice: longTokenPrice,
          shortTokenPrice: shortTokenPrice
        };
}

function verifyArgsAndParse$3(_LatestSystemStateInfo, value) {
  return parse$3(value);
}

function verifyName$3(param) {
  
}

var LatestSystemStateInfo = {
  Raw: Raw$3,
  query: query$3,
  parse: parse$3,
  serialize: serialize$3,
  verifyArgsAndParse: verifyArgsAndParse$3,
  verifyName: verifyName$3
};

var Raw$4 = {};

var query$4 = ((frag_0) => require("@apollo/client").gql`
  fragment SyntheticMarketBasic on SyntheticMarket   {
    __typename
    id
    name
    symbol
    marketIndex
    oracleAddress
    latestSystemState  {
      ...LatestSystemStateBasic
    }
  }
  ${frag_0}
`)(query$2);

function parse$4(value) {
  return {
          __typename: value.__typename,
          id: value.id,
          name: value.name,
          symbol: value.symbol,
          marketIndex: GqlConverters.$$BigInt.parse(value.marketIndex),
          oracleAddress: GqlConverters.Address.parse(value.oracleAddress),
          latestSystemState: parse$2(value.latestSystemState)
        };
}

function serialize$4(value) {
  var value$1 = value.latestSystemState;
  var latestSystemState = serialize$2(value$1);
  var value$2 = value.oracleAddress;
  var value$3 = GqlConverters.Address.serialize(value$2);
  var value$4 = value.marketIndex;
  var value$5 = GqlConverters.$$BigInt.serialize(value$4);
  var value$6 = value.symbol;
  var value$7 = value.name;
  var value$8 = value.id;
  var value$9 = value.__typename;
  return {
          __typename: value$9,
          id: value$8,
          name: value$7,
          symbol: value$6,
          marketIndex: value$5,
          oracleAddress: value$3,
          latestSystemState: latestSystemState
        };
}

function verifyArgsAndParse$4(_SyntheticMarketBasic, value) {
  return parse$4(value);
}

function verifyName$4(param) {
  
}

var SyntheticMarketBasic = {
  Raw: Raw$4,
  query: query$4,
  parse: parse$4,
  serialize: serialize$4,
  verifyArgsAndParse: verifyArgsAndParse$4,
  verifyName: verifyName$4
};

var Raw$5 = {};

var query$5 = (require("@apollo/client").gql`
  fragment MarketIStakeInfo on SyntheticMarket   {
    __typename
    id
    latestAccumulativeFloatIssuanceSnapshot  {
      __typename
      accumulativeFloatPerTokenLong
      accumulativeFloatPerTokenShort
      floatRatePerTokenOverIntervalLong
      floatRatePerTokenOverIntervalShort
      timestamp
    }
  }
`);

function parse$5(value) {
  var value$1 = value.latestAccumulativeFloatIssuanceSnapshot;
  return {
          __typename: value.__typename,
          id: value.id,
          latestAccumulativeFloatIssuanceSnapshot: {
            __typename: value$1.__typename,
            accumulativeFloatPerTokenLong: GqlConverters.$$BigInt.parse(value$1.accumulativeFloatPerTokenLong),
            accumulativeFloatPerTokenShort: GqlConverters.$$BigInt.parse(value$1.accumulativeFloatPerTokenShort),
            floatRatePerTokenOverIntervalLong: GqlConverters.$$BigInt.parse(value$1.floatRatePerTokenOverIntervalLong),
            floatRatePerTokenOverIntervalShort: GqlConverters.$$BigInt.parse(value$1.floatRatePerTokenOverIntervalShort),
            timestamp: GqlConverters.$$BigInt.parse(value$1.timestamp)
          }
        };
}

function serialize$5(value) {
  var value$1 = value.latestAccumulativeFloatIssuanceSnapshot;
  var value$2 = value$1.timestamp;
  var value$3 = GqlConverters.$$BigInt.serialize(value$2);
  var value$4 = value$1.floatRatePerTokenOverIntervalShort;
  var value$5 = GqlConverters.$$BigInt.serialize(value$4);
  var value$6 = value$1.floatRatePerTokenOverIntervalLong;
  var value$7 = GqlConverters.$$BigInt.serialize(value$6);
  var value$8 = value$1.accumulativeFloatPerTokenShort;
  var value$9 = GqlConverters.$$BigInt.serialize(value$8);
  var value$10 = value$1.accumulativeFloatPerTokenLong;
  var value$11 = GqlConverters.$$BigInt.serialize(value$10);
  var value$12 = value$1.__typename;
  var latestAccumulativeFloatIssuanceSnapshot = {
    __typename: value$12,
    accumulativeFloatPerTokenLong: value$11,
    accumulativeFloatPerTokenShort: value$9,
    floatRatePerTokenOverIntervalLong: value$7,
    floatRatePerTokenOverIntervalShort: value$5,
    timestamp: value$3
  };
  var value$13 = value.id;
  var value$14 = value.__typename;
  return {
          __typename: value$14,
          id: value$13,
          latestAccumulativeFloatIssuanceSnapshot: latestAccumulativeFloatIssuanceSnapshot
        };
}

function verifyArgsAndParse$5(_MarketIStakeInfo, value) {
  return parse$5(value);
}

function verifyName$5(param) {
  
}

var MarketIStakeInfo = {
  Raw: Raw$5,
  query: query$5,
  parse: parse$5,
  serialize: serialize$5,
  verifyArgsAndParse: verifyArgsAndParse$5,
  verifyName: verifyName$5
};

var Raw$6 = {};

var query$6 = ((frag_0, frag_1) => require("@apollo/client").gql`
  fragment SyntheticTokenInfo on SyntheticToken   {
    __typename
    id
    tokenType
    tokenSupply
    totalStaked
    tokenAddress
    syntheticMarket  {
      ...SyntheticMarketBasic
    }
    latestPrice  {
      ...LatestSynthPrice
    }
  }
  ${frag_0}
  ${frag_1}
`)(query$1, query$4);

function parse$6(value) {
  var value$1 = value.tokenType;
  var tmp;
  switch (value$1) {
    case "Long" :
        tmp = "Long";
        break;
    case "Short" :
        tmp = "Short";
        break;
    default:
      tmp = {
        NAME: "FutureAddedValue",
        VAL: value$1
      };
  }
  return {
          __typename: value.__typename,
          id: value.id,
          tokenType: tmp,
          tokenSupply: GqlConverters.$$BigInt.parse(value.tokenSupply),
          totalStaked: GqlConverters.$$BigInt.parse(value.totalStaked),
          tokenAddress: GqlConverters.Address.parse(value.tokenAddress),
          syntheticMarket: parse$4(value.syntheticMarket),
          latestPrice: parse$1(value.latestPrice)
        };
}

function serialize$6(value) {
  var value$1 = value.latestPrice;
  var latestPrice = serialize$1(value$1);
  var value$2 = value.syntheticMarket;
  var syntheticMarket = serialize$4(value$2);
  var value$3 = value.tokenAddress;
  var value$4 = GqlConverters.Address.serialize(value$3);
  var value$5 = value.totalStaked;
  var value$6 = GqlConverters.$$BigInt.serialize(value$5);
  var value$7 = value.tokenSupply;
  var value$8 = GqlConverters.$$BigInt.serialize(value$7);
  var value$9 = value.tokenType;
  var tokenType = typeof value$9 === "object" ? value$9.VAL : (
      value$9 === "Long" ? "Long" : "Short"
    );
  var value$10 = value.id;
  var value$11 = value.__typename;
  return {
          __typename: value$11,
          id: value$10,
          tokenType: tokenType,
          tokenSupply: value$8,
          totalStaked: value$6,
          tokenAddress: value$4,
          syntheticMarket: syntheticMarket,
          latestPrice: latestPrice
        };
}

function verifyArgsAndParse$6(_SyntheticTokenInfo, value) {
  return parse$6(value);
}

function verifyName$6(param) {
  
}

var SyntheticTokenInfo = {
  Raw: Raw$6,
  query: query$6,
  parse: parse$6,
  serialize: serialize$6,
  verifyArgsAndParse: verifyArgsAndParse$6,
  verifyName: verifyName$6
};

var Raw$7 = {};

var query$7 = ((frag_0, frag_1) => require("@apollo/client").gql`
  fragment SyntheticMarketInfo on SyntheticMarket   {
    __typename
    name
    symbol
    marketIndex
    timestampCreated
    oracleAddress
    syntheticLong  {
      ...SyntheticTokenInfo
    }
    syntheticShort  {
      ...SyntheticTokenInfo
    }
    latestSystemState  {
      ...LatestSystemStateInfo
    }
  }
  ${frag_0}
  ${frag_1}
`)(query$3, query$6);

function parse$7(value) {
  return {
          __typename: value.__typename,
          name: value.name,
          symbol: value.symbol,
          marketIndex: GqlConverters.$$BigInt.parse(value.marketIndex),
          timestampCreated: GqlConverters.$$BigInt.parse(value.timestampCreated),
          oracleAddress: GqlConverters.Address.parse(value.oracleAddress),
          syntheticLong: parse$6(value.syntheticLong),
          syntheticShort: parse$6(value.syntheticShort),
          latestSystemState: parse$3(value.latestSystemState)
        };
}

function serialize$7(value) {
  var value$1 = value.latestSystemState;
  var latestSystemState = serialize$3(value$1);
  var value$2 = value.syntheticShort;
  var syntheticShort = serialize$6(value$2);
  var value$3 = value.syntheticLong;
  var syntheticLong = serialize$6(value$3);
  var value$4 = value.oracleAddress;
  var value$5 = GqlConverters.Address.serialize(value$4);
  var value$6 = value.timestampCreated;
  var value$7 = GqlConverters.$$BigInt.serialize(value$6);
  var value$8 = value.marketIndex;
  var value$9 = GqlConverters.$$BigInt.serialize(value$8);
  var value$10 = value.symbol;
  var value$11 = value.name;
  var value$12 = value.__typename;
  return {
          __typename: value$12,
          name: value$11,
          symbol: value$10,
          marketIndex: value$9,
          timestampCreated: value$7,
          oracleAddress: value$5,
          syntheticLong: syntheticLong,
          syntheticShort: syntheticShort,
          latestSystemState: latestSystemState
        };
}

function verifyArgsAndParse$7(_SyntheticMarketInfo, value) {
  return parse$7(value);
}

function verifyName$7(param) {
  
}

var SyntheticMarketInfo = {
  Raw: Raw$7,
  query: query$7,
  parse: parse$7,
  serialize: serialize$7,
  verifyArgsAndParse: verifyArgsAndParse$7,
  verifyName: verifyName$7
};

var Raw$8 = {};

var query$8 = ((frag_0) => require("@apollo/client").gql`
  fragment UserTokenBalance on UserSyntheticTokenBalance   {
    __typename
    id
    tokenBalance
    timeLastUpdated
    syntheticToken  {
      ...SyntheticTokenInfo
    }
  }
  ${frag_0}
`)(query$6);

function parse$8(value) {
  return {
          __typename: value.__typename,
          id: value.id,
          tokenBalance: GqlConverters.$$BigInt.parse(value.tokenBalance),
          timeLastUpdated: GqlConverters.$$BigInt.parse(value.timeLastUpdated),
          syntheticToken: parse$6(value.syntheticToken)
        };
}

function serialize$8(value) {
  var value$1 = value.syntheticToken;
  var syntheticToken = serialize$6(value$1);
  var value$2 = value.timeLastUpdated;
  var value$3 = GqlConverters.$$BigInt.serialize(value$2);
  var value$4 = value.tokenBalance;
  var value$5 = GqlConverters.$$BigInt.serialize(value$4);
  var value$6 = value.id;
  var value$7 = value.__typename;
  return {
          __typename: value$7,
          id: value$6,
          tokenBalance: value$5,
          timeLastUpdated: value$3,
          syntheticToken: syntheticToken
        };
}

function verifyArgsAndParse$8(_UserTokenBalance, value) {
  return parse$8(value);
}

function verifyName$8(param) {
  
}

var UserTokenBalance = {
  Raw: Raw$8,
  query: query$8,
  parse: parse$8,
  serialize: serialize$8,
  verifyArgsAndParse: verifyArgsAndParse$8,
  verifyName: verifyName$8
};

var Raw$9 = {};

var query$9 = (require("@apollo/client").gql`
  fragment UserConfirmedRedeems on UserNextPriceAction   {
    __typename
    id
    marketIndex
    updateIndex
    amountSynthTokenForWithdrawalLong
    amountSynthTokenForWithdrawalShort
  }
`);

function parse$9(value) {
  return {
          __typename: value.__typename,
          id: value.id,
          marketIndex: GqlConverters.$$BigInt.parse(value.marketIndex),
          updateIndex: GqlConverters.$$BigInt.parse(value.updateIndex),
          amountSynthTokenForWithdrawalLong: GqlConverters.$$BigInt.parse(value.amountSynthTokenForWithdrawalLong),
          amountSynthTokenForWithdrawalShort: GqlConverters.$$BigInt.parse(value.amountSynthTokenForWithdrawalShort)
        };
}

function serialize$9(value) {
  var value$1 = value.amountSynthTokenForWithdrawalShort;
  var value$2 = GqlConverters.$$BigInt.serialize(value$1);
  var value$3 = value.amountSynthTokenForWithdrawalLong;
  var value$4 = GqlConverters.$$BigInt.serialize(value$3);
  var value$5 = value.updateIndex;
  var value$6 = GqlConverters.$$BigInt.serialize(value$5);
  var value$7 = value.marketIndex;
  var value$8 = GqlConverters.$$BigInt.serialize(value$7);
  var value$9 = value.id;
  var value$10 = value.__typename;
  return {
          __typename: value$10,
          id: value$9,
          marketIndex: value$8,
          updateIndex: value$6,
          amountSynthTokenForWithdrawalLong: value$4,
          amountSynthTokenForWithdrawalShort: value$2
        };
}

function verifyArgsAndParse$9(_UserConfirmedRedeems, value) {
  return parse$9(value);
}

function verifyName$9(param) {
  
}

var UserConfirmedRedeems = {
  Raw: Raw$9,
  query: query$9,
  parse: parse$9,
  serialize: serialize$9,
  verifyArgsAndParse: verifyArgsAndParse$9,
  verifyName: verifyName$9
};

var Raw$10 = {};

var query$10 = (require("@apollo/client").gql`
  fragment UserConfirmedMints on UserNextPriceAction   {
    __typename
    id
    marketIndex
    updateIndex
    amountPaymentTokenForDepositLong
    amountPaymentTokenForDepositShort
  }
`);

function parse$10(value) {
  return {
          __typename: value.__typename,
          id: value.id,
          marketIndex: GqlConverters.$$BigInt.parse(value.marketIndex),
          updateIndex: GqlConverters.$$BigInt.parse(value.updateIndex),
          amountPaymentTokenForDepositLong: GqlConverters.$$BigInt.parse(value.amountPaymentTokenForDepositLong),
          amountPaymentTokenForDepositShort: GqlConverters.$$BigInt.parse(value.amountPaymentTokenForDepositShort)
        };
}

function serialize$10(value) {
  var value$1 = value.amountPaymentTokenForDepositShort;
  var value$2 = GqlConverters.$$BigInt.serialize(value$1);
  var value$3 = value.amountPaymentTokenForDepositLong;
  var value$4 = GqlConverters.$$BigInt.serialize(value$3);
  var value$5 = value.updateIndex;
  var value$6 = GqlConverters.$$BigInt.serialize(value$5);
  var value$7 = value.marketIndex;
  var value$8 = GqlConverters.$$BigInt.serialize(value$7);
  var value$9 = value.id;
  var value$10 = value.__typename;
  return {
          __typename: value$10,
          id: value$9,
          marketIndex: value$8,
          updateIndex: value$6,
          amountPaymentTokenForDepositLong: value$4,
          amountPaymentTokenForDepositShort: value$2
        };
}

function verifyArgsAndParse$10(_UserConfirmedMints, value) {
  return parse$10(value);
}

function verifyName$10(param) {
  
}

var UserConfirmedMints = {
  Raw: Raw$10,
  query: query$10,
  parse: parse$10,
  serialize: serialize$10,
  verifyArgsAndParse: verifyArgsAndParse$10,
  verifyName: verifyName$10
};

var Raw$11 = {};

var query$11 = (require("@apollo/client").gql`
  fragment UserPendingRedeems on UserNextPriceAction   {
    __typename
    id
    marketIndex
    amountSynthTokenForWithdrawalLong
    amountSynthTokenForWithdrawalShort
    confirmedTimestamp
  }
`);

function parse$11(value) {
  return {
          __typename: value.__typename,
          id: value.id,
          marketIndex: GqlConverters.$$BigInt.parse(value.marketIndex),
          amountSynthTokenForWithdrawalLong: GqlConverters.$$BigInt.parse(value.amountSynthTokenForWithdrawalLong),
          amountSynthTokenForWithdrawalShort: GqlConverters.$$BigInt.parse(value.amountSynthTokenForWithdrawalShort),
          confirmedTimestamp: GqlConverters.$$BigInt.parse(value.confirmedTimestamp)
        };
}

function serialize$11(value) {
  var value$1 = value.confirmedTimestamp;
  var value$2 = GqlConverters.$$BigInt.serialize(value$1);
  var value$3 = value.amountSynthTokenForWithdrawalShort;
  var value$4 = GqlConverters.$$BigInt.serialize(value$3);
  var value$5 = value.amountSynthTokenForWithdrawalLong;
  var value$6 = GqlConverters.$$BigInt.serialize(value$5);
  var value$7 = value.marketIndex;
  var value$8 = GqlConverters.$$BigInt.serialize(value$7);
  var value$9 = value.id;
  var value$10 = value.__typename;
  return {
          __typename: value$10,
          id: value$9,
          marketIndex: value$8,
          amountSynthTokenForWithdrawalLong: value$6,
          amountSynthTokenForWithdrawalShort: value$4,
          confirmedTimestamp: value$2
        };
}

function verifyArgsAndParse$11(_UserPendingRedeems, value) {
  return parse$11(value);
}

function verifyName$11(param) {
  
}

var UserPendingRedeems = {
  Raw: Raw$11,
  query: query$11,
  parse: parse$11,
  serialize: serialize$11,
  verifyArgsAndParse: verifyArgsAndParse$11,
  verifyName: verifyName$11
};

var Raw$12 = {};

var query$12 = (require("@apollo/client").gql`
  fragment UserPendingMints on UserNextPriceAction   {
    __typename
    id
    marketIndex
    amountPaymentTokenForDepositLong
    amountPaymentTokenForDepositShort
    confirmedTimestamp
  }
`);

function parse$12(value) {
  return {
          __typename: value.__typename,
          id: value.id,
          marketIndex: GqlConverters.$$BigInt.parse(value.marketIndex),
          amountPaymentTokenForDepositLong: GqlConverters.$$BigInt.parse(value.amountPaymentTokenForDepositLong),
          amountPaymentTokenForDepositShort: GqlConverters.$$BigInt.parse(value.amountPaymentTokenForDepositShort),
          confirmedTimestamp: GqlConverters.$$BigInt.parse(value.confirmedTimestamp)
        };
}

function serialize$12(value) {
  var value$1 = value.confirmedTimestamp;
  var value$2 = GqlConverters.$$BigInt.serialize(value$1);
  var value$3 = value.amountPaymentTokenForDepositShort;
  var value$4 = GqlConverters.$$BigInt.serialize(value$3);
  var value$5 = value.amountPaymentTokenForDepositLong;
  var value$6 = GqlConverters.$$BigInt.serialize(value$5);
  var value$7 = value.marketIndex;
  var value$8 = GqlConverters.$$BigInt.serialize(value$7);
  var value$9 = value.id;
  var value$10 = value.__typename;
  return {
          __typename: value$10,
          id: value$9,
          marketIndex: value$8,
          amountPaymentTokenForDepositLong: value$6,
          amountPaymentTokenForDepositShort: value$4,
          confirmedTimestamp: value$2
        };
}

function verifyArgsAndParse$12(_UserPendingMints, value) {
  return parse$12(value);
}

function verifyName$12(param) {
  
}

var UserPendingMints = {
  Raw: Raw$12,
  query: query$12,
  parse: parse$12,
  serialize: serialize$12,
  verifyArgsAndParse: verifyArgsAndParse$12,
  verifyName: verifyName$12
};

var Raw$13 = {};

var query$13 = ((frag_0) => require("@apollo/client").gql`
  fragment CurrentStakeHighLevel on CurrentStake   {
    __typename
    id
    syntheticToken  {
      __typename
      id
    }
    lastMintState  {
      __typename
      timestamp
      longToken  {
        __typename
        id
      }
      shortToken  {
        __typename
        id
      }
      accumulativeFloatPerTokenLong
      accumulativeFloatPerTokenShort
    }
    currentStake  {
      __typename
      withdrawn
      amount
    }
    syntheticMarket  {
      ...MarketIStakeInfo
    }
  }
  ${frag_0}
`)(query$5);

function parse$13(value) {
  var value$1 = value.syntheticToken;
  var value$2 = value.lastMintState;
  var value$3 = value$2.longToken;
  var value$4 = value$2.shortToken;
  var value$5 = value.currentStake;
  return {
          __typename: value.__typename,
          id: value.id,
          syntheticToken: {
            __typename: value$1.__typename,
            id: value$1.id
          },
          lastMintState: {
            __typename: value$2.__typename,
            timestamp: GqlConverters.$$BigInt.parse(value$2.timestamp),
            longToken: {
              __typename: value$3.__typename,
              id: value$3.id
            },
            shortToken: {
              __typename: value$4.__typename,
              id: value$4.id
            },
            accumulativeFloatPerTokenLong: GqlConverters.$$BigInt.parse(value$2.accumulativeFloatPerTokenLong),
            accumulativeFloatPerTokenShort: GqlConverters.$$BigInt.parse(value$2.accumulativeFloatPerTokenShort)
          },
          currentStake: {
            __typename: value$5.__typename,
            withdrawn: value$5.withdrawn,
            amount: GqlConverters.$$BigInt.parse(value$5.amount)
          },
          syntheticMarket: parse$5(value.syntheticMarket)
        };
}

function serialize$13(value) {
  var value$1 = value.syntheticMarket;
  var syntheticMarket = serialize$5(value$1);
  var value$2 = value.currentStake;
  var value$3 = value$2.amount;
  var value$4 = GqlConverters.$$BigInt.serialize(value$3);
  var value$5 = value$2.withdrawn;
  var value$6 = value$2.__typename;
  var currentStake = {
    __typename: value$6,
    withdrawn: value$5,
    amount: value$4
  };
  var value$7 = value.lastMintState;
  var value$8 = value$7.accumulativeFloatPerTokenShort;
  var value$9 = GqlConverters.$$BigInt.serialize(value$8);
  var value$10 = value$7.accumulativeFloatPerTokenLong;
  var value$11 = GqlConverters.$$BigInt.serialize(value$10);
  var value$12 = value$7.shortToken;
  var value$13 = value$12.id;
  var value$14 = value$12.__typename;
  var shortToken = {
    __typename: value$14,
    id: value$13
  };
  var value$15 = value$7.longToken;
  var value$16 = value$15.id;
  var value$17 = value$15.__typename;
  var longToken = {
    __typename: value$17,
    id: value$16
  };
  var value$18 = value$7.timestamp;
  var value$19 = GqlConverters.$$BigInt.serialize(value$18);
  var value$20 = value$7.__typename;
  var lastMintState = {
    __typename: value$20,
    timestamp: value$19,
    longToken: longToken,
    shortToken: shortToken,
    accumulativeFloatPerTokenLong: value$11,
    accumulativeFloatPerTokenShort: value$9
  };
  var value$21 = value.syntheticToken;
  var value$22 = value$21.id;
  var value$23 = value$21.__typename;
  var syntheticToken = {
    __typename: value$23,
    id: value$22
  };
  var value$24 = value.id;
  var value$25 = value.__typename;
  return {
          __typename: value$25,
          id: value$24,
          syntheticToken: syntheticToken,
          lastMintState: lastMintState,
          currentStake: currentStake,
          syntheticMarket: syntheticMarket
        };
}

function verifyArgsAndParse$13(_CurrentStakeHighLevel, value) {
  return parse$13(value);
}

function verifyName$13(param) {
  
}

var CurrentStakeHighLevel = {
  Raw: Raw$13,
  query: query$13,
  parse: parse$13,
  serialize: serialize$13,
  verifyArgsAndParse: verifyArgsAndParse$13,
  verifyName: verifyName$13
};

var Raw$14 = {};

var query$14 = ((frag_0) => require("@apollo/client").gql`
  fragment CurrentStakeDetailed on CurrentStake   {
    __typename
    id
    currentStake  {
      __typename
      id
      timestamp
      blockNumber
      creationTxHash
      syntheticToken  {
        ...SyntheticTokenInfo
      }
      amount
      withdrawn
    }
    lastMintState  {
      __typename
      id
    }
  }
  ${frag_0}
`)(query$6);

function parse$14(value) {
  var value$1 = value.currentStake;
  var value$2 = value.lastMintState;
  return {
          __typename: value.__typename,
          id: value.id,
          currentStake: {
            __typename: value$1.__typename,
            id: value$1.id,
            timestamp: GqlConverters.$$BigInt.parse(value$1.timestamp),
            blockNumber: GqlConverters.$$BigInt.parse(value$1.blockNumber),
            creationTxHash: GqlConverters.Bytes.parse(value$1.creationTxHash),
            syntheticToken: parse$6(value$1.syntheticToken),
            amount: GqlConverters.$$BigInt.parse(value$1.amount),
            withdrawn: value$1.withdrawn
          },
          lastMintState: {
            __typename: value$2.__typename,
            id: value$2.id
          }
        };
}

function serialize$14(value) {
  var value$1 = value.lastMintState;
  var value$2 = value$1.id;
  var value$3 = value$1.__typename;
  var lastMintState = {
    __typename: value$3,
    id: value$2
  };
  var value$4 = value.currentStake;
  var value$5 = value$4.withdrawn;
  var value$6 = value$4.amount;
  var value$7 = GqlConverters.$$BigInt.serialize(value$6);
  var value$8 = value$4.syntheticToken;
  var syntheticToken = serialize$6(value$8);
  var value$9 = value$4.creationTxHash;
  var value$10 = GqlConverters.Bytes.serialize(value$9);
  var value$11 = value$4.blockNumber;
  var value$12 = GqlConverters.$$BigInt.serialize(value$11);
  var value$13 = value$4.timestamp;
  var value$14 = GqlConverters.$$BigInt.serialize(value$13);
  var value$15 = value$4.id;
  var value$16 = value$4.__typename;
  var currentStake = {
    __typename: value$16,
    id: value$15,
    timestamp: value$14,
    blockNumber: value$12,
    creationTxHash: value$10,
    syntheticToken: syntheticToken,
    amount: value$7,
    withdrawn: value$5
  };
  var value$17 = value.id;
  var value$18 = value.__typename;
  return {
          __typename: value$18,
          id: value$17,
          currentStake: currentStake,
          lastMintState: lastMintState
        };
}

function verifyArgsAndParse$14(_CurrentStakeDetailed, value) {
  return parse$14(value);
}

function verifyName$14(param) {
  
}

var CurrentStakeDetailed = {
  Raw: Raw$14,
  query: query$14,
  parse: parse$14,
  serialize: serialize$14,
  verifyArgsAndParse: verifyArgsAndParse$14,
  verifyName: verifyName$14
};

var Raw$15 = {};

var query$15 = (require("@apollo/client").gql`
  fragment GlobalStateInfo on GlobalState   {
    __typename
    totalFloatMinted
    totalUsers
    timestampLaunched
    txHash
  }
`);

function parse$15(value) {
  return {
          __typename: value.__typename,
          totalFloatMinted: GqlConverters.$$BigInt.parse(value.totalFloatMinted),
          totalUsers: GqlConverters.$$BigInt.parse(value.totalUsers),
          timestampLaunched: GqlConverters.$$BigInt.parse(value.timestampLaunched),
          txHash: GqlConverters.Bytes.parse(value.txHash)
        };
}

function serialize$15(value) {
  var value$1 = value.txHash;
  var value$2 = GqlConverters.Bytes.serialize(value$1);
  var value$3 = value.timestampLaunched;
  var value$4 = GqlConverters.$$BigInt.serialize(value$3);
  var value$5 = value.totalUsers;
  var value$6 = GqlConverters.$$BigInt.serialize(value$5);
  var value$7 = value.totalFloatMinted;
  var value$8 = GqlConverters.$$BigInt.serialize(value$7);
  var value$9 = value.__typename;
  return {
          __typename: value$9,
          totalFloatMinted: value$8,
          totalUsers: value$6,
          timestampLaunched: value$4,
          txHash: value$2
        };
}

function verifyArgsAndParse$15(_GlobalStateInfo, value) {
  return parse$15(value);
}

function verifyName$15(param) {
  
}

var GlobalStateInfo = {
  Raw: Raw$15,
  query: query$15,
  parse: parse$15,
  serialize: serialize$15,
  verifyArgsAndParse: verifyArgsAndParse$15,
  verifyName: verifyName$15
};

var Raw$16 = {};

var query$16 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!)  {
    user(id: $userId)  {
      ...BasicUserInfo
    }
  }
  ${frag_0}
`)(query);

function parse$16(value) {
  var value$1 = value.user;
  return {
          user: !(value$1 == null) ? parse(value$1) : undefined
        };
}

function serialize$16(value) {
  var value$1 = value.user;
  var user = value$1 !== undefined ? serialize(value$1) : null;
  return {
          user: user
        };
}

function serializeVariables(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables(userId, param) {
  return {
          userId: userId
        };
}

var UserQuery_inner = {
  Raw: Raw$16,
  query: query$16,
  parse: parse$16,
  serialize: serialize$16,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$16,
      Raw: Raw$16,
      parse: parse$16,
      serialize: serialize$16,
      serializeVariables: serializeVariables
    });

var UserQuery_refetchQueryDescription = include.refetchQueryDescription;

var UserQuery_use = include.use;

var UserQuery_useLazy = include.useLazy;

var UserQuery_useLazyWithVariables = include.useLazyWithVariables;

var UserQuery = {
  UserQuery_inner: UserQuery_inner,
  Raw: Raw$16,
  query: query$16,
  parse: parse$16,
  serialize: serialize$16,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  refetchQueryDescription: UserQuery_refetchQueryDescription,
  use: UserQuery_use,
  useLazy: UserQuery_useLazy,
  useLazyWithVariables: UserQuery_useLazyWithVariables
};

var Raw$17 = {};

var query$17 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!, $tokenAdr: String!)  {
    user(id: $userId)  {
      __typename
      tokenBalances(where: {syntheticToken: $tokenAdr})  {
        ...UserTokenBalance
      }
    }
  }
  ${frag_0}
`)(query$8);

function parse$17(value) {
  var value$1 = value.user;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.tokenBalances;
    tmp = {
      __typename: value$1.__typename,
      tokenBalances: value$2.map(parse$8)
    };
  }
  return {
          user: tmp
        };
}

function serialize$17(value) {
  var value$1 = value.user;
  var user;
  if (value$1 !== undefined) {
    var value$2 = value$1.tokenBalances;
    var tokenBalances = value$2.map(serialize$8);
    var value$3 = value$1.__typename;
    user = {
      __typename: value$3,
      tokenBalances: tokenBalances
    };
  } else {
    user = null;
  }
  return {
          user: user
        };
}

function serializeVariables$1(inp) {
  return {
          userId: inp.userId,
          tokenAdr: inp.tokenAdr
        };
}

function makeVariables$1(userId, tokenAdr, param) {
  return {
          userId: userId,
          tokenAdr: tokenAdr
        };
}

var UsersBalance_inner = {
  Raw: Raw$17,
  query: query$17,
  parse: parse$17,
  serialize: serialize$17,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1
};

var include$1 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$17,
      Raw: Raw$17,
      parse: parse$17,
      serialize: serialize$17,
      serializeVariables: serializeVariables$1
    });

var UsersBalance_refetchQueryDescription = include$1.refetchQueryDescription;

var UsersBalance_use = include$1.use;

var UsersBalance_useLazy = include$1.useLazy;

var UsersBalance_useLazyWithVariables = include$1.useLazyWithVariables;

var UsersBalance = {
  UsersBalance_inner: UsersBalance_inner,
  Raw: Raw$17,
  query: query$17,
  parse: parse$17,
  serialize: serialize$17,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  refetchQueryDescription: UsersBalance_refetchQueryDescription,
  use: UsersBalance_use,
  useLazy: UsersBalance_useLazy,
  useLazyWithVariables: UsersBalance_useLazyWithVariables
};

var Raw$18 = {};

var query$18 = (require("@apollo/client").gql`
  query ($userId: String!)  {
    user(id: $userId)  {
      __typename
      gems  {
        __typename
        id
        balance
        streak
        lastUpdated
      }
    }
  }
`);

function parse$18(value) {
  var value$1 = value.user;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.gems;
    tmp = {
      __typename: value$1.__typename,
      gems: {
        __typename: value$2.__typename,
        id: value$2.id,
        balance: GqlConverters.$$BigInt.parse(value$2.balance),
        streak: GqlConverters.$$BigInt.parse(value$2.streak),
        lastUpdated: GqlConverters.$$BigInt.parse(value$2.lastUpdated)
      }
    };
  }
  return {
          user: tmp
        };
}

function serialize$18(value) {
  var value$1 = value.user;
  var user;
  if (value$1 !== undefined) {
    var value$2 = value$1.gems;
    var value$3 = value$2.lastUpdated;
    var value$4 = GqlConverters.$$BigInt.serialize(value$3);
    var value$5 = value$2.streak;
    var value$6 = GqlConverters.$$BigInt.serialize(value$5);
    var value$7 = value$2.balance;
    var value$8 = GqlConverters.$$BigInt.serialize(value$7);
    var value$9 = value$2.id;
    var value$10 = value$2.__typename;
    var gems = {
      __typename: value$10,
      id: value$9,
      balance: value$8,
      streak: value$6,
      lastUpdated: value$4
    };
    var value$11 = value$1.__typename;
    user = {
      __typename: value$11,
      gems: gems
    };
  } else {
    user = null;
  }
  return {
          user: user
        };
}

function serializeVariables$2(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables$2(userId, param) {
  return {
          userId: userId
        };
}

var UsersGems_inner = {
  Raw: Raw$18,
  query: query$18,
  parse: parse$18,
  serialize: serialize$18,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2
};

var include$2 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$18,
      Raw: Raw$18,
      parse: parse$18,
      serialize: serialize$18,
      serializeVariables: serializeVariables$2
    });

var UsersGems_refetchQueryDescription = include$2.refetchQueryDescription;

var UsersGems_use = include$2.use;

var UsersGems_useLazy = include$2.useLazy;

var UsersGems_useLazyWithVariables = include$2.useLazyWithVariables;

var UsersGems = {
  UsersGems_inner: UsersGems_inner,
  Raw: Raw$18,
  query: query$18,
  parse: parse$18,
  serialize: serialize$18,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  refetchQueryDescription: UsersGems_refetchQueryDescription,
  use: UsersGems_use,
  useLazy: UsersGems_useLazy,
  useLazyWithVariables: UsersGems_useLazyWithVariables
};

var Raw$19 = {};

var query$19 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!)  {
    user(id: $userId)  {
      __typename
      tokenBalances  {
        ...UserTokenBalance
      }
    }
  }
  ${frag_0}
`)(query$8);

function parse$19(value) {
  var value$1 = value.user;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.tokenBalances;
    tmp = {
      __typename: value$1.__typename,
      tokenBalances: value$2.map(parse$8)
    };
  }
  return {
          user: tmp
        };
}

function serialize$19(value) {
  var value$1 = value.user;
  var user;
  if (value$1 !== undefined) {
    var value$2 = value$1.tokenBalances;
    var tokenBalances = value$2.map(serialize$8);
    var value$3 = value$1.__typename;
    user = {
      __typename: value$3,
      tokenBalances: tokenBalances
    };
  } else {
    user = null;
  }
  return {
          user: user
        };
}

function serializeVariables$3(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables$3(userId, param) {
  return {
          userId: userId
        };
}

var UsersBalances_inner = {
  Raw: Raw$19,
  query: query$19,
  parse: parse$19,
  serialize: serialize$19,
  serializeVariables: serializeVariables$3,
  makeVariables: makeVariables$3
};

var include$3 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$19,
      Raw: Raw$19,
      parse: parse$19,
      serialize: serialize$19,
      serializeVariables: serializeVariables$3
    });

var UsersBalances_refetchQueryDescription = include$3.refetchQueryDescription;

var UsersBalances_use = include$3.use;

var UsersBalances_useLazy = include$3.useLazy;

var UsersBalances_useLazyWithVariables = include$3.useLazyWithVariables;

var UsersBalances = {
  UsersBalances_inner: UsersBalances_inner,
  Raw: Raw$19,
  query: query$19,
  parse: parse$19,
  serialize: serialize$19,
  serializeVariables: serializeVariables$3,
  makeVariables: makeVariables$3,
  refetchQueryDescription: UsersBalances_refetchQueryDescription,
  use: UsersBalances_use,
  useLazy: UsersBalances_useLazy,
  useLazyWithVariables: UsersBalances_useLazyWithVariables
};

var Raw$20 = {};

var query$20 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!)  {
    user(id: $userId)  {
      __typename
      pendingNextPriceActions  {
        ...UserPendingMints
      }
    }
  }
  ${frag_0}
`)(query$12);

function parse$20(value) {
  var value$1 = value.user;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.pendingNextPriceActions;
    tmp = {
      __typename: value$1.__typename,
      pendingNextPriceActions: value$2.map(parse$12)
    };
  }
  return {
          user: tmp
        };
}

function serialize$20(value) {
  var value$1 = value.user;
  var user;
  if (value$1 !== undefined) {
    var value$2 = value$1.pendingNextPriceActions;
    var pendingNextPriceActions = value$2.map(serialize$12);
    var value$3 = value$1.__typename;
    user = {
      __typename: value$3,
      pendingNextPriceActions: pendingNextPriceActions
    };
  } else {
    user = null;
  }
  return {
          user: user
        };
}

function serializeVariables$4(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables$4(userId, param) {
  return {
          userId: userId
        };
}

var UsersPendingMints_inner = {
  Raw: Raw$20,
  query: query$20,
  parse: parse$20,
  serialize: serialize$20,
  serializeVariables: serializeVariables$4,
  makeVariables: makeVariables$4
};

var include$4 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$20,
      Raw: Raw$20,
      parse: parse$20,
      serialize: serialize$20,
      serializeVariables: serializeVariables$4
    });

var UsersPendingMints_refetchQueryDescription = include$4.refetchQueryDescription;

var UsersPendingMints_use = include$4.use;

var UsersPendingMints_useLazy = include$4.useLazy;

var UsersPendingMints_useLazyWithVariables = include$4.useLazyWithVariables;

var UsersPendingMints = {
  UsersPendingMints_inner: UsersPendingMints_inner,
  Raw: Raw$20,
  query: query$20,
  parse: parse$20,
  serialize: serialize$20,
  serializeVariables: serializeVariables$4,
  makeVariables: makeVariables$4,
  refetchQueryDescription: UsersPendingMints_refetchQueryDescription,
  use: UsersPendingMints_use,
  useLazy: UsersPendingMints_useLazy,
  useLazyWithVariables: UsersPendingMints_useLazyWithVariables
};

var Raw$21 = {};

var query$21 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!)  {
    user(id: $userId)  {
      __typename
      pendingNextPriceActions  {
        ...UserPendingRedeems
      }
    }
  }
  ${frag_0}
`)(query$11);

function parse$21(value) {
  var value$1 = value.user;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.pendingNextPriceActions;
    tmp = {
      __typename: value$1.__typename,
      pendingNextPriceActions: value$2.map(parse$11)
    };
  }
  return {
          user: tmp
        };
}

function serialize$21(value) {
  var value$1 = value.user;
  var user;
  if (value$1 !== undefined) {
    var value$2 = value$1.pendingNextPriceActions;
    var pendingNextPriceActions = value$2.map(serialize$11);
    var value$3 = value$1.__typename;
    user = {
      __typename: value$3,
      pendingNextPriceActions: pendingNextPriceActions
    };
  } else {
    user = null;
  }
  return {
          user: user
        };
}

function serializeVariables$5(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables$5(userId, param) {
  return {
          userId: userId
        };
}

var UsersPendingRedeems_inner = {
  Raw: Raw$21,
  query: query$21,
  parse: parse$21,
  serialize: serialize$21,
  serializeVariables: serializeVariables$5,
  makeVariables: makeVariables$5
};

var include$5 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$21,
      Raw: Raw$21,
      parse: parse$21,
      serialize: serialize$21,
      serializeVariables: serializeVariables$5
    });

var UsersPendingRedeems_refetchQueryDescription = include$5.refetchQueryDescription;

var UsersPendingRedeems_use = include$5.use;

var UsersPendingRedeems_useLazy = include$5.useLazy;

var UsersPendingRedeems_useLazyWithVariables = include$5.useLazyWithVariables;

var UsersPendingRedeems = {
  UsersPendingRedeems_inner: UsersPendingRedeems_inner,
  Raw: Raw$21,
  query: query$21,
  parse: parse$21,
  serialize: serialize$21,
  serializeVariables: serializeVariables$5,
  makeVariables: makeVariables$5,
  refetchQueryDescription: UsersPendingRedeems_refetchQueryDescription,
  use: UsersPendingRedeems_use,
  useLazy: UsersPendingRedeems_useLazy,
  useLazyWithVariables: UsersPendingRedeems_useLazyWithVariables
};

var Raw$22 = {};

var query$22 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!)  {
    user(id: $userId)  {
      __typename
      confirmedNextPriceActions  {
        ...UserConfirmedMints
      }
    }
  }
  ${frag_0}
`)(query$10);

function parse$22(value) {
  var value$1 = value.user;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.confirmedNextPriceActions;
    tmp = {
      __typename: value$1.__typename,
      confirmedNextPriceActions: value$2.map(parse$10)
    };
  }
  return {
          user: tmp
        };
}

function serialize$22(value) {
  var value$1 = value.user;
  var user;
  if (value$1 !== undefined) {
    var value$2 = value$1.confirmedNextPriceActions;
    var confirmedNextPriceActions = value$2.map(serialize$10);
    var value$3 = value$1.__typename;
    user = {
      __typename: value$3,
      confirmedNextPriceActions: confirmedNextPriceActions
    };
  } else {
    user = null;
  }
  return {
          user: user
        };
}

function serializeVariables$6(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables$6(userId, param) {
  return {
          userId: userId
        };
}

var UsersConfirmedMints_inner = {
  Raw: Raw$22,
  query: query$22,
  parse: parse$22,
  serialize: serialize$22,
  serializeVariables: serializeVariables$6,
  makeVariables: makeVariables$6
};

var include$6 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$22,
      Raw: Raw$22,
      parse: parse$22,
      serialize: serialize$22,
      serializeVariables: serializeVariables$6
    });

var UsersConfirmedMints_refetchQueryDescription = include$6.refetchQueryDescription;

var UsersConfirmedMints_use = include$6.use;

var UsersConfirmedMints_useLazy = include$6.useLazy;

var UsersConfirmedMints_useLazyWithVariables = include$6.useLazyWithVariables;

var UsersConfirmedMints = {
  UsersConfirmedMints_inner: UsersConfirmedMints_inner,
  Raw: Raw$22,
  query: query$22,
  parse: parse$22,
  serialize: serialize$22,
  serializeVariables: serializeVariables$6,
  makeVariables: makeVariables$6,
  refetchQueryDescription: UsersConfirmedMints_refetchQueryDescription,
  use: UsersConfirmedMints_use,
  useLazy: UsersConfirmedMints_useLazy,
  useLazyWithVariables: UsersConfirmedMints_useLazyWithVariables
};

var Raw$23 = {};

var query$23 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!)  {
    user(id: $userId)  {
      __typename
      confirmedNextPriceActions  {
        ...UserConfirmedRedeems
      }
    }
  }
  ${frag_0}
`)(query$9);

function parse$23(value) {
  var value$1 = value.user;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.confirmedNextPriceActions;
    tmp = {
      __typename: value$1.__typename,
      confirmedNextPriceActions: value$2.map(parse$9)
    };
  }
  return {
          user: tmp
        };
}

function serialize$23(value) {
  var value$1 = value.user;
  var user;
  if (value$1 !== undefined) {
    var value$2 = value$1.confirmedNextPriceActions;
    var confirmedNextPriceActions = value$2.map(serialize$9);
    var value$3 = value$1.__typename;
    user = {
      __typename: value$3,
      confirmedNextPriceActions: confirmedNextPriceActions
    };
  } else {
    user = null;
  }
  return {
          user: user
        };
}

function serializeVariables$7(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables$7(userId, param) {
  return {
          userId: userId
        };
}

var UsersConfirmedRedeems_inner = {
  Raw: Raw$23,
  query: query$23,
  parse: parse$23,
  serialize: serialize$23,
  serializeVariables: serializeVariables$7,
  makeVariables: makeVariables$7
};

var include$7 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$23,
      Raw: Raw$23,
      parse: parse$23,
      serialize: serialize$23,
      serializeVariables: serializeVariables$7
    });

var UsersConfirmedRedeems_refetchQueryDescription = include$7.refetchQueryDescription;

var UsersConfirmedRedeems_use = include$7.use;

var UsersConfirmedRedeems_useLazy = include$7.useLazy;

var UsersConfirmedRedeems_useLazyWithVariables = include$7.useLazyWithVariables;

var UsersConfirmedRedeems = {
  UsersConfirmedRedeems_inner: UsersConfirmedRedeems_inner,
  Raw: Raw$23,
  query: query$23,
  parse: parse$23,
  serialize: serialize$23,
  serializeVariables: serializeVariables$7,
  makeVariables: makeVariables$7,
  refetchQueryDescription: UsersConfirmedRedeems_refetchQueryDescription,
  use: UsersConfirmedRedeems_use,
  useLazy: UsersConfirmedRedeems_useLazy,
  useLazyWithVariables: UsersConfirmedRedeems_useLazyWithVariables
};

var Raw$24 = {};

var query$24 = (require("@apollo/client").gql`
  query ($batchId: String!)  {
    batchedNextPriceExec(id: $batchId)  {
      __typename
      id
      priceSnapshotLong
      priceSnapshotShort
    }
  }
`);

function parse$24(value) {
  var value$1 = value.batchedNextPriceExec;
  return {
          batchedNextPriceExec: !(value$1 == null) ? ({
                __typename: value$1.__typename,
                id: value$1.id,
                priceSnapshotLong: GqlConverters.$$BigInt.parse(value$1.priceSnapshotLong),
                priceSnapshotShort: GqlConverters.$$BigInt.parse(value$1.priceSnapshotShort)
              }) : undefined
        };
}

function serialize$24(value) {
  var value$1 = value.batchedNextPriceExec;
  var batchedNextPriceExec;
  if (value$1 !== undefined) {
    var value$2 = value$1.priceSnapshotShort;
    var value$3 = GqlConverters.$$BigInt.serialize(value$2);
    var value$4 = value$1.priceSnapshotLong;
    var value$5 = GqlConverters.$$BigInt.serialize(value$4);
    var value$6 = value$1.id;
    var value$7 = value$1.__typename;
    batchedNextPriceExec = {
      __typename: value$7,
      id: value$6,
      priceSnapshotLong: value$5,
      priceSnapshotShort: value$3
    };
  } else {
    batchedNextPriceExec = null;
  }
  return {
          batchedNextPriceExec: batchedNextPriceExec
        };
}

function serializeVariables$8(inp) {
  return {
          batchId: inp.batchId
        };
}

function makeVariables$8(batchId, param) {
  return {
          batchId: batchId
        };
}

var BatchedSynthPrices_inner = {
  Raw: Raw$24,
  query: query$24,
  parse: parse$24,
  serialize: serialize$24,
  serializeVariables: serializeVariables$8,
  makeVariables: makeVariables$8
};

var include$8 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$24,
      Raw: Raw$24,
      parse: parse$24,
      serialize: serialize$24,
      serializeVariables: serializeVariables$8
    });

var BatchedSynthPrices_refetchQueryDescription = include$8.refetchQueryDescription;

var BatchedSynthPrices_use = include$8.use;

var BatchedSynthPrices_useLazy = include$8.useLazy;

var BatchedSynthPrices_useLazyWithVariables = include$8.useLazyWithVariables;

var BatchedSynthPrices = {
  BatchedSynthPrices_inner: BatchedSynthPrices_inner,
  Raw: Raw$24,
  query: query$24,
  parse: parse$24,
  serialize: serialize$24,
  serializeVariables: serializeVariables$8,
  makeVariables: makeVariables$8,
  refetchQueryDescription: BatchedSynthPrices_refetchQueryDescription,
  use: BatchedSynthPrices_use,
  useLazy: BatchedSynthPrices_useLazy,
  useLazyWithVariables: BatchedSynthPrices_useLazyWithVariables
};

var Raw$25 = {};

var query$25 = ((frag_0, frag_1, frag_2, frag_3) => require("@apollo/client").gql`
  query ($userId: String!, $timestamp: BigInt!)  {
    stateChanges(where: {timestamp_gt: $timestamp})  {
      __typename
      timestamp
      affectedUsers(where: {id: $userId})  {
        __typename
        ...BasicUserInfo
        tokenBalances(where: {timeLastUpdated_gt: $timestamp})  {
          ...UserTokenBalance
        }
      }
      affectedStakes(where: {user: $userId})  {
        __typename
        ...CurrentStakeDetailed
        ...CurrentStakeHighLevel
      }
    }
  }
  ${frag_0}
  ${frag_1}
  ${frag_2}
  ${frag_3}
`)(query, query$14, query$13, query$8);

function parse$25(value) {
  var value$1 = value.stateChanges;
  return {
          stateChanges: value$1.map(function (value) {
                var value$1 = value.affectedUsers;
                var value$2 = value.affectedStakes;
                return {
                        __typename: value.__typename,
                        timestamp: GqlConverters.$$BigInt.parse(value.timestamp),
                        affectedUsers: value$1.map(function (value) {
                              var value$1 = value["tokenBalances"];
                              return {
                                      __typename: value["__typename"],
                                      basicUserInfo: parse(value),
                                      tokenBalances: value$1.map(parse$8)
                                    };
                            }),
                        affectedStakes: value$2.map(function (value) {
                              return {
                                      __typename: value["__typename"],
                                      currentStakeDetailed: parse$14(value),
                                      currentStakeHighLevel: parse$13(value)
                                    };
                            })
                      };
              })
        };
}

function serialize$25(value) {
  var value$1 = value.stateChanges;
  var stateChanges = value$1.map(function (value) {
        var value$1 = value.affectedStakes;
        var affectedStakes = value$1.map(function (value) {
              return [
                        serialize$14(value.currentStakeDetailed),
                        serialize$13(value.currentStakeHighLevel)
                      ].reduce(GraphQL_PPX.deepMerge, {
                          __typename: value.__typename
                        });
            });
        var value$2 = value.affectedUsers;
        var affectedUsers = value$2.map(function (value) {
              var value$1 = value.tokenBalances;
              var tokenBalances = value$1.map(serialize$8);
              var value$2 = value.__typename;
              return [serialize(value.basicUserInfo)].reduce(GraphQL_PPX.deepMerge, {
                          __typename: value$2,
                          tokenBalances: tokenBalances
                        });
            });
        var value$3 = value.timestamp;
        var value$4 = GqlConverters.$$BigInt.serialize(value$3);
        var value$5 = value.__typename;
        return {
                __typename: value$5,
                timestamp: value$4,
                affectedUsers: affectedUsers,
                affectedStakes: affectedStakes
              };
      });
  return {
          stateChanges: stateChanges
        };
}

function serializeVariables$9(inp) {
  return {
          userId: inp.userId,
          timestamp: inp.timestamp
        };
}

function makeVariables$9(userId, timestamp, param) {
  return {
          userId: userId,
          timestamp: timestamp
        };
}

var StateChangePoll_inner = {
  Raw: Raw$25,
  query: query$25,
  parse: parse$25,
  serialize: serialize$25,
  serializeVariables: serializeVariables$9,
  makeVariables: makeVariables$9
};

var include$9 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$25,
      Raw: Raw$25,
      parse: parse$25,
      serialize: serialize$25,
      serializeVariables: serializeVariables$9
    });

var StateChangePoll_refetchQueryDescription = include$9.refetchQueryDescription;

var StateChangePoll_use = include$9.use;

var StateChangePoll_useLazy = include$9.useLazy;

var StateChangePoll_useLazyWithVariables = include$9.useLazyWithVariables;

var StateChangePoll = {
  StateChangePoll_inner: StateChangePoll_inner,
  Raw: Raw$25,
  query: query$25,
  parse: parse$25,
  serialize: serialize$25,
  serializeVariables: serializeVariables$9,
  makeVariables: makeVariables$9,
  refetchQueryDescription: StateChangePoll_refetchQueryDescription,
  use: StateChangePoll_use,
  useLazy: StateChangePoll_useLazy,
  useLazyWithVariables: StateChangePoll_useLazyWithVariables
};

var Raw$26 = {};

var query$26 = ((frag_0) => require("@apollo/client").gql`
  query   {
    syntheticMarkets  {
      ...SyntheticMarketInfo
    }
  }
  ${frag_0}
`)(query$7);

function parse$26(value) {
  var value$1 = value.syntheticMarkets;
  return {
          syntheticMarkets: value$1.map(parse$7)
        };
}

function serialize$26(value) {
  var value$1 = value.syntheticMarkets;
  var syntheticMarkets = value$1.map(serialize$7);
  return {
          syntheticMarkets: syntheticMarkets
        };
}

function serializeVariables$10(param) {
  
}

function makeVariables$10(param) {
  
}

function makeDefaultVariables(param) {
  
}

var MarketDetails_inner = {
  Raw: Raw$26,
  query: query$26,
  parse: parse$26,
  serialize: serialize$26,
  serializeVariables: serializeVariables$10,
  makeVariables: makeVariables$10,
  makeDefaultVariables: makeDefaultVariables
};

var include$10 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$26,
      Raw: Raw$26,
      parse: parse$26,
      serialize: serialize$26,
      serializeVariables: serializeVariables$10
    });

var MarketDetails_refetchQueryDescription = include$10.refetchQueryDescription;

var MarketDetails_use = include$10.use;

var MarketDetails_useLazy = include$10.useLazy;

var MarketDetails_useLazyWithVariables = include$10.useLazyWithVariables;

var MarketDetails = {
  MarketDetails_inner: MarketDetails_inner,
  Raw: Raw$26,
  query: query$26,
  parse: parse$26,
  serialize: serialize$26,
  serializeVariables: serializeVariables$10,
  makeVariables: makeVariables$10,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: MarketDetails_refetchQueryDescription,
  use: MarketDetails_use,
  useLazy: MarketDetails_useLazy,
  useLazyWithVariables: MarketDetails_useLazyWithVariables
};

var Raw$27 = {};

var query$27 = (require("@apollo/client").gql`
  query   {
    globalState(id: "globalState")  {
      __typename
      totalValueLocked
    }
  }
`);

function parse$27(value) {
  var value$1 = value.globalState;
  return {
          globalState: !(value$1 == null) ? ({
                __typename: value$1.__typename,
                totalValueLocked: GqlConverters.$$BigInt.parse(value$1.totalValueLocked)
              }) : undefined
        };
}

function serialize$27(value) {
  var value$1 = value.globalState;
  var globalState;
  if (value$1 !== undefined) {
    var value$2 = value$1.totalValueLocked;
    var value$3 = GqlConverters.$$BigInt.serialize(value$2);
    var value$4 = value$1.__typename;
    globalState = {
      __typename: value$4,
      totalValueLocked: value$3
    };
  } else {
    globalState = null;
  }
  return {
          globalState: globalState
        };
}

function serializeVariables$11(param) {
  
}

function makeVariables$11(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var TVL_inner = {
  Raw: Raw$27,
  query: query$27,
  parse: parse$27,
  serialize: serialize$27,
  serializeVariables: serializeVariables$11,
  makeVariables: makeVariables$11,
  makeDefaultVariables: makeDefaultVariables$1
};

var include$11 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$27,
      Raw: Raw$27,
      parse: parse$27,
      serialize: serialize$27,
      serializeVariables: serializeVariables$11
    });

var TVL_refetchQueryDescription = include$11.refetchQueryDescription;

var TVL_use = include$11.use;

var TVL_useLazy = include$11.useLazy;

var TVL_useLazyWithVariables = include$11.useLazyWithVariables;

var TVL = {
  TVL_inner: TVL_inner,
  Raw: Raw$27,
  query: query$27,
  parse: parse$27,
  serialize: serialize$27,
  serializeVariables: serializeVariables$11,
  makeVariables: makeVariables$11,
  makeDefaultVariables: makeDefaultVariables$1,
  refetchQueryDescription: TVL_refetchQueryDescription,
  use: TVL_use,
  useLazy: TVL_useLazy,
  useLazyWithVariables: TVL_useLazyWithVariables
};

var Raw$28 = {};

var query$28 = ((frag_0) => require("@apollo/client").gql`
  query   {
    syntheticTokens  {
      ...SyntheticTokenInfo
    }
  }
  ${frag_0}
`)(query$6);

function parse$28(value) {
  var value$1 = value.syntheticTokens;
  return {
          syntheticTokens: value$1.map(parse$6)
        };
}

function serialize$28(value) {
  var value$1 = value.syntheticTokens;
  var syntheticTokens = value$1.map(serialize$6);
  return {
          syntheticTokens: syntheticTokens
        };
}

function serializeVariables$12(param) {
  
}

function makeVariables$12(param) {
  
}

function makeDefaultVariables$2(param) {
  
}

var SyntheticTokens_inner = {
  Raw: Raw$28,
  query: query$28,
  parse: parse$28,
  serialize: serialize$28,
  serializeVariables: serializeVariables$12,
  makeVariables: makeVariables$12,
  makeDefaultVariables: makeDefaultVariables$2
};

var include$12 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$28,
      Raw: Raw$28,
      parse: parse$28,
      serialize: serialize$28,
      serializeVariables: serializeVariables$12
    });

var SyntheticTokens_refetchQueryDescription = include$12.refetchQueryDescription;

var SyntheticTokens_use = include$12.use;

var SyntheticTokens_useLazy = include$12.useLazy;

var SyntheticTokens_useLazyWithVariables = include$12.useLazyWithVariables;

var SyntheticTokens = {
  SyntheticTokens_inner: SyntheticTokens_inner,
  Raw: Raw$28,
  query: query$28,
  parse: parse$28,
  serialize: serialize$28,
  serializeVariables: serializeVariables$12,
  makeVariables: makeVariables$12,
  makeDefaultVariables: makeDefaultVariables$2,
  refetchQueryDescription: SyntheticTokens_refetchQueryDescription,
  use: SyntheticTokens_use,
  useLazy: SyntheticTokens_useLazy,
  useLazyWithVariables: SyntheticTokens_useLazyWithVariables
};

var Raw$29 = {};

var query$29 = ((frag_0) => require("@apollo/client").gql`
  query ($tokenId: String!)  {
    syntheticToken(id: $tokenId)  {
      ...SyntheticTokenInfo
    }
  }
  ${frag_0}
`)(query$6);

function parse$29(value) {
  var value$1 = value.syntheticToken;
  return {
          syntheticToken: !(value$1 == null) ? parse$6(value$1) : undefined
        };
}

function serialize$29(value) {
  var value$1 = value.syntheticToken;
  var syntheticToken = value$1 !== undefined ? serialize$6(value$1) : null;
  return {
          syntheticToken: syntheticToken
        };
}

function serializeVariables$13(inp) {
  return {
          tokenId: inp.tokenId
        };
}

function makeVariables$13(tokenId, param) {
  return {
          tokenId: tokenId
        };
}

var SyntheticToken_inner = {
  Raw: Raw$29,
  query: query$29,
  parse: parse$29,
  serialize: serialize$29,
  serializeVariables: serializeVariables$13,
  makeVariables: makeVariables$13
};

var include$13 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$29,
      Raw: Raw$29,
      parse: parse$29,
      serialize: serialize$29,
      serializeVariables: serializeVariables$13
    });

var SyntheticToken_refetchQueryDescription = include$13.refetchQueryDescription;

var SyntheticToken_use = include$13.use;

var SyntheticToken_useLazy = include$13.useLazy;

var SyntheticToken_useLazyWithVariables = include$13.useLazyWithVariables;

var SyntheticToken = {
  SyntheticToken_inner: SyntheticToken_inner,
  Raw: Raw$29,
  query: query$29,
  parse: parse$29,
  serialize: serialize$29,
  serializeVariables: serializeVariables$13,
  makeVariables: makeVariables$13,
  refetchQueryDescription: SyntheticToken_refetchQueryDescription,
  use: SyntheticToken_use,
  useLazy: SyntheticToken_useLazy,
  useLazyWithVariables: SyntheticToken_useLazyWithVariables
};

var Raw$30 = {};

var query$30 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!)  {
    currentStakes(where: {user: $userId})  {
      ...CurrentStakeDetailed
    }
  }
  ${frag_0}
`)(query$14);

function parse$30(value) {
  var value$1 = value.currentStakes;
  return {
          currentStakes: value$1.map(parse$14)
        };
}

function serialize$30(value) {
  var value$1 = value.currentStakes;
  var currentStakes = value$1.map(serialize$14);
  return {
          currentStakes: currentStakes
        };
}

function serializeVariables$14(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables$14(userId, param) {
  return {
          userId: userId
        };
}

var UsersStakes_inner = {
  Raw: Raw$30,
  query: query$30,
  parse: parse$30,
  serialize: serialize$30,
  serializeVariables: serializeVariables$14,
  makeVariables: makeVariables$14
};

var include$14 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$30,
      Raw: Raw$30,
      parse: parse$30,
      serialize: serialize$30,
      serializeVariables: serializeVariables$14
    });

var UsersStakes_refetchQueryDescription = include$14.refetchQueryDescription;

var UsersStakes_use = include$14.use;

var UsersStakes_useLazy = include$14.useLazy;

var UsersStakes_useLazyWithVariables = include$14.useLazyWithVariables;

var UsersStakes = {
  UsersStakes_inner: UsersStakes_inner,
  Raw: Raw$30,
  query: query$30,
  parse: parse$30,
  serialize: serialize$30,
  serializeVariables: serializeVariables$14,
  makeVariables: makeVariables$14,
  refetchQueryDescription: UsersStakes_refetchQueryDescription,
  use: UsersStakes_use,
  useLazy: UsersStakes_useLazy,
  useLazyWithVariables: UsersStakes_useLazyWithVariables
};

var Raw$31 = {};

var query$31 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!, $synthTokens: [String!]!)  {
    currentStakes(where: {user: $userId, syntheticToken_in: $synthTokens})  {
      ...CurrentStakeHighLevel
    }
  }
  ${frag_0}
`)(query$13);

function parse$31(value) {
  var value$1 = value.currentStakes;
  return {
          currentStakes: value$1.map(parse$13)
        };
}

function serialize$31(value) {
  var value$1 = value.currentStakes;
  var currentStakes = value$1.map(serialize$13);
  return {
          currentStakes: currentStakes
        };
}

function serializeVariables$15(inp) {
  var a = inp.synthTokens;
  return {
          userId: inp.userId,
          synthTokens: a.map(function (b) {
                return b;
              })
        };
}

function makeVariables$15(userId, synthTokens, param) {
  return {
          userId: userId,
          synthTokens: synthTokens
        };
}

var UsersFloatDetails_inner = {
  Raw: Raw$31,
  query: query$31,
  parse: parse$31,
  serialize: serialize$31,
  serializeVariables: serializeVariables$15,
  makeVariables: makeVariables$15
};

var include$15 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$31,
      Raw: Raw$31,
      parse: parse$31,
      serialize: serialize$31,
      serializeVariables: serializeVariables$15
    });

var UsersFloatDetails_refetchQueryDescription = include$15.refetchQueryDescription;

var UsersFloatDetails_use = include$15.use;

var UsersFloatDetails_useLazy = include$15.useLazy;

var UsersFloatDetails_useLazyWithVariables = include$15.useLazyWithVariables;

var UsersFloatDetails = {
  UsersFloatDetails_inner: UsersFloatDetails_inner,
  Raw: Raw$31,
  query: query$31,
  parse: parse$31,
  serialize: serialize$31,
  serializeVariables: serializeVariables$15,
  makeVariables: makeVariables$15,
  refetchQueryDescription: UsersFloatDetails_refetchQueryDescription,
  use: UsersFloatDetails_use,
  useLazy: UsersFloatDetails_useLazy,
  useLazyWithVariables: UsersFloatDetails_useLazyWithVariables
};

var Raw$32 = {};

var query$32 = (require("@apollo/client").gql`
  query ($tokenId: String!)  {
    syntheticToken(id: $tokenId)  {
      __typename
      id
      syntheticMarket  {
        __typename
        id
      }
    }
  }
`);

function parse$32(value) {
  var value$1 = value.syntheticToken;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.syntheticMarket;
    tmp = {
      __typename: value$1.__typename,
      id: value$1.id,
      syntheticMarket: {
        __typename: value$2.__typename,
        id: value$2.id
      }
    };
  }
  return {
          syntheticToken: tmp
        };
}

function serialize$32(value) {
  var value$1 = value.syntheticToken;
  var syntheticToken;
  if (value$1 !== undefined) {
    var value$2 = value$1.syntheticMarket;
    var value$3 = value$2.id;
    var value$4 = value$2.__typename;
    var syntheticMarket = {
      __typename: value$4,
      id: value$3
    };
    var value$5 = value$1.id;
    var value$6 = value$1.__typename;
    syntheticToken = {
      __typename: value$6,
      id: value$5,
      syntheticMarket: syntheticMarket
    };
  } else {
    syntheticToken = null;
  }
  return {
          syntheticToken: syntheticToken
        };
}

function serializeVariables$16(inp) {
  return {
          tokenId: inp.tokenId
        };
}

function makeVariables$16(tokenId, param) {
  return {
          tokenId: tokenId
        };
}

var TokenMarketId_inner = {
  Raw: Raw$32,
  query: query$32,
  parse: parse$32,
  serialize: serialize$32,
  serializeVariables: serializeVariables$16,
  makeVariables: makeVariables$16
};

var include$16 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$32,
      Raw: Raw$32,
      parse: parse$32,
      serialize: serialize$32,
      serializeVariables: serializeVariables$16
    });

var TokenMarketId_refetchQueryDescription = include$16.refetchQueryDescription;

var TokenMarketId_use = include$16.use;

var TokenMarketId_useLazy = include$16.useLazy;

var TokenMarketId_useLazyWithVariables = include$16.useLazyWithVariables;

var TokenMarketId = {
  TokenMarketId_inner: TokenMarketId_inner,
  Raw: Raw$32,
  query: query$32,
  parse: parse$32,
  serialize: serialize$32,
  serializeVariables: serializeVariables$16,
  makeVariables: makeVariables$16,
  refetchQueryDescription: TokenMarketId_refetchQueryDescription,
  use: TokenMarketId_use,
  useLazy: TokenMarketId_useLazy,
  useLazyWithVariables: TokenMarketId_useLazyWithVariables
};

var Raw$33 = {};

var query$33 = ((frag_0) => require("@apollo/client").gql`
  query   {
    globalStates(first: 1)  {
      ...GlobalStateInfo
    }
  }
  ${frag_0}
`)(query$15);

function parse$33(value) {
  var value$1 = value.globalStates;
  return {
          globalStates: value$1.map(parse$15)
        };
}

function serialize$33(value) {
  var value$1 = value.globalStates;
  var globalStates = value$1.map(serialize$15);
  return {
          globalStates: globalStates
        };
}

function serializeVariables$17(param) {
  
}

function makeVariables$17(param) {
  
}

function makeDefaultVariables$3(param) {
  
}

var GlobalState_inner = {
  Raw: Raw$33,
  query: query$33,
  parse: parse$33,
  serialize: serialize$33,
  serializeVariables: serializeVariables$17,
  makeVariables: makeVariables$17,
  makeDefaultVariables: makeDefaultVariables$3
};

var include$17 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$33,
      Raw: Raw$33,
      parse: parse$33,
      serialize: serialize$33,
      serializeVariables: serializeVariables$17
    });

var GlobalState_refetchQueryDescription = include$17.refetchQueryDescription;

var GlobalState_use = include$17.use;

var GlobalState_useLazy = include$17.useLazy;

var GlobalState_useLazyWithVariables = include$17.useLazyWithVariables;

var GlobalState = {
  GlobalState_inner: GlobalState_inner,
  Raw: Raw$33,
  query: query$33,
  parse: parse$33,
  serialize: serialize$33,
  serializeVariables: serializeVariables$17,
  makeVariables: makeVariables$17,
  makeDefaultVariables: makeDefaultVariables$3,
  refetchQueryDescription: GlobalState_refetchQueryDescription,
  use: GlobalState_use,
  useLazy: GlobalState_useLazy,
  useLazyWithVariables: GlobalState_useLazyWithVariables
};

var Raw$34 = {};

var query$34 = (require("@apollo/client").gql`
  query ($tokenAddress: String!, $timestamp: Int!)  {
    prices(where: {token: $tokenAddress, timeUpdated_lte: $timestamp}, orderBy: timeUpdated, orderDirection: desc, first: 1)  {
      __typename
      id
      price
    }
  }
`);

function parse$34(value) {
  var value$1 = value.prices;
  return {
          prices: value$1.map(function (value) {
                return {
                        __typename: value.__typename,
                        id: value.id,
                        price: GqlConverters.$$BigInt.parse(value.price)
                      };
              })
        };
}

function serialize$34(value) {
  var value$1 = value.prices;
  var prices = value$1.map(function (value) {
        var value$1 = value.price;
        var value$2 = GqlConverters.$$BigInt.serialize(value$1);
        var value$3 = value.id;
        var value$4 = value.__typename;
        return {
                __typename: value$4,
                id: value$3,
                price: value$2
              };
      });
  return {
          prices: prices
        };
}

function serializeVariables$18(inp) {
  return {
          tokenAddress: inp.tokenAddress,
          timestamp: inp.timestamp
        };
}

function makeVariables$18(tokenAddress, timestamp, param) {
  return {
          tokenAddress: tokenAddress,
          timestamp: timestamp
        };
}

var TokenPrice_inner = {
  Raw: Raw$34,
  query: query$34,
  parse: parse$34,
  serialize: serialize$34,
  serializeVariables: serializeVariables$18,
  makeVariables: makeVariables$18
};

var include$18 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$34,
      Raw: Raw$34,
      parse: parse$34,
      serialize: serialize$34,
      serializeVariables: serializeVariables$18
    });

var TokenPrice_refetchQueryDescription = include$18.refetchQueryDescription;

var TokenPrice_use = include$18.use;

var TokenPrice_useLazy = include$18.useLazy;

var TokenPrice_useLazyWithVariables = include$18.useLazyWithVariables;

var TokenPrice = {
  TokenPrice_inner: TokenPrice_inner,
  Raw: Raw$34,
  query: query$34,
  parse: parse$34,
  serialize: serialize$34,
  serializeVariables: serializeVariables$18,
  makeVariables: makeVariables$18,
  refetchQueryDescription: TokenPrice_refetchQueryDescription,
  use: TokenPrice_use,
  useLazy: TokenPrice_useLazy,
  useLazyWithVariables: TokenPrice_useLazyWithVariables
};

var Raw$35 = {};

var query$35 = (require("@apollo/client").gql`
  query ($intervalId: String!, $numDataPoints: Int!)  {
    priceIntervalManager(id: $intervalId)  {
      __typename
      id
      prices(first: $numDataPoints, orderBy: intervalIndex, orderDirection: desc)  {
        __typename
        startTimestamp
        endPrice
      }
      latestPriceInterval  {
        __typename
        endPrice
      }
    }
  }
`);

function parse$35(value) {
  var value$1 = value.priceIntervalManager;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.prices;
    var value$3 = value$1.latestPriceInterval;
    tmp = {
      __typename: value$1.__typename,
      id: value$1.id,
      prices: value$2.map(function (value) {
            return {
                    __typename: value.__typename,
                    startTimestamp: GqlConverters.$$Date.parse(value.startTimestamp),
                    endPrice: GqlConverters.$$BigInt.parse(value.endPrice)
                  };
          }),
      latestPriceInterval: {
        __typename: value$3.__typename,
        endPrice: GqlConverters.$$BigInt.parse(value$3.endPrice)
      }
    };
  }
  return {
          priceIntervalManager: tmp
        };
}

function serialize$35(value) {
  var value$1 = value.priceIntervalManager;
  var priceIntervalManager;
  if (value$1 !== undefined) {
    var value$2 = value$1.latestPriceInterval;
    var value$3 = value$2.endPrice;
    var value$4 = GqlConverters.$$BigInt.serialize(value$3);
    var value$5 = value$2.__typename;
    var latestPriceInterval = {
      __typename: value$5,
      endPrice: value$4
    };
    var value$6 = value$1.prices;
    var prices = value$6.map(function (value) {
          var value$1 = value.endPrice;
          var value$2 = GqlConverters.$$BigInt.serialize(value$1);
          var value$3 = value.startTimestamp;
          var value$4 = GqlConverters.$$Date.serialize(value$3);
          var value$5 = value.__typename;
          return {
                  __typename: value$5,
                  startTimestamp: value$4,
                  endPrice: value$2
                };
        });
    var value$7 = value$1.id;
    var value$8 = value$1.__typename;
    priceIntervalManager = {
      __typename: value$8,
      id: value$7,
      prices: prices,
      latestPriceInterval: latestPriceInterval
    };
  } else {
    priceIntervalManager = null;
  }
  return {
          priceIntervalManager: priceIntervalManager
        };
}

function serializeVariables$19(inp) {
  return {
          intervalId: inp.intervalId,
          numDataPoints: inp.numDataPoints
        };
}

function makeVariables$19(intervalId, numDataPoints, param) {
  return {
          intervalId: intervalId,
          numDataPoints: numDataPoints
        };
}

var PriceHistory_inner = {
  Raw: Raw$35,
  query: query$35,
  parse: parse$35,
  serialize: serialize$35,
  serializeVariables: serializeVariables$19,
  makeVariables: makeVariables$19
};

var include$19 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$35,
      Raw: Raw$35,
      parse: parse$35,
      serialize: serialize$35,
      serializeVariables: serializeVariables$19
    });

var PriceHistory_refetchQueryDescription = include$19.refetchQueryDescription;

var PriceHistory_use = include$19.use;

var PriceHistory_useLazy = include$19.useLazy;

var PriceHistory_useLazyWithVariables = include$19.useLazyWithVariables;

var PriceHistory = {
  PriceHistory_inner: PriceHistory_inner,
  Raw: Raw$35,
  query: query$35,
  parse: parse$35,
  serialize: serialize$35,
  serializeVariables: serializeVariables$19,
  makeVariables: makeVariables$19,
  refetchQueryDescription: PriceHistory_refetchQueryDescription,
  use: PriceHistory_use,
  useLazy: PriceHistory_useLazy,
  useLazyWithVariables: PriceHistory_useLazyWithVariables
};

var Raw$36 = {};

var query$36 = (require("@apollo/client").gql`
  query ($marketIndex: String!)  {
    underlyingPrices(where: {market: $marketIndex}, first: 1, orderBy: timeUpdated, orderDirection: desc)  {
      __typename
      timeUpdated
    }
  }
`);

function parse$36(value) {
  var value$1 = value.underlyingPrices;
  return {
          underlyingPrices: value$1.map(function (value) {
                return {
                        __typename: value.__typename,
                        timeUpdated: GqlConverters.$$BigInt.parse(value.timeUpdated)
                      };
              })
        };
}

function serialize$36(value) {
  var value$1 = value.underlyingPrices;
  var underlyingPrices = value$1.map(function (value) {
        var value$1 = value.timeUpdated;
        var value$2 = GqlConverters.$$BigInt.serialize(value$1);
        var value$3 = value.__typename;
        return {
                __typename: value$3,
                timeUpdated: value$2
              };
      });
  return {
          underlyingPrices: underlyingPrices
        };
}

function serializeVariables$20(inp) {
  return {
          marketIndex: inp.marketIndex
        };
}

function makeVariables$20(marketIndex, param) {
  return {
          marketIndex: marketIndex
        };
}

var OraclesLastUpdate_inner = {
  Raw: Raw$36,
  query: query$36,
  parse: parse$36,
  serialize: serialize$36,
  serializeVariables: serializeVariables$20,
  makeVariables: makeVariables$20
};

var include$20 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$36,
      Raw: Raw$36,
      parse: parse$36,
      serialize: serialize$36,
      serializeVariables: serializeVariables$20
    });

var OraclesLastUpdate_refetchQueryDescription = include$20.refetchQueryDescription;

var OraclesLastUpdate_use = include$20.use;

var OraclesLastUpdate_useLazy = include$20.useLazy;

var OraclesLastUpdate_useLazyWithVariables = include$20.useLazyWithVariables;

var OraclesLastUpdate = {
  OraclesLastUpdate_inner: OraclesLastUpdate_inner,
  Raw: Raw$36,
  query: query$36,
  parse: parse$36,
  serialize: serialize$36,
  serializeVariables: serializeVariables$20,
  makeVariables: makeVariables$20,
  refetchQueryDescription: OraclesLastUpdate_refetchQueryDescription,
  use: OraclesLastUpdate_use,
  useLazy: OraclesLastUpdate_useLazy,
  useLazyWithVariables: OraclesLastUpdate_useLazyWithVariables
};

exports.BasicUserInfo = BasicUserInfo;
exports.LatestSynthPrice = LatestSynthPrice;
exports.LatestSystemStateBasic = LatestSystemStateBasic;
exports.LatestSystemStateInfo = LatestSystemStateInfo;
exports.SyntheticMarketBasic = SyntheticMarketBasic;
exports.MarketIStakeInfo = MarketIStakeInfo;
exports.SyntheticTokenInfo = SyntheticTokenInfo;
exports.SyntheticMarketInfo = SyntheticMarketInfo;
exports.UserTokenBalance = UserTokenBalance;
exports.UserConfirmedRedeems = UserConfirmedRedeems;
exports.UserConfirmedMints = UserConfirmedMints;
exports.UserPendingRedeems = UserPendingRedeems;
exports.UserPendingMints = UserPendingMints;
exports.CurrentStakeHighLevel = CurrentStakeHighLevel;
exports.CurrentStakeDetailed = CurrentStakeDetailed;
exports.GlobalStateInfo = GlobalStateInfo;
exports.UserQuery = UserQuery;
exports.UsersBalance = UsersBalance;
exports.UsersGems = UsersGems;
exports.UsersBalances = UsersBalances;
exports.UsersPendingMints = UsersPendingMints;
exports.UsersPendingRedeems = UsersPendingRedeems;
exports.UsersConfirmedMints = UsersConfirmedMints;
exports.UsersConfirmedRedeems = UsersConfirmedRedeems;
exports.BatchedSynthPrices = BatchedSynthPrices;
exports.StateChangePoll = StateChangePoll;
exports.MarketDetails = MarketDetails;
exports.TVL = TVL;
exports.SyntheticTokens = SyntheticTokens;
exports.SyntheticToken = SyntheticToken;
exports.UsersStakes = UsersStakes;
exports.UsersFloatDetails = UsersFloatDetails;
exports.TokenMarketId = TokenMarketId;
exports.GlobalState = GlobalState;
exports.TokenPrice = TokenPrice;
exports.PriceHistory = PriceHistory;
exports.OraclesLastUpdate = OraclesLastUpdate;
/* query Not a pure module */
