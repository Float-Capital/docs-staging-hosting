// Generated by ReScript, PLEASE EDIT WITH CARE

import * as GqlConverters from "../libraries/GqlConverters.js";
import * as ApolloClient__React_Hooks_UseQuery from "rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  fragment BasicUserInfo on User   {
    __typename
    id
    totalMintedFloat
    floatTokenBalance
    numberOfTransactions
    totalGasUsed
  }
`);

function parse(value) {
  return {
          __typename: value.__typename,
          id: value.id,
          totalMintedFloat: GqlConverters.$$BigInt.parse(value.totalMintedFloat),
          floatTokenBalance: GqlConverters.$$BigInt.parse(value.floatTokenBalance),
          numberOfTransactions: GqlConverters.$$BigInt.parse(value.numberOfTransactions),
          totalGasUsed: GqlConverters.$$BigInt.parse(value.totalGasUsed)
        };
}

function serialize(value) {
  var value$1 = value.totalGasUsed;
  var value$2 = GqlConverters.$$BigInt.serialize(value$1);
  var value$3 = value.numberOfTransactions;
  var value$4 = GqlConverters.$$BigInt.serialize(value$3);
  var value$5 = value.floatTokenBalance;
  var value$6 = GqlConverters.$$BigInt.serialize(value$5);
  var value$7 = value.totalMintedFloat;
  var value$8 = GqlConverters.$$BigInt.serialize(value$7);
  var value$9 = value.id;
  var value$10 = value.__typename;
  return {
          __typename: value$10,
          id: value$9,
          totalMintedFloat: value$8,
          floatTokenBalance: value$6,
          numberOfTransactions: value$4,
          totalGasUsed: value$2
        };
}

function verifyArgsAndParse(_BasicUserInfo, value) {
  return parse(value);
}

function verifyName(param) {
  
}

var BasicUserInfo = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  verifyArgsAndParse: verifyArgsAndParse,
  verifyName: verifyName
};

var Raw$1 = {};

var query$1 = (require("@apollo/client").gql`
  fragment SyntheticInfo on SyntheticToken   {
    __typename
    id
    totalStaked
    syntheticMarket  {
      __typename
      id
      name
      symbol
      latestSystemState  {
        __typename
        totalLockedLong
        totalLockedShort
        shortTokenPrice
        longTokenPrice
      }
    }
    tokenType
    tokenAddress
  }
`);

function parse$1(value) {
  var value$1 = value.syntheticMarket;
  var value$2 = value$1.latestSystemState;
  var value$3 = value.tokenType;
  var tmp;
  switch (value$3) {
    case "Long" :
        tmp = "Long";
        break;
    case "Short" :
        tmp = "Short";
        break;
    default:
      tmp = {
        NAME: "FutureAddedValue",
        VAL: value$3
      };
  }
  return {
          __typename: value.__typename,
          id: value.id,
          totalStaked: GqlConverters.$$BigInt.parse(value.totalStaked),
          syntheticMarket: {
            __typename: value$1.__typename,
            id: value$1.id,
            name: value$1.name,
            symbol: value$1.symbol,
            latestSystemState: {
              __typename: value$2.__typename,
              totalLockedLong: GqlConverters.$$BigInt.parse(value$2.totalLockedLong),
              totalLockedShort: GqlConverters.$$BigInt.parse(value$2.totalLockedShort),
              shortTokenPrice: GqlConverters.$$BigInt.parse(value$2.shortTokenPrice),
              longTokenPrice: GqlConverters.$$BigInt.parse(value$2.longTokenPrice)
            }
          },
          tokenType: tmp,
          tokenAddress: GqlConverters.Address.parse(value.tokenAddress)
        };
}

function serialize$1(value) {
  var value$1 = value.tokenAddress;
  var value$2 = GqlConverters.Address.serialize(value$1);
  var value$3 = value.tokenType;
  var tokenType = typeof value$3 === "string" ? (
      value$3 === "Long" ? "Long" : "Short"
    ) : value$3.VAL;
  var value$4 = value.syntheticMarket;
  var value$5 = value$4.latestSystemState;
  var value$6 = value$5.longTokenPrice;
  var value$7 = GqlConverters.$$BigInt.serialize(value$6);
  var value$8 = value$5.shortTokenPrice;
  var value$9 = GqlConverters.$$BigInt.serialize(value$8);
  var value$10 = value$5.totalLockedShort;
  var value$11 = GqlConverters.$$BigInt.serialize(value$10);
  var value$12 = value$5.totalLockedLong;
  var value$13 = GqlConverters.$$BigInt.serialize(value$12);
  var value$14 = value$5.__typename;
  var latestSystemState = {
    __typename: value$14,
    totalLockedLong: value$13,
    totalLockedShort: value$11,
    shortTokenPrice: value$9,
    longTokenPrice: value$7
  };
  var value$15 = value$4.symbol;
  var value$16 = value$4.name;
  var value$17 = value$4.id;
  var value$18 = value$4.__typename;
  var syntheticMarket = {
    __typename: value$18,
    id: value$17,
    name: value$16,
    symbol: value$15,
    latestSystemState: latestSystemState
  };
  var value$19 = value.totalStaked;
  var value$20 = GqlConverters.$$BigInt.serialize(value$19);
  var value$21 = value.id;
  var value$22 = value.__typename;
  return {
          __typename: value$22,
          id: value$21,
          totalStaked: value$20,
          syntheticMarket: syntheticMarket,
          tokenType: tokenType,
          tokenAddress: value$2
        };
}

function verifyArgsAndParse$1(_SyntheticInfo, value) {
  return parse$1(value);
}

function verifyName$1(param) {
  
}

var SyntheticInfo = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  verifyArgsAndParse: verifyArgsAndParse$1,
  verifyName: verifyName$1
};

var Raw$2 = {};

var query$2 = ((frag_0) => require("@apollo/client").gql`
  fragment SyntheticMarketInfo on SyntheticMarket   {
    __typename
    name
    symbol
    marketIndex
    timestampCreated
    oracleAddress
    syntheticLong  {
      ...SyntheticInfo
    }
    syntheticShort  {
      ...SyntheticInfo
    }
    latestSystemState  {
      __typename
      timestamp
      totalLockedLong
      totalLockedShort
      totalValueLocked
      longTokenPrice
      shortTokenPrice
    }
  }
  ${frag_0}
`)(query$1);

function parse$2(value) {
  var value$1 = value.latestSystemState;
  return {
          __typename: value.__typename,
          name: value.name,
          symbol: value.symbol,
          marketIndex: GqlConverters.$$BigInt.parse(value.marketIndex),
          timestampCreated: GqlConverters.$$BigInt.parse(value.timestampCreated),
          oracleAddress: GqlConverters.Address.parse(value.oracleAddress),
          syntheticLong: parse$1(value.syntheticLong),
          syntheticShort: parse$1(value.syntheticShort),
          latestSystemState: {
            __typename: value$1.__typename,
            timestamp: GqlConverters.$$BigInt.parse(value$1.timestamp),
            totalLockedLong: GqlConverters.$$BigInt.parse(value$1.totalLockedLong),
            totalLockedShort: GqlConverters.$$BigInt.parse(value$1.totalLockedShort),
            totalValueLocked: GqlConverters.$$BigInt.parse(value$1.totalValueLocked),
            longTokenPrice: GqlConverters.$$BigInt.parse(value$1.longTokenPrice),
            shortTokenPrice: GqlConverters.$$BigInt.parse(value$1.shortTokenPrice)
          }
        };
}

function serialize$2(value) {
  var value$1 = value.latestSystemState;
  var value$2 = value$1.shortTokenPrice;
  var value$3 = GqlConverters.$$BigInt.serialize(value$2);
  var value$4 = value$1.longTokenPrice;
  var value$5 = GqlConverters.$$BigInt.serialize(value$4);
  var value$6 = value$1.totalValueLocked;
  var value$7 = GqlConverters.$$BigInt.serialize(value$6);
  var value$8 = value$1.totalLockedShort;
  var value$9 = GqlConverters.$$BigInt.serialize(value$8);
  var value$10 = value$1.totalLockedLong;
  var value$11 = GqlConverters.$$BigInt.serialize(value$10);
  var value$12 = value$1.timestamp;
  var value$13 = GqlConverters.$$BigInt.serialize(value$12);
  var value$14 = value$1.__typename;
  var latestSystemState = {
    __typename: value$14,
    timestamp: value$13,
    totalLockedLong: value$11,
    totalLockedShort: value$9,
    totalValueLocked: value$7,
    longTokenPrice: value$5,
    shortTokenPrice: value$3
  };
  var value$15 = value.syntheticShort;
  var syntheticShort = serialize$1(value$15);
  var value$16 = value.syntheticLong;
  var syntheticLong = serialize$1(value$16);
  var value$17 = value.oracleAddress;
  var value$18 = GqlConverters.Address.serialize(value$17);
  var value$19 = value.timestampCreated;
  var value$20 = GqlConverters.$$BigInt.serialize(value$19);
  var value$21 = value.marketIndex;
  var value$22 = GqlConverters.$$BigInt.serialize(value$21);
  var value$23 = value.symbol;
  var value$24 = value.name;
  var value$25 = value.__typename;
  return {
          __typename: value$25,
          name: value$24,
          symbol: value$23,
          marketIndex: value$22,
          timestampCreated: value$20,
          oracleAddress: value$18,
          syntheticLong: syntheticLong,
          syntheticShort: syntheticShort,
          latestSystemState: latestSystemState
        };
}

function verifyArgsAndParse$2(_SyntheticMarketInfo, value) {
  return parse$2(value);
}

function verifyName$2(param) {
  
}

var SyntheticMarketInfo = {
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  verifyArgsAndParse: verifyArgsAndParse$2,
  verifyName: verifyName$2
};

var Raw$3 = {};

var query$3 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!)  {
    user(id: $userId)  {
      ...BasicUserInfo
    }
  }
  ${frag_0}
`)(query);

function parse$3(value) {
  var value$1 = value.user;
  return {
          user: !(value$1 == null) ? parse(value$1) : undefined
        };
}

function serialize$3(value) {
  var value$1 = value.user;
  var user = value$1 !== undefined ? serialize(value$1) : null;
  return {
          user: user
        };
}

function serializeVariables(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables(userId, param) {
  return {
          userId: userId
        };
}

var UserQuery_inner = {
  Raw: Raw$3,
  query: query$3,
  parse: parse$3,
  serialize: serialize$3,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$3,
      Raw: Raw$3,
      parse: parse$3,
      serialize: serialize$3,
      serializeVariables: serializeVariables
    });

var UserQuery_refetchQueryDescription = include.refetchQueryDescription;

var UserQuery_use = include.use;

var UserQuery_useLazy = include.useLazy;

var UserQuery_useLazyWithVariables = include.useLazyWithVariables;

var UserQuery = {
  UserQuery_inner: UserQuery_inner,
  Raw: Raw$3,
  query: query$3,
  parse: parse$3,
  serialize: serialize$3,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  refetchQueryDescription: UserQuery_refetchQueryDescription,
  use: UserQuery_use,
  useLazy: UserQuery_useLazy,
  useLazyWithVariables: UserQuery_useLazyWithVariables
};

var Raw$4 = {};

var query$4 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!, $timestamp: BigInt!)  {
    stateChanges(where: {timestamp_gt: $timestamp})  {
      __typename
      timestamp
      affectedUsers(where: {id: $userId})  {
        ...BasicUserInfo
      }
    }
  }
  ${frag_0}
`)(query);

function parse$4(value) {
  var value$1 = value.stateChanges;
  return {
          stateChanges: value$1.map(function (value) {
                var value$1 = value.affectedUsers;
                return {
                        __typename: value.__typename,
                        timestamp: GqlConverters.$$BigInt.parse(value.timestamp),
                        affectedUsers: !(value$1 == null) ? value$1.map(parse) : undefined
                      };
              })
        };
}

function serialize$4(value) {
  var value$1 = value.stateChanges;
  var stateChanges = value$1.map(function (value) {
        var value$1 = value.affectedUsers;
        var affectedUsers = value$1 !== undefined ? value$1.map(serialize) : null;
        var value$2 = value.timestamp;
        var value$3 = GqlConverters.$$BigInt.serialize(value$2);
        var value$4 = value.__typename;
        return {
                __typename: value$4,
                timestamp: value$3,
                affectedUsers: affectedUsers
              };
      });
  return {
          stateChanges: stateChanges
        };
}

function serializeVariables$1(inp) {
  return {
          userId: inp.userId,
          timestamp: inp.timestamp
        };
}

function makeVariables$1(userId, timestamp, param) {
  return {
          userId: userId,
          timestamp: timestamp
        };
}

var StateChangePoll_inner = {
  Raw: Raw$4,
  query: query$4,
  parse: parse$4,
  serialize: serialize$4,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1
};

var include$1 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$4,
      Raw: Raw$4,
      parse: parse$4,
      serialize: serialize$4,
      serializeVariables: serializeVariables$1
    });

var StateChangePoll_refetchQueryDescription = include$1.refetchQueryDescription;

var StateChangePoll_use = include$1.use;

var StateChangePoll_useLazy = include$1.useLazy;

var StateChangePoll_useLazyWithVariables = include$1.useLazyWithVariables;

var StateChangePoll = {
  StateChangePoll_inner: StateChangePoll_inner,
  Raw: Raw$4,
  query: query$4,
  parse: parse$4,
  serialize: serialize$4,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  refetchQueryDescription: StateChangePoll_refetchQueryDescription,
  use: StateChangePoll_use,
  useLazy: StateChangePoll_useLazy,
  useLazyWithVariables: StateChangePoll_useLazyWithVariables
};

var Raw$5 = {};

var query$5 = (require("@apollo/client").gql`
  fragment LongSynth on SyntheticToken   {
    __typename
    floatMintedLong: floatMintedFromSpecificToken
    longAddress: tokenAddress
  }
`);

function parse$5(value) {
  return {
          __typename: value.__typename,
          floatMintedLong: GqlConverters.$$BigInt.parse(value.floatMintedLong),
          longAddress: GqlConverters.Address.parse(value.longAddress)
        };
}

function serialize$5(value) {
  var value$1 = value.longAddress;
  var value$2 = GqlConverters.Address.serialize(value$1);
  var value$3 = value.floatMintedLong;
  var value$4 = GqlConverters.$$BigInt.serialize(value$3);
  var value$5 = value.__typename;
  return {
          __typename: value$5,
          floatMintedLong: value$4,
          longAddress: value$2
        };
}

function verifyArgsAndParse$3(_LongSynth, value) {
  return parse$5(value);
}

function verifyName$3(param) {
  
}

var LongSynth = {
  Raw: Raw$5,
  query: query$5,
  parse: parse$5,
  serialize: serialize$5,
  verifyArgsAndParse: verifyArgsAndParse$3,
  verifyName: verifyName$3
};

var Raw$6 = {};

var query$6 = (require("@apollo/client").gql`
  query   {
    systemStates(first: 1, orderBy: timestamp, orderDirection: desc)  {
      __typename
      timestamp
      txHash
      blockNumber
      syntheticPrice
      longTokenPrice
      shortTokenPrice
      totalValueLocked
      setBy
    }
  }
`);

function parse$6(value) {
  var value$1 = value.systemStates;
  return {
          systemStates: value$1.map(function (value) {
                return {
                        __typename: value.__typename,
                        timestamp: GqlConverters.$$BigInt.parse(value.timestamp),
                        txHash: GqlConverters.Address.parse(value.txHash),
                        blockNumber: GqlConverters.$$BigInt.parse(value.blockNumber),
                        syntheticPrice: GqlConverters.$$BigInt.parse(value.syntheticPrice),
                        longTokenPrice: GqlConverters.$$BigInt.parse(value.longTokenPrice),
                        shortTokenPrice: GqlConverters.$$BigInt.parse(value.shortTokenPrice),
                        totalValueLocked: GqlConverters.$$BigInt.parse(value.totalValueLocked),
                        setBy: GqlConverters.Address.parse(value.setBy)
                      };
              })
        };
}

function serialize$6(value) {
  var value$1 = value.systemStates;
  var systemStates = value$1.map(function (value) {
        var value$1 = value.setBy;
        var value$2 = GqlConverters.Address.serialize(value$1);
        var value$3 = value.totalValueLocked;
        var value$4 = GqlConverters.$$BigInt.serialize(value$3);
        var value$5 = value.shortTokenPrice;
        var value$6 = GqlConverters.$$BigInt.serialize(value$5);
        var value$7 = value.longTokenPrice;
        var value$8 = GqlConverters.$$BigInt.serialize(value$7);
        var value$9 = value.syntheticPrice;
        var value$10 = GqlConverters.$$BigInt.serialize(value$9);
        var value$11 = value.blockNumber;
        var value$12 = GqlConverters.$$BigInt.serialize(value$11);
        var value$13 = value.txHash;
        var value$14 = GqlConverters.Address.serialize(value$13);
        var value$15 = value.timestamp;
        var value$16 = GqlConverters.$$BigInt.serialize(value$15);
        var value$17 = value.__typename;
        return {
                __typename: value$17,
                timestamp: value$16,
                txHash: value$14,
                blockNumber: value$12,
                syntheticPrice: value$10,
                longTokenPrice: value$8,
                shortTokenPrice: value$6,
                totalValueLocked: value$4,
                setBy: value$2
              };
      });
  return {
          systemStates: systemStates
        };
}

function serializeVariables$2(param) {
  
}

function makeVariables$2(param) {
  
}

function makeDefaultVariables(param) {
  
}

var LatestSystemState_inner = {
  Raw: Raw$6,
  query: query$6,
  parse: parse$6,
  serialize: serialize$6,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  makeDefaultVariables: makeDefaultVariables
};

var include$2 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$6,
      Raw: Raw$6,
      parse: parse$6,
      serialize: serialize$6,
      serializeVariables: serializeVariables$2
    });

var LatestSystemState_refetchQueryDescription = include$2.refetchQueryDescription;

var LatestSystemState_use = include$2.use;

var LatestSystemState_useLazy = include$2.useLazy;

var LatestSystemState_useLazyWithVariables = include$2.useLazyWithVariables;

var LatestSystemState = {
  LatestSystemState_inner: LatestSystemState_inner,
  Raw: Raw$6,
  query: query$6,
  parse: parse$6,
  serialize: serialize$6,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: LatestSystemState_refetchQueryDescription,
  use: LatestSystemState_use,
  useLazy: LatestSystemState_useLazy,
  useLazyWithVariables: LatestSystemState_useLazyWithVariables
};

var Raw$7 = {};

var query$7 = (require("@apollo/client").gql`
  query ($userId: String!)  {
    user(id: $userId)  {
      __typename
      totalMintedFloat
      floatTokenBalance
      tokenMints  {
        __typename
        tokensMinted
      }
    }
  }
`);

function parse$7(value) {
  var value$1 = value.user;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.tokenMints;
    tmp = {
      __typename: value$1.__typename,
      totalMintedFloat: GqlConverters.$$BigInt.parse(value$1.totalMintedFloat),
      floatTokenBalance: GqlConverters.$$BigInt.parse(value$1.floatTokenBalance),
      tokenMints: !(value$2 == null) ? value$2.map(function (value) {
              return {
                      __typename: value.__typename,
                      tokensMinted: GqlConverters.$$BigInt.parse(value.tokensMinted)
                    };
            }) : undefined
    };
  }
  return {
          user: tmp
        };
}

function serialize$7(value) {
  var value$1 = value.user;
  var user;
  if (value$1 !== undefined) {
    var value$2 = value$1.tokenMints;
    var tokenMints = value$2 !== undefined ? value$2.map(function (value) {
            var value$1 = value.tokensMinted;
            var value$2 = GqlConverters.$$BigInt.serialize(value$1);
            var value$3 = value.__typename;
            return {
                    __typename: value$3,
                    tokensMinted: value$2
                  };
          }) : null;
    var value$3 = value$1.floatTokenBalance;
    var value$4 = GqlConverters.$$BigInt.serialize(value$3);
    var value$5 = value$1.totalMintedFloat;
    var value$6 = GqlConverters.$$BigInt.serialize(value$5);
    var value$7 = value$1.__typename;
    user = {
      __typename: value$7,
      totalMintedFloat: value$6,
      floatTokenBalance: value$4,
      tokenMints: tokenMints
    };
  } else {
    user = null;
  }
  return {
          user: user
        };
}

function serializeVariables$3(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables$3(userId, param) {
  return {
          userId: userId
        };
}

var UsersState_inner = {
  Raw: Raw$7,
  query: query$7,
  parse: parse$7,
  serialize: serialize$7,
  serializeVariables: serializeVariables$3,
  makeVariables: makeVariables$3
};

var include$3 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$7,
      Raw: Raw$7,
      parse: parse$7,
      serialize: serialize$7,
      serializeVariables: serializeVariables$3
    });

var UsersState_refetchQueryDescription = include$3.refetchQueryDescription;

var UsersState_use = include$3.use;

var UsersState_useLazy = include$3.useLazy;

var UsersState_useLazyWithVariables = include$3.useLazyWithVariables;

var UsersState = {
  UsersState_inner: UsersState_inner,
  Raw: Raw$7,
  query: query$7,
  parse: parse$7,
  serialize: serialize$7,
  serializeVariables: serializeVariables$3,
  makeVariables: makeVariables$3,
  refetchQueryDescription: UsersState_refetchQueryDescription,
  use: UsersState_use,
  useLazy: UsersState_useLazy,
  useLazyWithVariables: UsersState_useLazyWithVariables
};

var Raw$8 = {};

var query$8 = (require("@apollo/client").gql`
  query   {
    syntheticMarkets  {
      __typename
      name
      symbol
      marketIndex
      oracleAddress
      syntheticLong  {
        __typename
        id
        tokenAddress
        totalStaked
      }
      syntheticShort  {
        __typename
        id
        tokenAddress
        totalStaked
      }
      latestSystemState  {
        __typename
        totalLockedLong
        totalLockedShort
        totalValueLocked
        longTokenPrice
        shortTokenPrice
      }
    }
  }
`);

function parse$8(value) {
  var value$1 = value.syntheticMarkets;
  return {
          syntheticMarkets: value$1.map(function (value) {
                var value$1 = value.syntheticLong;
                var value$2 = value.syntheticShort;
                var value$3 = value.latestSystemState;
                return {
                        __typename: value.__typename,
                        name: value.name,
                        symbol: value.symbol,
                        marketIndex: GqlConverters.$$BigInt.parse(value.marketIndex),
                        oracleAddress: GqlConverters.Address.parse(value.oracleAddress),
                        syntheticLong: {
                          __typename: value$1.__typename,
                          id: value$1.id,
                          tokenAddress: GqlConverters.Address.parse(value$1.tokenAddress),
                          totalStaked: GqlConverters.$$BigInt.parse(value$1.totalStaked)
                        },
                        syntheticShort: {
                          __typename: value$2.__typename,
                          id: value$2.id,
                          tokenAddress: GqlConverters.Address.parse(value$2.tokenAddress),
                          totalStaked: GqlConverters.$$BigInt.parse(value$2.totalStaked)
                        },
                        latestSystemState: {
                          __typename: value$3.__typename,
                          totalLockedLong: GqlConverters.$$BigInt.parse(value$3.totalLockedLong),
                          totalLockedShort: GqlConverters.$$BigInt.parse(value$3.totalLockedShort),
                          totalValueLocked: GqlConverters.$$BigInt.parse(value$3.totalValueLocked),
                          longTokenPrice: GqlConverters.$$BigInt.parse(value$3.longTokenPrice),
                          shortTokenPrice: GqlConverters.$$BigInt.parse(value$3.shortTokenPrice)
                        }
                      };
              })
        };
}

function serialize$8(value) {
  var value$1 = value.syntheticMarkets;
  var syntheticMarkets = value$1.map(function (value) {
        var value$1 = value.latestSystemState;
        var value$2 = value$1.shortTokenPrice;
        var value$3 = GqlConverters.$$BigInt.serialize(value$2);
        var value$4 = value$1.longTokenPrice;
        var value$5 = GqlConverters.$$BigInt.serialize(value$4);
        var value$6 = value$1.totalValueLocked;
        var value$7 = GqlConverters.$$BigInt.serialize(value$6);
        var value$8 = value$1.totalLockedShort;
        var value$9 = GqlConverters.$$BigInt.serialize(value$8);
        var value$10 = value$1.totalLockedLong;
        var value$11 = GqlConverters.$$BigInt.serialize(value$10);
        var value$12 = value$1.__typename;
        var latestSystemState = {
          __typename: value$12,
          totalLockedLong: value$11,
          totalLockedShort: value$9,
          totalValueLocked: value$7,
          longTokenPrice: value$5,
          shortTokenPrice: value$3
        };
        var value$13 = value.syntheticShort;
        var value$14 = value$13.totalStaked;
        var value$15 = GqlConverters.$$BigInt.serialize(value$14);
        var value$16 = value$13.tokenAddress;
        var value$17 = GqlConverters.Address.serialize(value$16);
        var value$18 = value$13.id;
        var value$19 = value$13.__typename;
        var syntheticShort = {
          __typename: value$19,
          id: value$18,
          tokenAddress: value$17,
          totalStaked: value$15
        };
        var value$20 = value.syntheticLong;
        var value$21 = value$20.totalStaked;
        var value$22 = GqlConverters.$$BigInt.serialize(value$21);
        var value$23 = value$20.tokenAddress;
        var value$24 = GqlConverters.Address.serialize(value$23);
        var value$25 = value$20.id;
        var value$26 = value$20.__typename;
        var syntheticLong = {
          __typename: value$26,
          id: value$25,
          tokenAddress: value$24,
          totalStaked: value$22
        };
        var value$27 = value.oracleAddress;
        var value$28 = GqlConverters.Address.serialize(value$27);
        var value$29 = value.marketIndex;
        var value$30 = GqlConverters.$$BigInt.serialize(value$29);
        var value$31 = value.symbol;
        var value$32 = value.name;
        var value$33 = value.__typename;
        return {
                __typename: value$33,
                name: value$32,
                symbol: value$31,
                marketIndex: value$30,
                oracleAddress: value$28,
                syntheticLong: syntheticLong,
                syntheticShort: syntheticShort,
                latestSystemState: latestSystemState
              };
      });
  return {
          syntheticMarkets: syntheticMarkets
        };
}

function serializeVariables$4(param) {
  
}

function makeVariables$4(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var MarketDetails_inner = {
  Raw: Raw$8,
  query: query$8,
  parse: parse$8,
  serialize: serialize$8,
  serializeVariables: serializeVariables$4,
  makeVariables: makeVariables$4,
  makeDefaultVariables: makeDefaultVariables$1
};

var include$4 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$8,
      Raw: Raw$8,
      parse: parse$8,
      serialize: serialize$8,
      serializeVariables: serializeVariables$4
    });

var MarketDetails_refetchQueryDescription = include$4.refetchQueryDescription;

var MarketDetails_use = include$4.use;

var MarketDetails_useLazy = include$4.useLazy;

var MarketDetails_useLazyWithVariables = include$4.useLazyWithVariables;

var MarketDetails = {
  MarketDetails_inner: MarketDetails_inner,
  Raw: Raw$8,
  query: query$8,
  parse: parse$8,
  serialize: serialize$8,
  serializeVariables: serializeVariables$4,
  makeVariables: makeVariables$4,
  makeDefaultVariables: makeDefaultVariables$1,
  refetchQueryDescription: MarketDetails_refetchQueryDescription,
  use: MarketDetails_use,
  useLazy: MarketDetails_useLazy,
  useLazyWithVariables: MarketDetails_useLazyWithVariables
};

var Raw$9 = {};

var query$9 = ((frag_0) => require("@apollo/client").gql`
  query   {
    syntheticMarkets  {
      ...SyntheticMarketInfo
    }
  }
  ${frag_0}
`)(query$2);

function parse$9(value) {
  var value$1 = value.syntheticMarkets;
  return {
          syntheticMarkets: value$1.map(parse$2)
        };
}

function serialize$9(value) {
  var value$1 = value.syntheticMarkets;
  var syntheticMarkets = value$1.map(serialize$2);
  return {
          syntheticMarkets: syntheticMarkets
        };
}

function serializeVariables$5(param) {
  
}

function makeVariables$5(param) {
  
}

function makeDefaultVariables$2(param) {
  
}

var StakingDetails_inner = {
  Raw: Raw$9,
  query: query$9,
  parse: parse$9,
  serialize: serialize$9,
  serializeVariables: serializeVariables$5,
  makeVariables: makeVariables$5,
  makeDefaultVariables: makeDefaultVariables$2
};

var include$5 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$9,
      Raw: Raw$9,
      parse: parse$9,
      serialize: serialize$9,
      serializeVariables: serializeVariables$5
    });

var StakingDetails_refetchQueryDescription = include$5.refetchQueryDescription;

var StakingDetails_use = include$5.use;

var StakingDetails_useLazy = include$5.useLazy;

var StakingDetails_useLazyWithVariables = include$5.useLazyWithVariables;

var StakingDetails = {
  StakingDetails_inner: StakingDetails_inner,
  Raw: Raw$9,
  query: query$9,
  parse: parse$9,
  serialize: serialize$9,
  serializeVariables: serializeVariables$5,
  makeVariables: makeVariables$5,
  makeDefaultVariables: makeDefaultVariables$2,
  refetchQueryDescription: StakingDetails_refetchQueryDescription,
  use: StakingDetails_use,
  useLazy: StakingDetails_useLazy,
  useLazyWithVariables: StakingDetails_useLazyWithVariables
};

var Raw$10 = {};

var query$10 = ((frag_0) => require("@apollo/client").gql`
  query   {
    syntheticTokens  {
      ...SyntheticInfo
    }
  }
  ${frag_0}
`)(query$1);

function parse$10(value) {
  var value$1 = value.syntheticTokens;
  return {
          syntheticTokens: value$1.map(parse$1)
        };
}

function serialize$10(value) {
  var value$1 = value.syntheticTokens;
  var syntheticTokens = value$1.map(serialize$1);
  return {
          syntheticTokens: syntheticTokens
        };
}

function serializeVariables$6(param) {
  
}

function makeVariables$6(param) {
  
}

function makeDefaultVariables$3(param) {
  
}

var SyntheticTokens_inner = {
  Raw: Raw$10,
  query: query$10,
  parse: parse$10,
  serialize: serialize$10,
  serializeVariables: serializeVariables$6,
  makeVariables: makeVariables$6,
  makeDefaultVariables: makeDefaultVariables$3
};

var include$6 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$10,
      Raw: Raw$10,
      parse: parse$10,
      serialize: serialize$10,
      serializeVariables: serializeVariables$6
    });

var SyntheticTokens_refetchQueryDescription = include$6.refetchQueryDescription;

var SyntheticTokens_use = include$6.use;

var SyntheticTokens_useLazy = include$6.useLazy;

var SyntheticTokens_useLazyWithVariables = include$6.useLazyWithVariables;

var SyntheticTokens = {
  SyntheticTokens_inner: SyntheticTokens_inner,
  Raw: Raw$10,
  query: query$10,
  parse: parse$10,
  serialize: serialize$10,
  serializeVariables: serializeVariables$6,
  makeVariables: makeVariables$6,
  makeDefaultVariables: makeDefaultVariables$3,
  refetchQueryDescription: SyntheticTokens_refetchQueryDescription,
  use: SyntheticTokens_use,
  useLazy: SyntheticTokens_useLazy,
  useLazyWithVariables: SyntheticTokens_useLazyWithVariables
};

var Raw$11 = {};

var query$11 = ((frag_0) => require("@apollo/client").gql`
  query ($tokenId: String!)  {
    syntheticToken(id: $tokenId)  {
      ...SyntheticInfo
    }
  }
  ${frag_0}
`)(query$1);

function parse$11(value) {
  var value$1 = value.syntheticToken;
  return {
          syntheticToken: !(value$1 == null) ? parse$1(value$1) : undefined
        };
}

function serialize$11(value) {
  var value$1 = value.syntheticToken;
  var syntheticToken = value$1 !== undefined ? serialize$1(value$1) : null;
  return {
          syntheticToken: syntheticToken
        };
}

function serializeVariables$7(inp) {
  return {
          tokenId: inp.tokenId
        };
}

function makeVariables$7(tokenId, param) {
  return {
          tokenId: tokenId
        };
}

var SyntheticToken_inner = {
  Raw: Raw$11,
  query: query$11,
  parse: parse$11,
  serialize: serialize$11,
  serializeVariables: serializeVariables$7,
  makeVariables: makeVariables$7
};

var include$7 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$11,
      Raw: Raw$11,
      parse: parse$11,
      serialize: serialize$11,
      serializeVariables: serializeVariables$7
    });

var SyntheticToken_refetchQueryDescription = include$7.refetchQueryDescription;

var SyntheticToken_use = include$7.use;

var SyntheticToken_useLazy = include$7.useLazy;

var SyntheticToken_useLazyWithVariables = include$7.useLazyWithVariables;

var SyntheticToken = {
  SyntheticToken_inner: SyntheticToken_inner,
  Raw: Raw$11,
  query: query$11,
  parse: parse$11,
  serialize: serialize$11,
  serializeVariables: serializeVariables$7,
  makeVariables: makeVariables$7,
  refetchQueryDescription: SyntheticToken_refetchQueryDescription,
  use: SyntheticToken_use,
  useLazy: SyntheticToken_useLazy,
  useLazyWithVariables: SyntheticToken_useLazyWithVariables
};

var Raw$12 = {};

var query$12 = ((frag_0) => require("@apollo/client").gql`
  query ($userId: String!)  {
    currentStakes(where: {user: $userId})  {
      __typename
      id
      currentStake  {
        __typename
        id
        timestamp
        blockNumber
        creationTxHash
        syntheticToken  {
          ...SyntheticInfo
        }
        amount
        withdrawn
      }
      lastMintState  {
        __typename
        id
      }
    }
  }
  ${frag_0}
`)(query$1);

function parse$12(value) {
  var value$1 = value.currentStakes;
  return {
          currentStakes: value$1.map(function (value) {
                var value$1 = value.currentStake;
                var value$2 = value.lastMintState;
                return {
                        __typename: value.__typename,
                        id: value.id,
                        currentStake: {
                          __typename: value$1.__typename,
                          id: value$1.id,
                          timestamp: GqlConverters.$$BigInt.parse(value$1.timestamp),
                          blockNumber: GqlConverters.$$BigInt.parse(value$1.blockNumber),
                          creationTxHash: GqlConverters.Bytes.parse(value$1.creationTxHash),
                          syntheticToken: parse$1(value$1.syntheticToken),
                          amount: GqlConverters.$$BigInt.parse(value$1.amount),
                          withdrawn: value$1.withdrawn
                        },
                        lastMintState: {
                          __typename: value$2.__typename,
                          id: value$2.id
                        }
                      };
              })
        };
}

function serialize$12(value) {
  var value$1 = value.currentStakes;
  var currentStakes = value$1.map(function (value) {
        var value$1 = value.lastMintState;
        var value$2 = value$1.id;
        var value$3 = value$1.__typename;
        var lastMintState = {
          __typename: value$3,
          id: value$2
        };
        var value$4 = value.currentStake;
        var value$5 = value$4.withdrawn;
        var value$6 = value$4.amount;
        var value$7 = GqlConverters.$$BigInt.serialize(value$6);
        var value$8 = value$4.syntheticToken;
        var syntheticToken = serialize$1(value$8);
        var value$9 = value$4.creationTxHash;
        var value$10 = GqlConverters.Bytes.serialize(value$9);
        var value$11 = value$4.blockNumber;
        var value$12 = GqlConverters.$$BigInt.serialize(value$11);
        var value$13 = value$4.timestamp;
        var value$14 = GqlConverters.$$BigInt.serialize(value$13);
        var value$15 = value$4.id;
        var value$16 = value$4.__typename;
        var currentStake = {
          __typename: value$16,
          id: value$15,
          timestamp: value$14,
          blockNumber: value$12,
          creationTxHash: value$10,
          syntheticToken: syntheticToken,
          amount: value$7,
          withdrawn: value$5
        };
        var value$17 = value.id;
        var value$18 = value.__typename;
        return {
                __typename: value$18,
                id: value$17,
                currentStake: currentStake,
                lastMintState: lastMintState
              };
      });
  return {
          currentStakes: currentStakes
        };
}

function serializeVariables$8(inp) {
  return {
          userId: inp.userId
        };
}

function makeVariables$8(userId, param) {
  return {
          userId: userId
        };
}

var UsersStakes_inner = {
  Raw: Raw$12,
  query: query$12,
  parse: parse$12,
  serialize: serialize$12,
  serializeVariables: serializeVariables$8,
  makeVariables: makeVariables$8
};

var include$8 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$12,
      Raw: Raw$12,
      parse: parse$12,
      serialize: serialize$12,
      serializeVariables: serializeVariables$8
    });

var UsersStakes_refetchQueryDescription = include$8.refetchQueryDescription;

var UsersStakes_use = include$8.use;

var UsersStakes_useLazy = include$8.useLazy;

var UsersStakes_useLazyWithVariables = include$8.useLazyWithVariables;

var UsersStakes = {
  UsersStakes_inner: UsersStakes_inner,
  Raw: Raw$12,
  query: query$12,
  parse: parse$12,
  serialize: serialize$12,
  serializeVariables: serializeVariables$8,
  makeVariables: makeVariables$8,
  refetchQueryDescription: UsersStakes_refetchQueryDescription,
  use: UsersStakes_use,
  useLazy: UsersStakes_useLazy,
  useLazyWithVariables: UsersStakes_useLazyWithVariables
};

var Raw$13 = {};

var query$13 = (require("@apollo/client").gql`
  query ($userId: String!, $synthToken: String!)  {
    currentStakes(where: {user: $userId, syntheticToken: $synthToken})  {
      __typename
      lastMintState  {
        __typename
        timestamp
        accumulativeFloatPerToken
      }
      currentStake  {
        __typename
        amount
      }
    }
    states(first: 1, orderBy: stateIndex, orderDirection: desc, where: {syntheticToken: $synthToken, timeSinceLastUpdate_gt: 0})  {
      __typename
      stateIndex
      accumulativeFloatPerToken
      floatRatePerTokenOverInterval
    }
  }
`);

function parse$13(value) {
  var value$1 = value.currentStakes;
  var value$2 = value.states;
  return {
          currentStakes: value$1.map(function (value) {
                var value$1 = value.lastMintState;
                var value$2 = value.currentStake;
                return {
                        __typename: value.__typename,
                        lastMintState: {
                          __typename: value$1.__typename,
                          timestamp: GqlConverters.$$BigInt.parse(value$1.timestamp),
                          accumulativeFloatPerToken: GqlConverters.$$BigInt.parse(value$1.accumulativeFloatPerToken)
                        },
                        currentStake: {
                          __typename: value$2.__typename,
                          amount: GqlConverters.$$BigInt.parse(value$2.amount)
                        }
                      };
              }),
          states: value$2.map(function (value) {
                return {
                        __typename: value.__typename,
                        stateIndex: GqlConverters.$$BigInt.parse(value.stateIndex),
                        accumulativeFloatPerToken: GqlConverters.$$BigInt.parse(value.accumulativeFloatPerToken),
                        floatRatePerTokenOverInterval: GqlConverters.$$BigInt.parse(value.floatRatePerTokenOverInterval)
                      };
              })
        };
}

function serialize$13(value) {
  var value$1 = value.states;
  var states = value$1.map(function (value) {
        var value$1 = value.floatRatePerTokenOverInterval;
        var value$2 = GqlConverters.$$BigInt.serialize(value$1);
        var value$3 = value.accumulativeFloatPerToken;
        var value$4 = GqlConverters.$$BigInt.serialize(value$3);
        var value$5 = value.stateIndex;
        var value$6 = GqlConverters.$$BigInt.serialize(value$5);
        var value$7 = value.__typename;
        return {
                __typename: value$7,
                stateIndex: value$6,
                accumulativeFloatPerToken: value$4,
                floatRatePerTokenOverInterval: value$2
              };
      });
  var value$2 = value.currentStakes;
  var currentStakes = value$2.map(function (value) {
        var value$1 = value.currentStake;
        var value$2 = value$1.amount;
        var value$3 = GqlConverters.$$BigInt.serialize(value$2);
        var value$4 = value$1.__typename;
        var currentStake = {
          __typename: value$4,
          amount: value$3
        };
        var value$5 = value.lastMintState;
        var value$6 = value$5.accumulativeFloatPerToken;
        var value$7 = GqlConverters.$$BigInt.serialize(value$6);
        var value$8 = value$5.timestamp;
        var value$9 = GqlConverters.$$BigInt.serialize(value$8);
        var value$10 = value$5.__typename;
        var lastMintState = {
          __typename: value$10,
          timestamp: value$9,
          accumulativeFloatPerToken: value$7
        };
        var value$11 = value.__typename;
        return {
                __typename: value$11,
                lastMintState: lastMintState,
                currentStake: currentStake
              };
      });
  return {
          currentStakes: currentStakes,
          states: states
        };
}

function serializeVariables$9(inp) {
  return {
          userId: inp.userId,
          synthToken: inp.synthToken
        };
}

function makeVariables$9(userId, synthToken, param) {
  return {
          userId: userId,
          synthToken: synthToken
        };
}

var UsersFloatDetails_inner = {
  Raw: Raw$13,
  query: query$13,
  parse: parse$13,
  serialize: serialize$13,
  serializeVariables: serializeVariables$9,
  makeVariables: makeVariables$9
};

var include$9 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$13,
      Raw: Raw$13,
      parse: parse$13,
      serialize: serialize$13,
      serializeVariables: serializeVariables$9
    });

var UsersFloatDetails_refetchQueryDescription = include$9.refetchQueryDescription;

var UsersFloatDetails_use = include$9.use;

var UsersFloatDetails_useLazy = include$9.useLazy;

var UsersFloatDetails_useLazyWithVariables = include$9.useLazyWithVariables;

var UsersFloatDetails = {
  UsersFloatDetails_inner: UsersFloatDetails_inner,
  Raw: Raw$13,
  query: query$13,
  parse: parse$13,
  serialize: serialize$13,
  serializeVariables: serializeVariables$9,
  makeVariables: makeVariables$9,
  refetchQueryDescription: UsersFloatDetails_refetchQueryDescription,
  use: UsersFloatDetails_use,
  useLazy: UsersFloatDetails_useLazy,
  useLazyWithVariables: UsersFloatDetails_useLazyWithVariables
};

var Raw$14 = {};

var query$14 = (require("@apollo/client").gql`
  query   {
    globalStates(first: 1)  {
      __typename
      totalFloatMinted
      totalTxs
      totalUsers
      totalGasUsed
      timestampLaunched
    }
  }
`);

function parse$14(value) {
  var value$1 = value.globalStates;
  return {
          globalStates: value$1.map(function (value) {
                return {
                        __typename: value.__typename,
                        totalFloatMinted: GqlConverters.$$BigInt.parse(value.totalFloatMinted),
                        totalTxs: GqlConverters.$$BigInt.parse(value.totalTxs),
                        totalUsers: GqlConverters.$$BigInt.parse(value.totalUsers),
                        totalGasUsed: GqlConverters.$$BigInt.parse(value.totalGasUsed),
                        timestampLaunched: GqlConverters.$$BigInt.parse(value.timestampLaunched)
                      };
              })
        };
}

function serialize$14(value) {
  var value$1 = value.globalStates;
  var globalStates = value$1.map(function (value) {
        var value$1 = value.timestampLaunched;
        var value$2 = GqlConverters.$$BigInt.serialize(value$1);
        var value$3 = value.totalGasUsed;
        var value$4 = GqlConverters.$$BigInt.serialize(value$3);
        var value$5 = value.totalUsers;
        var value$6 = GqlConverters.$$BigInt.serialize(value$5);
        var value$7 = value.totalTxs;
        var value$8 = GqlConverters.$$BigInt.serialize(value$7);
        var value$9 = value.totalFloatMinted;
        var value$10 = GqlConverters.$$BigInt.serialize(value$9);
        var value$11 = value.__typename;
        return {
                __typename: value$11,
                totalFloatMinted: value$10,
                totalTxs: value$8,
                totalUsers: value$6,
                totalGasUsed: value$4,
                timestampLaunched: value$2
              };
      });
  return {
          globalStates: globalStates
        };
}

function serializeVariables$10(param) {
  
}

function makeVariables$10(param) {
  
}

function makeDefaultVariables$4(param) {
  
}

var GlobalState_inner = {
  Raw: Raw$14,
  query: query$14,
  parse: parse$14,
  serialize: serialize$14,
  serializeVariables: serializeVariables$10,
  makeVariables: makeVariables$10,
  makeDefaultVariables: makeDefaultVariables$4
};

var include$10 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$14,
      Raw: Raw$14,
      parse: parse$14,
      serialize: serialize$14,
      serializeVariables: serializeVariables$10
    });

var GlobalState_refetchQueryDescription = include$10.refetchQueryDescription;

var GlobalState_use = include$10.use;

var GlobalState_useLazy = include$10.useLazy;

var GlobalState_useLazyWithVariables = include$10.useLazyWithVariables;

var GlobalState = {
  GlobalState_inner: GlobalState_inner,
  Raw: Raw$14,
  query: query$14,
  parse: parse$14,
  serialize: serialize$14,
  serializeVariables: serializeVariables$10,
  makeVariables: makeVariables$10,
  makeDefaultVariables: makeDefaultVariables$4,
  refetchQueryDescription: GlobalState_refetchQueryDescription,
  use: GlobalState_use,
  useLazy: GlobalState_useLazy,
  useLazyWithVariables: GlobalState_useLazyWithVariables
};

export {
  BasicUserInfo ,
  SyntheticInfo ,
  SyntheticMarketInfo ,
  UserQuery ,
  StateChangePoll ,
  LongSynth ,
  LatestSystemState ,
  UsersState ,
  MarketDetails ,
  StakingDetails ,
  SyntheticTokens ,
  SyntheticToken ,
  UsersStakes ,
  UsersFloatDetails ,
  GlobalState ,
  
}
/* query Not a pure module */
