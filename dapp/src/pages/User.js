// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Misc = require("../libraries/Misc.js");
var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Button = require("../components/UI/Base/Button.js");
var Client = require("../data/Client.js");
var Config = require("../config/Config.js");
var Ethers = require("../ethereum/Ethers.js");
var Loader = require("../components/UI/Base/Loader.js");
var UserUI = require("../components/UI/UserUI.js");
var Backend = require("../mockBackend/Backend.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Masonry = require("../components/UI/Masonry.js");
var Queries = require("../data/Queries.js");
var Withdraw = require("../components/Withdraw/Withdraw.js");
var CONSTANTS = require("../CONSTANTS.js");
var DataHooks = require("../data/DataHooks.js");
var Link = require("next/link").default;
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var PendingBar = require("../components/UI/Base/PendingBar.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var ProgressBar = require("../components/UI/Base/ProgressBar.js");
var Router = require("next/router");
var RootProvider = require("../libraries/RootProvider.js");
var ContractHooks = require("../components/Testing/Admin/ContractHooks.js");
var DisplayAddress = require("../components/UI/Base/DisplayAddress.js");
var ContractActions = require("../ethereum/ContractActions.js");
var Format = require("date-fns/format").default;
var WithdrawTxStatusModal = require("../components/Withdraw/WithdrawTxStatusModal.js");

function add(prim0, prim1) {
  return prim0.add(prim1);
}

function mul(prim0, prim1) {
  return prim0.mul(prim1);
}

function div(prim0, prim1) {
  return prim0.div(prim1);
}

function toNumber(prim) {
  return prim.toNumber();
}

function eq(prim0, prim1) {
  return prim0.eq(prim1);
}

function toString(prim) {
  return prim.toString();
}

function getUsersTotalTokenBalance(balancesResponse) {
  return Belt_Array.reduce(balancesResponse, CONSTANTS.zeroBN, (function (totalBalanceSum, balanceDataResponse) {
                return totalBalanceSum.add(balanceDataResponse.syntheticToken.latestPrice.price.price.mul(balanceDataResponse.tokenBalance).div(CONSTANTS.tenToThe18));
              }));
}

function User$UserPendingMintItem(Props) {
  var userId = Props.userId;
  var pendingMint = Props.pendingMint;
  var match = React.useState(function () {
        return false;
      });
  var setTimerFinished = match[1];
  var client = Client.useApolloClient(undefined);
  var reqVariables = {
    userId: userId
  };
  React.useEffect((function () {
          var timeout = setTimeout((function (param) {
                  Curry._6(client.rescript_query, {
                          query: Queries.UsersConfirmedMints.query,
                          Raw: Queries.UsersConfirmedMints.Raw,
                          parse: Queries.UsersConfirmedMints.parse,
                          serialize: Queries.UsersConfirmedMints.serialize,
                          serializeVariables: Queries.UsersConfirmedMints.serializeVariables
                        }, undefined, undefined, /* NetworkOnly */2, undefined, reqVariables).then(function (queryResult) {
                        if (queryResult.TAG === /* Ok */0 && queryResult._0.data.user !== undefined) {
                          Curry._1(client.rescript_writeQuery, {
                                query: Queries.UsersConfirmedMints.query,
                                Raw: Queries.UsersConfirmedMints.Raw,
                                parse: Queries.UsersConfirmedMints.parse,
                                serialize: Queries.UsersConfirmedMints.serialize,
                                serializeVariables: Queries.UsersConfirmedMints.serializeVariables
                              });
                          return ;
                        }
                        
                      });
                  
                }), 1000);
          return (function (param) {
                    clearTimeout(timeout);
                    
                  });
        }), [match[0]]);
  return React.createElement(React.Fragment, undefined, pendingMint.length !== 0 ? React.createElement(UserUI.UserColumnTextCenter.make, {
                    children: null
                  }, React.createElement(UserUI.UserColumnText.make, {
                        head: "‚è≥ Pending synths",
                        body: ""
                      }), React.createElement("br", undefined)) : null, Belt_Array.map(pendingMint, (function (param) {
                    var marketIndex = param.marketIndex;
                    return React.createElement(UserUI.UserPendingBox.make, {
                                name: Backend.getMarketInfoUnsafe(marketIndex.toNumber()).name,
                                isLong: param.isLong,
                                daiSpend: param.amount,
                                txConfirmedTimestamp: param.confirmedTimestamp.toNumber(),
                                marketIndex: marketIndex,
                                setTimerFinished: setTimerFinished
                              });
                  })));
}

var UserPendingMintItem = {
  make: User$UserPendingMintItem
};

function User$UserBalancesCard(Props) {
  var userId = Props.userId;
  var usersTokensQuery = DataHooks.useUsersBalances(userId);
  var usersPendingMintsQuery = DataHooks.useUsersPendingMints(userId);
  var tmp;
  tmp = typeof usersPendingMintsQuery === "number" ? React.createElement("div", {
          className: "mx-auto"
        }, React.createElement(Loader.Mini.make, {})) : (
      usersPendingMintsQuery.TAG === /* GraphError */0 ? usersPendingMintsQuery._0 : React.createElement(User$UserPendingMintItem, {
              userId: userId,
              pendingMint: usersPendingMintsQuery._0
            })
    );
  var tmp$1;
  if (typeof usersTokensQuery === "number") {
    tmp$1 = React.createElement("div", {
          className: "m-auto"
        }, React.createElement(Loader.Mini.make, {}));
  } else if (usersTokensQuery.TAG === /* GraphError */0) {
    tmp$1 = usersTokensQuery._0;
  } else {
    var balancesQueryResponse = usersTokensQuery._0;
    var totalBalance = getUsersTotalTokenBalance(balancesQueryResponse);
    var usersBalancesComponents = Belt_Array.map(Belt_Array.keep(balancesQueryResponse, (function (param) {
                return !param.tokenBalance.eq(CONSTANTS.zeroBN);
              })), (function (userBalanceData) {
            return React.createElement(UserUI.UserTokenBox.make, {
                        userBalanceData: userBalanceData,
                        children: React.createElement(UserUI.UserMarketStakeOrRedeem.make, {
                              synthId: userBalanceData.syntheticToken.id,
                              syntheticSide: userBalanceData.syntheticToken.tokenType
                            })
                      });
          }));
    tmp$1 = React.createElement(React.Fragment, undefined, React.createElement(UserUI.UserColumnTextCenter.make, {
              children: React.createElement(UserUI.UserColumnText.make, {
                    head: "üí∞ Synth value",
                    body: "$" + Misc.NumberFormat.formatEther(undefined, totalBalance)
                  })
            }), usersBalancesComponents);
  }
  return React.createElement(UserUI.UserColumnCard.make, {
              children: null
            }, React.createElement(UserUI.UserColumnHeader.make, {
                  children: "Synthetic assets"
                }), React.createElement(PendingBar.make, {}), tmp, tmp$1);
}

var UserBalancesCard = {
  make: User$UserBalancesCard
};

function getUsersTotalStakeValue(stakes) {
  var totalStakedValue = {
    contents: CONSTANTS.zeroBN
  };
  Belt_Array.forEach(stakes, (function (stake) {
          var syntheticToken = stake.currentStake.syntheticToken;
          var price = syntheticToken.latestPrice.price.price;
          var value = stake.currentStake.amount.mul(price).div(CONSTANTS.tenToThe18);
          totalStakedValue.contents = totalStakedValue.contents.add(value);
          
        }));
  return totalStakedValue;
}

function User$UserTotalInvestedCard(Props) {
  var stakes = Props.stakes;
  var userId = Props.userId;
  var usersTokensQuery = DataHooks.useUsersBalances(userId);
  var totalStakedValue = getUsersTotalStakeValue(stakes);
  var tmp;
  if (typeof usersTokensQuery === "number") {
    tmp = React.createElement("div", {
          className: "m-auto"
        }, React.createElement(Loader.Mini.make, {}));
  } else if (usersTokensQuery.TAG === /* GraphError */0) {
    tmp = usersTokensQuery._0;
  } else {
    var totalBalance = getUsersTotalTokenBalance(usersTokensQuery._0);
    tmp = React.createElement(UserUI.UserTotalValue.make, {
          totalValueNameSup: "Portfolio",
          totalValueNameSub: "Value",
          totalValue: totalBalance.add(totalStakedValue.contents)
        });
  }
  return React.createElement(React.Fragment, undefined, tmp);
}

var UserTotalInvestedCard = {
  make: User$UserTotalInvestedCard
};

function User$UserTotalStakedCard(Props) {
  var stakes = Props.stakes;
  var totalStakedValue = getUsersTotalStakeValue(stakes);
  return React.createElement(UserUI.UserTotalValue.make, {
              totalValueNameSup: "Staked",
              totalValueNameSub: "Value",
              totalValue: totalStakedValue.contents
            });
}

var UserTotalStakedCard = {
  make: User$UserTotalStakedCard
};

function User$PendingRedeemItem(Props) {
  var pendingRedeem = Props.pendingRedeem;
  var userId = Props.userId;
  var marketIndex = pendingRedeem.marketIndex;
  var match = React.useState(function () {
        return false;
      });
  var client = Client.useApolloClient(undefined);
  var reqVariables = {
    userId: userId
  };
  React.useEffect((function () {
          var timeout = setTimeout((function (param) {
                  Curry._6(client.rescript_query, {
                          query: Queries.UsersConfirmedRedeems.query,
                          Raw: Queries.UsersConfirmedRedeems.Raw,
                          parse: Queries.UsersConfirmedRedeems.parse,
                          serialize: Queries.UsersConfirmedRedeems.serialize,
                          serializeVariables: Queries.UsersConfirmedRedeems.serializeVariables
                        }, undefined, undefined, /* NetworkOnly */2, undefined, reqVariables).then(function (queryResult) {
                        if (queryResult.TAG === /* Ok */0 && queryResult._0.data.user !== undefined) {
                          Curry._1(client.rescript_writeQuery, {
                                query: Queries.UsersConfirmedRedeems.query,
                                Raw: Queries.UsersConfirmedRedeems.Raw,
                                parse: Queries.UsersConfirmedRedeems.parse,
                                serialize: Queries.UsersConfirmedRedeems.serialize,
                                serializeVariables: Queries.UsersConfirmedRedeems.serializeVariables
                              });
                          return ;
                        }
                        
                      });
                  
                }), 1000);
          return (function (param) {
                    clearTimeout(timeout);
                    
                  });
        }), [match[0]]);
  var lastOracleTimestamp = DataHooks.useOracleLastUpdate(marketIndex.toString());
  var oracleHeartbeatForMarket = Backend.getMarketInfoUnsafe(marketIndex.toNumber()).oracleHeartbeat;
  if (typeof lastOracleTimestamp === "number") {
    return React.createElement(Loader.Tiny.make, {});
  }
  if (lastOracleTimestamp.TAG === /* GraphError */0) {
    return React.createElement("p", undefined, lastOracleTimestamp._0);
  }
  var nextPriceUpdate = lastOracleTimestamp._0.toNumber() + oracleHeartbeatForMarket | 0;
  return React.createElement(ProgressBar.make, {
              txConfirmedTimestamp: pendingRedeem.confirmedTimestamp.toNumber(),
              nextPriceUpdateTimestamp: nextPriceUpdate,
              setTimerFinished: match[1]
            });
}

var PendingRedeemItem = {
  make: User$PendingRedeemItem
};

function User$IncompleteWithdrawalItem(Props) {
  var marketIndex = Props.marketIndex;
  var updateIndex = Props.updateIndex;
  var amount = Props.amount;
  var isLong = Props.isLong;
  var txState = Props.txState;
  var contractExecutionHandler = Props.contractExecutionHandler;
  var syntheticPricesQuery = DataHooks.useBatchedSynthPrices(marketIndex, updateIndex);
  if (typeof syntheticPricesQuery === "number") {
    return React.createElement("div", {
                className: "m-auto"
              }, React.createElement(Loader.Tiny.make, {}));
  }
  if (syntheticPricesQuery.TAG === /* GraphError */0) {
    return syntheticPricesQuery._0;
  }
  var syntheticPrices = syntheticPricesQuery._0;
  var marketName = Backend.getMarketInfoUnsafe(marketIndex.toNumber()).name;
  var syntheticTokenPrice = isLong ? syntheticPrices.priceSnapshotLong : syntheticPrices.priceSnapshotShort;
  var daiAmount = amount.mul(syntheticTokenPrice).div(CONSTANTS.tenToThe18);
  return React.createElement("div", {
              className: "flex items-center justify-between "
            }, React.createElement("p", undefined, marketName), React.createElement("span", {
                  className: "flex flex-row items-center"
                }, React.createElement("img", {
                      className: "h-4 mr-1",
                      src: CONSTANTS.daiDisplayToken.iconUrl
                    }), Misc.NumberFormat.formatEther(undefined, daiAmount)), React.createElement(Withdraw.make, {
                  marketIndex: marketIndex,
                  txState: txState,
                  contractExecutionHandler: contractExecutionHandler
                }));
}

var IncompleteWithdrawalItem = {
  make: User$IncompleteWithdrawalItem
};

function User$IncompleteWithdrawalsCard(Props) {
  var userId = Props.userId;
  var usersPendingRedeemsQuery = DataHooks.useUsersPendingRedeems(userId);
  var usersConfirmedRedeemsQuery = DataHooks.useUsersConfirmedRedeems(userId);
  var signer = ContractActions.useSigner(undefined);
  var match = ContractActions.useContractFunction(signer !== undefined ? signer : undefined);
  var txState = match[1];
  var contractExecutionHandler = match[0];
  WithdrawTxStatusModal.useWithdrawTxModal(txState);
  var tmp;
  if (typeof usersPendingRedeemsQuery === "number") {
    tmp = React.createElement("div", {
          className: "m-auto"
        }, React.createElement(Loader.Tiny.make, {}));
  } else if (usersPendingRedeemsQuery.TAG === /* GraphError */0) {
    tmp = usersPendingRedeemsQuery._0;
  } else {
    var pendingRedeems = usersPendingRedeemsQuery._0;
    tmp = pendingRedeems.length !== 0 ? React.createElement("div", {
            className: "p-5 mb-5 bg-white bg-opacity-75 rounded-lg shadow-lg"
          }, React.createElement("h1", {
                className: "text-center text-lg font-alphbeta mb-4 mt-2"
              }, "Pending redeems"), React.createElement("div", {
                className: "flex flex-col"
              }, Belt_Array.map(pendingRedeems, (function (pendingRedeem) {
                      return React.createElement(User$PendingRedeemItem, {
                                  pendingRedeem: pendingRedeem,
                                  userId: userId
                                });
                    })))) : null;
  }
  var tmp$1;
  if (typeof usersConfirmedRedeemsQuery === "number") {
    tmp$1 = React.createElement("div", {
          className: "m-auto"
        }, React.createElement(Loader.Tiny.make, {}));
  } else if (usersConfirmedRedeemsQuery.TAG === /* GraphError */0) {
    tmp$1 = usersConfirmedRedeemsQuery._0;
  } else {
    var confirmedRedeems = usersConfirmedRedeemsQuery._0;
    tmp$1 = confirmedRedeems.length !== 0 ? React.createElement("div", {
            className: "p-5 mb-5 bg-white bg-opacity-75 rounded-lg shadow-lg"
          }, React.createElement("h1", {
                className: "text-center text-lg font-alphbeta mb-4 mt-2"
              }, "Available withdrawals"), React.createElement("div", {
                className: "flex flex-col"
              }, Belt_Array.map(confirmedRedeems, (function (param) {
                      return React.createElement(User$IncompleteWithdrawalItem, {
                                  marketIndex: param.marketIndex,
                                  updateIndex: param.updateIndex,
                                  amount: param.amount,
                                  isLong: param.isLong,
                                  txState: txState,
                                  contractExecutionHandler: contractExecutionHandler
                                });
                    })))) : null;
  }
  return React.createElement(React.Fragment, undefined, tmp, tmp$1);
}

var IncompleteWithdrawalsCard = {
  make: User$IncompleteWithdrawalsCard
};

function User$UserProfileCard(Props) {
  var userInfo = Props.userInfo;
  var addressStr = DisplayAddress.ellipsifyMiddle(userInfo.id, 8, 3);
  var joinedStr = Format(userInfo.joinedAt, "do MMM ''yy");
  var txStr = userInfo.transactionCount.toString();
  var match = ContractHooks.useErc20BalanceRefresh(Config.config.contracts.Dai);
  var optDaiBalance = match.data;
  return React.createElement(UserUI.UserColumnCard.make, {
              children: null
            }, React.createElement(UserUI.UserProfileHeader.make, {
                  address: addressStr
                }), React.createElement(UserUI.UserColumnTextList.make, {
                  children: React.createElement("div", {
                        className: "px-4"
                      }, React.createElement(UserUI.UserColumnText.make, {
                            head: "üìÆ Address",
                            body: addressStr
                          }), optDaiBalance !== undefined ? React.createElement(UserUI.UserColumnText.make, {
                              icon: CONSTANTS.daiDisplayToken.iconUrl,
                              head: "DAI balance",
                              body: "$" + Misc.NumberFormat.formatEther(2, Caml_option.valFromOption(optDaiBalance))
                            }) : null, React.createElement(UserUI.UserColumnText.make, {
                            head: "üéâ Joined",
                            body: joinedStr
                          }), React.createElement(UserUI.UserColumnText.make, {
                            head: "üèÉ No. txs",
                            body: txStr
                          }))
                }));
}

var UserProfileCard = {
  make: User$UserProfileCard
};

function onQueryError(msg) {
  return React.createElement("div", {
              className: "w-full max-w-5xl mx-auto"
            }, React.createElement(UserUI.UserContainer.make, {
                  children: "Error: " + msg
                }));
}

function onQuerySuccess(data) {
  return React.createElement(UserUI.UserContainer.make, {
              children: React.createElement(Masonry.Container.make, {
                    children: null
                  }, React.createElement(Masonry.Divider.make, {
                        children: null
                      }, React.createElement(User$UserProfileCard, {
                            userInfo: data.userInfo
                          }), React.createElement(User$IncompleteWithdrawalsCard, {
                            userId: data.user
                          }), React.createElement(UserUI.UserFloatCard.make, {
                            userId: data.user,
                            stakes: data.stakes
                          })), React.createElement(Masonry.Divider.make, {
                        children: null
                      }, React.createElement(User$UserTotalInvestedCard, {
                            stakes: data.stakes,
                            userId: data.user
                          }), React.createElement(User$UserBalancesCard, {
                            userId: data.user
                          })), React.createElement(Masonry.Divider.make, {
                        children: null
                      }, React.createElement(User$UserTotalStakedCard, {
                            stakes: data.stakes
                          }), React.createElement(UserUI.UserStakesCard.make, {
                            stakes: data.stakes,
                            userId: data.user
                          })))
            });
}

function User(Props) {
  var optCurrentUser = RootProvider.useCurrentUser(undefined);
  var router = Router.useRouter();
  var userStr = Js_dict.get(router.query, "user");
  var user = userStr !== undefined ? userStr.toLowerCase() : "No user provided";
  var stakesQuery = DataHooks.useStakesForUser(user);
  var userInfoQuery = DataHooks.useBasicUserInfo(user);
  var notCurrentUserMessage = function (param) {
    return React.createElement(UserUI.UserColumnTextCenter.make, {
                children: React.createElement("a", {
                      className: "mt-4 hover:text-gray-600",
                      href: Config.blockExplorer + "address/" + user,
                      rel: "noopener noreferrer",
                      target: "_"
                    }, React.createElement("h1", undefined, "This user has not interacted with float.capital yet"))
              });
  };
  var msg = DataHooks.liftGraphResponse2(stakesQuery, userInfoQuery);
  if (typeof msg === "number") {
    return React.createElement(Loader.make, {});
  }
  if (msg.TAG === /* GraphError */0) {
    return onQueryError(msg._0);
  }
  var match = msg._0;
  var userInfo = match[1];
  if (userInfo) {
    return onQuerySuccess({
                user: user,
                userInfo: userInfo._0,
                stakes: match[0]
              });
  } else {
    return React.createElement("div", {
                className: "w-full max-w-5xl mx-auto"
              }, React.createElement("div", {
                    className: "max-w-xl mx-auto"
                  }, React.createElement(UserUI.UserColumnCard.make, {
                        children: React.createElement("div", {
                              className: "p-4"
                            }, React.createElement(UserUI.UserProfileHeader.make, {
                                  address: user
                                }), optCurrentUser !== undefined && Ethers.Utils.ethAdrToLowerStr(Caml_option.valFromOption(optCurrentUser)) === user ? React.createElement(React.Fragment, undefined, React.createElement(UserUI.UserColumnTextCenter.make, {
                                        children: React.createElement("p", {
                                              className: "my-2"
                                            }, "Mint a position to see data on your profile")
                                      }), React.createElement("div", {
                                        className: "w-40 mx-auto"
                                      }, React.createElement(Link, {
                                            href: "/app/markets",
                                            children: React.createElement(Button.Small.make, {
                                                  children: "MARKETS"
                                                })
                                          }))) : notCurrentUserMessage(undefined))
                      })));
  }
}

var make = User;

var $$default = User;

exports.add = add;
exports.mul = mul;
exports.div = div;
exports.toNumber = toNumber;
exports.eq = eq;
exports.toString = toString;
exports.getUsersTotalTokenBalance = getUsersTotalTokenBalance;
exports.UserPendingMintItem = UserPendingMintItem;
exports.UserBalancesCard = UserBalancesCard;
exports.getUsersTotalStakeValue = getUsersTotalStakeValue;
exports.UserTotalInvestedCard = UserTotalInvestedCard;
exports.UserTotalStakedCard = UserTotalStakedCard;
exports.PendingRedeemItem = PendingRedeemItem;
exports.IncompleteWithdrawalItem = IncompleteWithdrawalItem;
exports.IncompleteWithdrawalsCard = IncompleteWithdrawalsCard;
exports.UserProfileCard = UserProfileCard;
exports.onQueryError = onQueryError;
exports.onQuerySuccess = onQuerySuccess;
exports.make = make;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/* Misc Not a pure module */
