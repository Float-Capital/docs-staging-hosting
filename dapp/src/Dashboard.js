// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Ethers from "./ethereum/Ethers.js";
import * as DaiBalance from "./components/ExampleViewFunctions/DaiBalance.js";
import * as Router from "next/router";
import * as RootProvider from "./libraries/RootProvider.js";
import * as GqlConverters from "./libraries/GqlConverters.js";
import FromUnixTime from "date-fns/fromUnixTime";
import FormatDistanceToNow from "date-fns/formatDistanceToNow";
import * as ApolloClient__React_Hooks_UseQuery from "rescript-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  query   {
    systemStates(first: 1, orderBy: timestamp, orderDirection: desc)  {
      __typename
      timestamp
      txHash
      blockNumber
      syntheticPrice
      longTokenPrice
      shortTokenPrice
      totalLockedLong
      totalLockedShort
      totalValueLocked
      setBy
    }
  }
`);

function parse(value) {
  var value$1 = value.systemStates;
  return {
          systemStates: value$1.map(function (value) {
                return {
                        __typename: value.__typename,
                        timestamp: GqlConverters.$$BigInt.parse(value.timestamp),
                        txHash: GqlConverters.Bytes.parse(value.txHash),
                        blockNumber: GqlConverters.$$BigInt.parse(value.blockNumber),
                        syntheticPrice: GqlConverters.$$BigInt.parse(value.syntheticPrice),
                        longTokenPrice: GqlConverters.$$BigInt.parse(value.longTokenPrice),
                        shortTokenPrice: GqlConverters.$$BigInt.parse(value.shortTokenPrice),
                        totalLockedLong: GqlConverters.$$BigInt.parse(value.totalLockedLong),
                        totalLockedShort: GqlConverters.$$BigInt.parse(value.totalLockedShort),
                        totalValueLocked: GqlConverters.$$BigInt.parse(value.totalValueLocked),
                        setBy: GqlConverters.Bytes.parse(value.setBy)
                      };
              })
        };
}

function serialize(value) {
  var value$1 = value.systemStates;
  var systemStates = value$1.map(function (value) {
        var value$1 = value.setBy;
        var value$2 = GqlConverters.Bytes.serialize(value$1);
        var value$3 = value.totalValueLocked;
        var value$4 = GqlConverters.$$BigInt.serialize(value$3);
        var value$5 = value.totalLockedShort;
        var value$6 = GqlConverters.$$BigInt.serialize(value$5);
        var value$7 = value.totalLockedLong;
        var value$8 = GqlConverters.$$BigInt.serialize(value$7);
        var value$9 = value.shortTokenPrice;
        var value$10 = GqlConverters.$$BigInt.serialize(value$9);
        var value$11 = value.longTokenPrice;
        var value$12 = GqlConverters.$$BigInt.serialize(value$11);
        var value$13 = value.syntheticPrice;
        var value$14 = GqlConverters.$$BigInt.serialize(value$13);
        var value$15 = value.blockNumber;
        var value$16 = GqlConverters.$$BigInt.serialize(value$15);
        var value$17 = value.txHash;
        var value$18 = GqlConverters.Bytes.serialize(value$17);
        var value$19 = value.timestamp;
        var value$20 = GqlConverters.$$BigInt.serialize(value$19);
        var value$21 = value.__typename;
        return {
                __typename: value$21,
                timestamp: value$20,
                txHash: value$18,
                blockNumber: value$16,
                syntheticPrice: value$14,
                longTokenPrice: value$12,
                shortTokenPrice: value$10,
                totalLockedLong: value$8,
                totalLockedShort: value$6,
                totalValueLocked: value$4,
                setBy: value$2
              };
      });
  return {
          systemStates: systemStates
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var LatestSystemState_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var use = include.use;

var LatestSystemState_refetchQueryDescription = include.refetchQueryDescription;

var LatestSystemState_useLazy = include.useLazy;

var LatestSystemState_useLazyWithVariables = include.useLazyWithVariables;

var LatestSystemState = {
  LatestSystemState_inner: LatestSystemState_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: LatestSystemState_refetchQueryDescription,
  use: use,
  useLazy: LatestSystemState_useLazy,
  useLazyWithVariables: LatestSystemState_useLazyWithVariables
};

function Dashboard$Access(Props) {
  var children = Props.children;
  var optUser = RootProvider.useCurrentUser(undefined);
  var router = Router.useRouter();
  if (optUser !== undefined) {
    return children;
  } else {
    return React.createElement("h1", {
                onClick: (function (param) {
                    router.push("/login?nextPath=/dashboard");
                    
                  })
              }, "Login to view your dashboard");
  }
}

var Access = {
  make: Dashboard$Access
};

function Dashboard(Props) {
  var match = Curry.app(use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var match$1 = match.data;
  var tmp;
  if (match.loading) {
    tmp = "Loading...";
  } else if (match.error !== undefined) {
    tmp = "Error loading data";
  } else if (match$1 !== undefined) {
    var match$2 = match$1.systemStates;
    if (match$2.length !== 1) {
      tmp = "Query returned wrong number of results";
    } else {
      var match$3 = match$2[0];
      var timeSinceUpdate = FormatDistanceToNow(FromUnixTime(match$3.timestamp.toNumber()));
      tmp = React.createElement(React.Fragment, undefined, React.createElement("a", {
                href: "https://goerli.etherscan.io/tx/" + match$3.txHash
              }, "Latest update happened " + timeSinceUpdate + " ago. (view on block-explorer) by " + match$3.setBy), React.createElement("p", undefined, "SyntheticPrice " + Ethers.Utils.formatEther(match$3.syntheticPrice) + "$"), React.createElement("p", undefined, "Long Token Price " + Ethers.Utils.formatEther(match$3.longTokenPrice) + "$"), React.createElement("p", undefined, "Short Token Price " + Ethers.Utils.formatEther(match$3.shortTokenPrice) + "$"), React.createElement("p", undefined, "Total locked long " + Ethers.Utils.formatEther(match$3.totalLockedLong) + "$"), React.createElement("p", undefined, "Total Locked Short " + Ethers.Utils.formatEther(match$3.totalLockedShort) + "$"), React.createElement("p", undefined, "Total Locked " + Ethers.Utils.formatEther(match$3.totalValueLocked) + "$"), React.createElement("p", undefined, "TODO:"), React.createElement("p", undefined, "show the ratio of long to short in the same chart"), React.createElement("p", undefined, "show historic returns of long asset (history APY)"), React.createElement("p", undefined, "show current APY on opposing side (probably short)"));
    }
  } else {
    tmp = "You might think this is impossible, but depending on the situation it might not be!";
  }
  return React.createElement(Dashboard$Access, {
              children: null
            }, React.createElement("h1", undefined, "Dashboard"), React.createElement(DaiBalance.make, {}), tmp);
}

var make = Dashboard;

var $$default = Dashboard;

export {
  LatestSystemState ,
  Access ,
  make ,
  $$default ,
  $$default as default,
  
}
/* query Not a pure module */
