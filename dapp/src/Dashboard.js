// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Login from "./components/Login/Login.js";
import * as React from "react";
import * as Ethers from "./ethereum/Ethers.js";
import * as Queries from "./data/Queries.js";
import * as Tooltip from "./components/UI/Tooltip.js";
import Link from "next/link";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as MiniLoader from "./components/UI/MiniLoader.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as DashboardLi from "./components/UI/Dashboard/DashboardLi.js";
import * as DashboardUl from "./components/UI/Dashboard/DashboardUl.js";
import * as FormatMoney from "./components/UI/FormatMoney.js";
import * as Router from "next/router";
import * as AccessControl from "./components/AccessControl.js";
import * as DashboardCalcs from "./libraries/DashboardCalcs.js";
import * as DashboardStakeCard from "./components/UI/Dashboard/DashboardStakeCard.js";
import FromUnixTime from "date-fns/fromUnixTime";
import FormatDistanceToNow from "date-fns/formatDistanceToNow";

function Dashboard$Divider(Props) {
  var children = Props.children;
  return React.createElement("div", {
              className: "my-4 w-full md:w-1/3 px-3 md:px-0 md:m-4"
            }, children);
}

var Divider = {
  make: Dashboard$Divider
};

function Dashboard$Card(Props) {
  var children = Props.children;
  return React.createElement("div", {
              className: "bg-white w-full bg-opacity-75 rounded-lg shadow-lg mb-5"
            }, children);
}

var Card = {
  make: Dashboard$Card
};

function Dashboard$Header(Props) {
  var children = Props.children;
  return React.createElement("h1", {
              className: "font-bold text-center pt-5 text-lg font-alphbeta"
            }, children);
}

var Header = {
  make: Dashboard$Header
};

function Dashboard$TrendingStakes(Props) {
  var stakeDetailsQuery = Curry.app(Queries.StakingDetails.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var match = stakeDetailsQuery.data;
  if (stakeDetailsQuery.loading) {
    return React.createElement("div", {
                className: "m-auto"
              }, React.createElement(MiniLoader.make, {}));
  }
  if (stakeDetailsQuery.error !== undefined) {
    return "Error loading data";
  }
  if (match === undefined) {
    return "You might think this is impossible, but depending on the situation it might not be!";
  }
  var trendingStakes = DashboardCalcs.trendingStakes(match.syntheticMarkets);
  return Belt_Array.map(trendingStakes, (function (param) {
                var isLong = param.isLong;
                var marketName = param.marketName;
                return React.createElement(DashboardStakeCard.make, {
                            marketName: marketName,
                            isLong: isLong,
                            yield: param.apy,
                            rewards: param.floatApy,
                            key: marketName + (
                              isLong ? "-long" : "-short"
                            )
                          });
              }));
}

var TrendingStakes = {
  make: Dashboard$TrendingStakes
};

function totalValueCard(totalValueLocked) {
  return React.createElement("div", {
              className: "mx-3 p-5 md:mt-7 self-center text-center bg-white bg-opacity-75 rounded-lg shadow-lg"
            }, React.createElement("span", {
                  className: "font-alphbeta text-xl"
                }, "Total Value"), React.createElement("span", {
                  className: "text-sm"
                }, " üè¶ of Float Protocol: "), React.createElement("span", {
                  className: "text-green-700"
                }, "$" + FormatMoney.formatEther(totalValueLocked)));
}

function floatProtocolCard(liveSince, totalTxs, totalUsers, totalGasUsed) {
  var dateObj = FromUnixTime(liveSince.toNumber());
  return React.createElement(Dashboard$Card, {
              children: null
            }, React.createElement(Dashboard$Header, {
                  children: "Float Protocol üèóÔ∏è"
                }), React.createElement(DashboardUl.make, {
                  list: [
                    DashboardLi.Props.createDashboardLiProps(undefined, "üìÖ Live since:", dateObj.toDateString() + " (" + FormatDistanceToNow(dateObj) + ")", undefined),
                    DashboardLi.Props.createDashboardLiProps(undefined, "üìà No. Txs:", totalTxs.toString(), undefined),
                    DashboardLi.Props.createDashboardLiProps(undefined, "üëØ‚Äç‚ôÄÔ∏è No. Users:", totalUsers.toString(), undefined),
                    DashboardLi.Props.createDashboardLiProps(undefined, "‚õΩ Gas used:", totalGasUsed.toString(), undefined)
                  ]
                }));
}

function syntheticAssetsCard(totalSynthValue, numberOfSynths) {
  return React.createElement(Dashboard$Card, {
              children: null
            }, React.createElement(Dashboard$Header, {
                  children: null
                }, "Synthetic Assets", React.createElement("img", {
                      className: "inline h-5 ml-2",
                      src: "/img/coin.png"
                    })), React.createElement(DashboardUl.make, {
                  list: [
                    DashboardLi.Props.createDashboardLiProps(Caml_option.some(React.createElement(Tooltip.make, {
                                  tip: "Redeemable value of synths in the open market"
                                })), "üí∞ Total Synth Value: ", "$" + FormatMoney.formatEther(totalSynthValue), undefined),
                    DashboardLi.Props.createDashboardLiProps(undefined, "üë∑‚Äç‚ôÄÔ∏è No. Synths:", numberOfSynths, undefined)
                  ]
                }), React.createElement(Link, {
                  href: "/markets",
                  children: React.createElement("div", {
                        className: "w-full p-4 pr-5 text-sm cursor-pointer"
                      }, React.createElement("div", {
                            className: "ml-10"
                          }, "üëÄ See Markets"), React.createElement("div", {
                            className: "ml-20"
                          }, "to learn more..."))
                }));
}

function floatTokenCard(totalFloatMinted) {
  return React.createElement(Dashboard$Card, {
              children: null
            }, React.createElement(Dashboard$Header, {
                  children: "üåäüåä Float Token üåäüåä"
                }), React.createElement(DashboardUl.make, {
                  list: [
                    DashboardLi.Props.createDashboardLiProps(undefined, "üòè Float Price:", "...", undefined),
                    DashboardLi.Props.createDashboardLiProps(Caml_option.some(React.createElement(Tooltip.make, {
                                  tip: "The number of Float tokens in circulation"
                                })), "üï∂Ô∏è Float Supply:", Ethers.Utils.formatEtherToPrecision(totalFloatMinted, 2), undefined),
                    DashboardLi.Props.createDashboardLiProps(undefined, "üß¢ Market cap: ", "...", undefined)
                  ]
                }));
}

function stakingCard(totalValueStaked) {
  return React.createElement(Dashboard$Card, {
              children: null
            }, React.createElement(Dashboard$Header, {
                  children: "Staking üî•"
                }), React.createElement("div", {
                  className: "text-center mt-5"
                }, React.createElement("span", {
                      className: "text-sm mr-1"
                    }, "üí∞ Total Staked Value: "), "$" + FormatMoney.formatEther(totalValueStaked)), React.createElement("div", {
                  className: "text-center mt-5 text-sm"
                }, "Trending"), React.createElement("div", {
                  className: "pt-2 pb-5"
                }, React.createElement(Dashboard$TrendingStakes, {})));
}

function Dashboard(Props) {
  var router = Router.useRouter();
  var globalStateQuery = Curry.app(Queries.GlobalState.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var marketDetailsQuery = Curry.app(Queries.MarketDetails.use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var match = globalStateQuery.data;
  var tmp;
  if (globalStateQuery.loading) {
    tmp = React.createElement(MiniLoader.make, {});
  } else if (marketDetailsQuery.loading) {
    tmp = React.createElement(MiniLoader.make, {});
  } else if (marketDetailsQuery.error !== undefined || globalStateQuery.error !== undefined) {
    tmp = "Error loading data";
  } else if (marketDetailsQuery.data !== undefined && match !== undefined) {
    var match$1 = match.globalStates;
    if (match$1.length !== 1) {
      tmp = "Error getting data";
    } else {
      var match$2 = match$1[0];
      var syntheticMarkets = marketDetailsQuery.data.syntheticMarkets;
      var match$3 = DashboardCalcs.getTotalValueLockedAndTotalStaked(syntheticMarkets);
      var totalValueStaked = match$3.totalValueStaked;
      var totalValueLocked = match$3.totalValueLocked;
      var totalSynthValue = DashboardCalcs.getTotalSynthValue(totalValueLocked, totalValueStaked);
      var numberOfSynths = String((syntheticMarkets.length << 1));
      tmp = React.createElement("div", {
            className: "min-w-3/4 max-w-full flex flex-col self-center items-center justify-start"
          }, totalValueCard(totalValueLocked), React.createElement("div", {
                className: "w-full flex flex-col md:flex-row justify-between mt-1"
              }, React.createElement(Dashboard$Divider, {
                    children: floatProtocolCard(match$2.timestampLaunched, match$2.totalTxs, match$2.totalUsers, match$2.totalGasUsed)
                  }), React.createElement(Dashboard$Divider, {
                    children: null
                  }, syntheticAssetsCard(totalSynthValue, numberOfSynths), floatTokenCard(match$2.totalFloatMinted)), React.createElement(Dashboard$Divider, {
                    children: stakingCard(totalValueStaked)
                  })));
    }
  } else {
    tmp = "Error getting data";
  }
  return React.createElement(AccessControl.make, {
              children: React.createElement("div", {
                    className: "w-screen absolute flex flex-col left-0 top-0 mt-20 overflow-x-hidden"
                  }, React.createElement(React.Fragment, undefined, tmp)),
              alternateComponent: React.createElement("h1", {
                    onClick: (function (param) {
                        router.push("/login?nextPath=/dashboard");
                        
                      })
                  }, React.createElement(Login.make, {}))
            });
}

var make = Dashboard;

var $$default = Dashboard;

export {
  Divider ,
  Card ,
  Header ,
  TrendingStakes ,
  totalValueCard ,
  floatProtocolCard ,
  syntheticAssetsCard ,
  floatTokenCard ,
  stakingCard ,
  make ,
  $$default ,
  $$default as default,
  
}
/* Login Not a pure module */
