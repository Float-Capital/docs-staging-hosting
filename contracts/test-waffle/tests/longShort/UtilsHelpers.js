// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var CONSTANTS = require("../../CONSTANTS.js");

function testUnit(contracts, param) {
  describe("Long Short Utilities and helpers", (function () {
          describe("_getYieldSplit", (function () {
                  var test = function (marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenShort) {
                    var totalValueLockedInMarket = Globals.add(marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenShort);
                    var isLongSideUnderbalanced = Globals.bnGte(marketSideValueInPaymentTokenShort, marketSideValueInPaymentTokenLong);
                    var imbalance = isLongSideUnderbalanced ? Globals.sub(marketSideValueInPaymentTokenShort, marketSideValueInPaymentTokenLong) : Globals.sub(marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenShort);
                    return LetOps.AwaitThen.let_(contracts.contents.longShort.marketTreasurySplitGradient_e18(1), (function (marketTreasurySplitGradient_e18) {
                                  var marketPercentCalculated_e18 = Globals.div(Globals.mul(imbalance, marketTreasurySplitGradient_e18), totalValueLockedInMarket);
                                  var marketPercent_e18 = Globals.bnMin(marketPercentCalculated_e18, CONSTANTS.tenToThe18);
                                  var treasuryPercent_e18 = Globals.sub(CONSTANTS.tenToThe18, marketPercent_e18);
                                  return LetOps.Await.let_(contracts.contents.longShort._getYieldSplitExposed(1, marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenShort, totalValueLockedInMarket), (function (actualResult) {
                                                return Chai.bnEqual("expectedResult and result after `_getYieldSplit` not the same", treasuryPercent_e18, actualResult.treasuryYieldPercent_e18);
                                              }));
                                }));
                  };
                  it("works as expected if longValue > shortValue", (function () {
                          var marketSideValueInPaymentTokenShort = Helpers.randomTokenAmount(undefined);
                          var marketSideValueInPaymentTokenLong = Globals.add(marketSideValueInPaymentTokenShort, Helpers.randomTokenAmount(undefined));
                          return test(marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenShort);
                        }));
                  it("works as expected if shortValue > longValue", (function () {
                          var marketSideValueInPaymentTokenLong = Helpers.randomTokenAmount(undefined);
                          var marketSideValueInPaymentTokenShort = Globals.add(marketSideValueInPaymentTokenLong, Helpers.randomTokenAmount(undefined));
                          return test(marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenShort);
                        }));
                  it("works as expected if shortValue == longValue", (function () {
                          var marketSideValueInPaymentTokenLong = Helpers.randomTokenAmount(undefined);
                          return test(marketSideValueInPaymentTokenLong, marketSideValueInPaymentTokenLong);
                        }));
                  
                }));
          
        }));
  
}

exports.testUnit = testUnit;
/* Chai Not a pure module */
