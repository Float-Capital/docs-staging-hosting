// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");

function testUnit(contracts, accounts) {
  describe("updateSystemState", (function () {
          
        }));
  
}

function testIntegration(contracts, accounts) {
  describe("updateSystemState", (function () {
          it("distribute yield to markets flow", (function () {
                  var match = contracts.contents;
                  var longShort = match.longShort;
                  var match$1 = match.markets[0];
                  var marketIndex = match$1.marketIndex;
                  var yieldManager = match$1.yieldManager;
                  var oracleManager = match$1.oracleManager;
                  var amountOfYieldToAward = Globals.bnFromString("3216543216543216542");
                  return LetOps.Await.let_(longShort.syntheticTokenPoolValue(marketIndex, true), (function (longTokenPoolValueBefore) {
                                return LetOps.Await.let_(longShort.syntheticTokenPoolValue(marketIndex, false), (function (shortTokenPoolValueBefore) {
                                              return LetOps.Await.let_(yieldManager.totalReservedForTreasury(), (function (totalDueForTreasuryBefore) {
                                                            var totalValueRelatedToMarketBefore = Globals.add(Globals.add(longTokenPoolValueBefore, shortTokenPoolValueBefore), totalDueForTreasuryBefore);
                                                            yieldManager.settleWithYieldAbsolute(amountOfYieldToAward);
                                                            return LetOps.Await.let_(oracleManager.getLatestPrice(), (function (currentOraclePrice) {
                                                                          return LetOps.Await.let_(oracleManager.setPrice(Globals.add(currentOraclePrice, Globals.bnFromInt(1))), (function (param) {
                                                                                        return LetOps.Await.let_(longShort.updateSystemState(marketIndex), (function (param) {
                                                                                                      return LetOps.Await.let_(longShort.syntheticTokenPoolValue(marketIndex, true), (function (longTokenPoolValueAfter) {
                                                                                                                    return LetOps.Await.let_(longShort.syntheticTokenPoolValue(marketIndex, false), (function (shortTokenPoolValueAfter) {
                                                                                                                                  return LetOps.Await.let_(yieldManager.totalReservedForTreasury(), (function (totalDueForTreasuryAfter) {
                                                                                                                                                var totalValueRelatedToMarketAfter = Globals.add(Globals.add(longTokenPoolValueAfter, shortTokenPoolValueAfter), totalDueForTreasuryAfter);
                                                                                                                                                return Chai.bnEqual("yield is either being lost or over-allocated - should be exactly the same", Globals.add(totalValueRelatedToMarketBefore, amountOfYieldToAward), totalValueRelatedToMarketAfter);
                                                                                                                                              }));
                                                                                                                                }));
                                                                                                                  }));
                                                                                                    }));
                                                                                      }));
                                                                        }));
                                                          }));
                                            }));
                              }));
                }));
          it("cannot call updateSystemState on a market that doesn't exist", (function () {
                  return Chai.expectRevert(contracts.contents.longShort.updateSystemState(321321654), "market doesn't exist");
                }));
          
        }));
  
}

exports.testUnit = testUnit;
exports.testIntegration = testIntegration;
/* Chai Not a pure module */
