// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var Chai$1 = require("chai");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var Contract = require("../../library/Contract.js");
var LongShortStateSetters = require("../../library/LongShortStateSetters.js");
var SyntheticTokenSmocked = require("../../library/smock/SyntheticTokenSmocked.js");
var YieldManagerMockSmocked = require("../../library/smock/YieldManagerMockSmocked.js");

function testUnit(contracts, param) {
  return Globals.describeUnit("Execute next price action", (function (param) {
                var marketIndex = Helpers.randomJsInteger(undefined);
                var user = Helpers.randomAddress(undefined);
                Globals.before_once$p(function (param) {
                      return LongShortStateSetters.turnOffMocking(contracts.contents.longShort);
                    });
                describe("_executeOutstandingNextPriceMints", (function () {
                        var setup = function (isLong, userNextPrice_syntheticToken_redeemAmount, userNextPrice_currentUpdateIndex, syntheticToken_priceSnapshot) {
                          var match = contracts.contents;
                          var syntheticToken2Smocked = match.syntheticToken2Smocked;
                          var syntheticToken1Smocked = match.syntheticToken1Smocked;
                          syntheticToken1Smocked.transfer.returns(true);
                          syntheticToken2Smocked.transfer.returns(true);
                          return match.longShort.setExecuteOutstandingNextPriceMintsGlobals(marketIndex, user, isLong, (
                                      isLong ? syntheticToken1Smocked : syntheticToken2Smocked
                                    ).address, userNextPrice_syntheticToken_redeemAmount, userNextPrice_currentUpdateIndex, syntheticToken_priceSnapshot);
                        };
                        var testExecuteOutstandingNextPriceMints = function (isLong) {
                          describe("userNextPriceDepositAmount == 0", (function () {
                                  var executeOutstandingNextPriceMintsTx = {
                                    contents: "Undefined"
                                  };
                                  Globals.before_once$p(function (param) {
                                        var match = contracts.contents;
                                        var syntheticToken2Smocked = match.syntheticToken2Smocked;
                                        var syntheticToken1Smocked = match.syntheticToken1Smocked;
                                        var longShort = match.longShort;
                                        return LetOps.Await.let_(setup(isLong, Globals.zeroBn, Helpers.randomInteger(undefined), Helpers.randomTokenAmount(undefined)), (function (param) {
                                                      (
                                                          isLong ? syntheticToken1Smocked : syntheticToken2Smocked
                                                        ).transfer.reset();
                                                      executeOutstandingNextPriceMintsTx.contents = longShort._executeOutstandingNextPriceMintsExposed(marketIndex, user, isLong);
                                                      
                                                    }));
                                      });
                                  it("should not call any functions or change any state", (function () {
                                          var match = contracts.contents;
                                          var syntheticToken2Smocked = match.syntheticToken2Smocked;
                                          var syntheticToken1Smocked = match.syntheticToken1Smocked;
                                          return LetOps.Await.let_(executeOutstandingNextPriceMintsTx.contents, (function (param) {
                                                        Chai$1.expect((
                                                                isLong ? syntheticToken1Smocked : syntheticToken2Smocked
                                                              ).transfer).to.have.callCount(0);
                                                        
                                                      }));
                                        }));
                                  it("should not emit the ExecuteNextPriceMintSettlementUser event", (function () {
                                          return Chai.expectToNotEmit(Chai.callEmitEvents(executeOutstandingNextPriceMintsTx.contents, contracts.contents.longShort, "ExecuteNextPriceMintSettlementUser"));
                                        }));
                                  
                                }));
                          describe("userNextPriceDepositAmount > 0", (function () {
                                  var executeOutstandingNextPriceMintsTx = {
                                    contents: "Undefined"
                                  };
                                  var userNextPrice_syntheticToken_redeemAmount = Helpers.randomTokenAmount(undefined);
                                  var syntheticToken_priceSnapshot = Helpers.randomTokenAmount(undefined);
                                  Globals.before_once$p(function (param) {
                                        return LetOps.Await.let_(setup(isLong, userNextPrice_syntheticToken_redeemAmount, Helpers.randomInteger(undefined), syntheticToken_priceSnapshot), (function (param) {
                                                      executeOutstandingNextPriceMintsTx.contents = contracts.contents.longShort._executeOutstandingNextPriceMintsExposed(marketIndex, user, isLong);
                                                      
                                                    }));
                                      });
                                  it("should call transfer on the correct amount of synthetic tokens to the user", (function () {
                                          var match = contracts.contents;
                                          var syntheticToken2Smocked = match.syntheticToken2Smocked;
                                          var syntheticToken1Smocked = match.syntheticToken1Smocked;
                                          return LetOps.Await.let_(executeOutstandingNextPriceMintsTx.contents, (function (param) {
                                                        var expectedAmountOfSynthToRecieve = Contract.LongShortHelpers.calcAmountSyntheticToken(userNextPrice_syntheticToken_redeemAmount, syntheticToken_priceSnapshot);
                                                        return SyntheticTokenSmocked.transferCallCheck(isLong ? syntheticToken1Smocked : syntheticToken2Smocked, {
                                                                    recipient: user,
                                                                    amount: expectedAmountOfSynthToRecieve
                                                                  });
                                                      }));
                                        }));
                                  it("should reset userNextPriceDepositAmount to zero", (function () {
                                          return LetOps.Await.let_(contracts.contents.longShort.userNextPrice_paymentToken_depositAmount(marketIndex, isLong, user), (function (userNextPriceDepositAmount) {
                                                        return Chai.bnEqual(undefined, Globals.zeroBn, userNextPriceDepositAmount);
                                                      }));
                                        }));
                                  
                                }));
                          
                        };
                        describe("Long Side", (function () {
                                return testExecuteOutstandingNextPriceMints(true);
                              }));
                        describe("Short Side", (function () {
                                return testExecuteOutstandingNextPriceMints(false);
                              }));
                        
                      }));
                describe("_executeOutstandingNextPriceRedeems", (function () {
                        var yieldManagerSmocked = {
                          contents: undefined
                        };
                        var setup = function (isLong, userNextPrice_syntheticToken_redeemAmount, userNextPrice_currentUpdateIndex, syntheticToken_priceSnapshot) {
                          var match = contracts.contents;
                          var longShort = match.longShort;
                          return LetOps.Await.let_(YieldManagerMockSmocked.make(undefined), (function (smockedYieldManeger) {
                                        yieldManagerSmocked.contents = smockedYieldManeger;
                                        return longShort.setExecuteOutstandingNextPriceRedeemsGlobals(marketIndex, user, isLong, smockedYieldManeger.address, userNextPrice_syntheticToken_redeemAmount, userNextPrice_currentUpdateIndex, syntheticToken_priceSnapshot);
                                      }));
                        };
                        var testExecuteOutstandingNextPriceRedeems = function (isLong) {
                          describe("userNextPriceDepositAmount == 0", (function () {
                                  var executeOutstandingNextPriceRedeemsTx = {
                                    contents: "Undefined"
                                  };
                                  Globals.before_once$p(function (param) {
                                        return LetOps.Await.let_(setup(isLong, Globals.zeroBn, Helpers.randomInteger(undefined), Helpers.randomTokenAmount(undefined)), (function (param) {
                                                      executeOutstandingNextPriceRedeemsTx.contents = contracts.contents.longShort._executeOutstandingNextPriceRedeemsExposed(marketIndex, user, isLong);
                                                      
                                                    }));
                                      });
                                  it("should not call any functions or change any state", (function () {
                                          return LetOps.Await.let_(executeOutstandingNextPriceRedeemsTx.contents, (function (param) {
                                                        Chai$1.expect(yieldManagerSmocked.contents.transferPaymentTokensToUser).to.have.callCount(0);
                                                        
                                                      }));
                                        }));
                                  it("should not emit the ExecuteNextPriceRedeemSettlementUser event", (function () {
                                          return Chai.expectToNotEmit(Chai.callEmitEvents(executeOutstandingNextPriceRedeemsTx.contents, contracts.contents.longShort, "ExecuteNextPriceRedeemSettlementUser"));
                                        }));
                                  
                                }));
                          describe("userNextPriceDepositAmount > 0", (function () {
                                  var executeOutstandingNextPriceRedeemsTx = {
                                    contents: "Undefined"
                                  };
                                  var userNextPrice_syntheticToken_redeemAmount = Helpers.randomTokenAmount(undefined);
                                  var syntheticToken_priceSnapshot = Helpers.randomTokenAmount(undefined);
                                  Globals.before_once$p(function (param) {
                                        return LetOps.Await.let_(setup(isLong, userNextPrice_syntheticToken_redeemAmount, Helpers.randomInteger(undefined), syntheticToken_priceSnapshot), (function (param) {
                                                      executeOutstandingNextPriceRedeemsTx.contents = contracts.contents.longShort._executeOutstandingNextPriceRedeemsExposed(marketIndex, user, isLong);
                                                      
                                                    }));
                                      });
                                  it("should call transfer on the correct amount of Payment Tokens to the user", (function () {
                                          return LetOps.Await.let_(executeOutstandingNextPriceRedeemsTx.contents, (function (param) {
                                                        var expectedAmountOfPaymentTokenToRecieve = Contract.LongShortHelpers.calcAmountPaymentToken(userNextPrice_syntheticToken_redeemAmount, syntheticToken_priceSnapshot);
                                                        return YieldManagerMockSmocked.transferPaymentTokensToUserCallCheck(yieldManagerSmocked.contents, {
                                                                    user: user,
                                                                    amount: expectedAmountOfPaymentTokenToRecieve
                                                                  });
                                                      }));
                                        }));
                                  it("should reset userNextPriceDepositAmount to zero", (function () {
                                          return LetOps.Await.let_(contracts.contents.longShort.userNextPrice_paymentToken_depositAmount(marketIndex, isLong, user), (function (userNextPriceDepositAmount) {
                                                        return Chai.bnEqual(undefined, Globals.zeroBn, userNextPriceDepositAmount);
                                                      }));
                                        }));
                                  
                                }));
                          
                        };
                        describe("Long Side", (function () {
                                return testExecuteOutstandingNextPriceRedeems(true);
                              }));
                        describe("Short Side", (function () {
                                return testExecuteOutstandingNextPriceRedeems(false);
                              }));
                        
                      }));
                describe("_executeOutstandingNextPriceTokenShifts", (function () {
                        var setup = function (isShiftFromLong, userNextPrice_syntheticToken_toShiftAwayFrom_marketSide, userNextPrice_currentUpdateIndex, syntheticToken_priceSnapshotShiftedFrom, syntheticToken_priceSnapshotShiftedTo) {
                          var match = contracts.contents;
                          var syntheticToken2Smocked = match.syntheticToken2Smocked;
                          var syntheticToken1Smocked = match.syntheticToken1Smocked;
                          syntheticToken1Smocked.transfer.returns(true);
                          syntheticToken2Smocked.transfer.returns(true);
                          return match.longShort.setExecuteOutstandingNextPriceTokenShiftsGlobals(marketIndex, user, isShiftFromLong, (
                                      isShiftFromLong ? syntheticToken1Smocked : syntheticToken2Smocked
                                    ).address, userNextPrice_syntheticToken_toShiftAwayFrom_marketSide, userNextPrice_currentUpdateIndex, syntheticToken_priceSnapshotShiftedFrom, syntheticToken_priceSnapshotShiftedTo);
                        };
                        var testExecuteOutstandingNextPriceRedeems = function (isShiftFromLong) {
                          describe("syntheticToken_toShiftAwayFrom_marketSide == 0", (function () {
                                  var executeOutstandingNextPriceRedeemsTx = {
                                    contents: "Undefined"
                                  };
                                  Globals.before_once$p(function (param) {
                                        var match = contracts.contents;
                                        var syntheticToken2Smocked = match.syntheticToken2Smocked;
                                        var syntheticToken1Smocked = match.syntheticToken1Smocked;
                                        var longShort = match.longShort;
                                        return LetOps.Await.let_(setup(isShiftFromLong, Globals.zeroBn, Helpers.randomInteger(undefined), Helpers.randomTokenAmount(undefined), Helpers.randomTokenAmount(undefined)), (function (param) {
                                                      (
                                                          isShiftFromLong ? syntheticToken1Smocked : syntheticToken2Smocked
                                                        ).transfer.reset();
                                                      executeOutstandingNextPriceRedeemsTx.contents = longShort._executeOutstandingNextPriceTokenShiftsExposed(marketIndex, user, isShiftFromLong);
                                                      
                                                    }));
                                      });
                                  it("should not call any functions or change any state", (function () {
                                          var match = contracts.contents;
                                          var syntheticToken2Smocked = match.syntheticToken2Smocked;
                                          var syntheticToken1Smocked = match.syntheticToken1Smocked;
                                          return LetOps.Await.let_(executeOutstandingNextPriceRedeemsTx.contents, (function (param) {
                                                        Chai$1.expect((
                                                                isShiftFromLong ? syntheticToken1Smocked : syntheticToken2Smocked
                                                              ).transfer).to.have.callCount(0);
                                                        
                                                      }));
                                        }));
                                  it("should not emit the ExecuteNextPriceRedeemSettlementUser event", (function () {
                                          return Chai.expectToNotEmit(Chai.callEmitEvents(executeOutstandingNextPriceRedeemsTx.contents, contracts.contents.longShort, "ExecuteNextPriceRedeemSettlementUser"));
                                        }));
                                  
                                }));
                          describe("userNextPrice_syntheticToken_toShiftAwayFrom_marketSide > 0", (function () {
                                  var userNextPrice_syntheticToken_toShiftAwayFrom_marketSide = Helpers.randomTokenAmount(undefined);
                                  var syntheticToken_priceSnapshotShiftedFrom = Helpers.randomTokenAmount(undefined);
                                  var syntheticToken_priceSnapshotShiftedTo = Helpers.randomTokenAmount(undefined);
                                  Globals.before_once$p(function (param) {
                                        return LetOps.Await.let_(setup(isShiftFromLong, userNextPrice_syntheticToken_toShiftAwayFrom_marketSide, Helpers.randomInteger(undefined), syntheticToken_priceSnapshotShiftedFrom, syntheticToken_priceSnapshotShiftedTo), (function (param) {
                                                      var match = contracts.contents;
                                                      return match.longShort._executeOutstandingNextPriceTokenShiftsExposed(marketIndex, user, isShiftFromLong);
                                                    }));
                                      });
                                  it("should call transfer on the correct amount of Syntetic Tokens to the user", (function () {
                                          var match = contracts.contents;
                                          var expectedAmountOfPaymentTokenToRecieve = Contract.LongShortHelpers.calcAmountPaymentToken(userNextPrice_syntheticToken_toShiftAwayFrom_marketSide, syntheticToken_priceSnapshotShiftedFrom);
                                          var expectedAmountOfOtherSyntheticTokenToRecieve = Contract.LongShortHelpers.calcAmountSyntheticToken(expectedAmountOfPaymentTokenToRecieve, syntheticToken_priceSnapshotShiftedTo);
                                          return SyntheticTokenSmocked.transferCallCheck(isShiftFromLong ? match.syntheticToken1Smocked : match.syntheticToken2Smocked, {
                                                      recipient: user,
                                                      amount: expectedAmountOfOtherSyntheticTokenToRecieve
                                                    });
                                        }));
                                  it("should reset userNextPrice_syntheticToken_toShiftAwayFrom_marketSide to zero", (function () {
                                          return LetOps.Await.let_(contracts.contents.longShort.userNextPrice_syntheticToken_toShiftAwayFrom_marketSide(marketIndex, isShiftFromLong, user), (function (userNextPrice_syntheticToken_toShiftAwayFrom_marketSide) {
                                                        return Chai.bnEqual(undefined, Globals.zeroBn, userNextPrice_syntheticToken_toShiftAwayFrom_marketSide);
                                                      }));
                                        }));
                                  
                                }));
                          
                        };
                        describe("Long Side", (function () {
                                return testExecuteOutstandingNextPriceRedeems(true);
                              }));
                        describe("Short Side", (function () {
                                return testExecuteOutstandingNextPriceRedeems(false);
                              }));
                        
                      }));
                
              }));
}

exports.testUnit = testUnit;
/* Chai Not a pure module */
