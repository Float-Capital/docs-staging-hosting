// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var LongShortStateSetters = require("../../library/LongShortStateSetters.js");
var YieldManagerAaveSmocked = require("../../library/smock/YieldManagerAaveSmocked.js");
var OracleManagerMockSmocked = require("../../library/smock/OracleManagerMockSmocked.js");

function testUnit(contracts, param) {
  return Globals.describeUnit("createNewSyntheticMarketExternalSyntheticTokens", (function (param) {
                var latestMarket = Helpers.randomJsInteger(undefined);
                var marketIndex = latestMarket + 1 | 0;
                var syntheticName = "Flippening";
                var syntheticSymbol = "FLP";
                var assetPrice = Helpers.randomTokenAmount(undefined);
                var match = Helpers.Tuple.make3(Helpers.randomAddress);
                var paymentToken = match[2];
                var shortToken = match[1];
                var longToken = match[0];
                var createNewSyntheticMarketUpgradeableCallRef = {
                  contents: undefined
                };
                Globals.before_once$p(function (param) {
                      contracts.contents.oracleManagerSmocked.updatePrice.returns(assetPrice);
                      return LetOps.AwaitThen.let_(LongShortStateSetters.setLatestMarket(contracts.contents.longShort, latestMarket), (function (param) {
                                    createNewSyntheticMarketUpgradeableCallRef.contents = contracts.contents.longShort.createNewSyntheticMarketExternalSyntheticTokens(syntheticName, syntheticSymbol, longToken, shortToken, paymentToken, contracts.contents.oracleManagerSmocked.address, contracts.contents.yieldManagerSmocked.address);
                                    return createNewSyntheticMarketUpgradeableCallRef.contents;
                                  }));
                    });
                it("increments latest market", (function () {
                        return LetOps.Await.let_(contracts.contents.longShort.latestMarket(), (function (latestMarketContractVal) {
                                      return Chai.intEqual(undefined, marketIndex, latestMarketContractVal);
                                    }));
                      }));
                it("sets payment token correctly", (function () {
                        return LetOps.Await.let_(contracts.contents.longShort.paymentTokens(marketIndex), (function (paymentTokenContractVal) {
                                      return Chai.addressEqual(undefined, paymentToken, paymentTokenContractVal);
                                    }));
                      }));
                it("sets yield manager correctly", (function () {
                        return LetOps.Await.let_(contracts.contents.longShort.yieldManagers(marketIndex), (function (yieldManagerContractVal) {
                                      return Chai.addressEqual(undefined, contracts.contents.yieldManagerSmocked.address, yieldManagerContractVal);
                                    }));
                      }));
                it("sets oracle manager correctly", (function () {
                        return LetOps.Await.let_(contracts.contents.longShort.oracleManagers(marketIndex), (function (oracleManagerContractVal) {
                                      return Chai.addressEqual(undefined, contracts.contents.oracleManagerSmocked.address, oracleManagerContractVal);
                                    }));
                      }));
                it("sets asset price correctly", (function () {
                        return LetOps.Await.let_(contracts.contents.longShort.assetPrice(marketIndex), (function (assetPriceContractVal) {
                                      return Chai.bnEqual(undefined, assetPriceContractVal, assetPrice);
                                    }));
                      }));
                it("sets synthetic tokens correctly", (function () {
                        return LetOps.AwaitThen.let_(contracts.contents.longShort.syntheticTokens(marketIndex, true), (function (longTokenContractVal) {
                                      return LetOps.Await.let_(contracts.contents.longShort.syntheticTokens(marketIndex, false), (function (shortTokenContractVal) {
                                                    Chai.addressEqual(undefined, longToken, longTokenContractVal);
                                                    return Chai.addressEqual(undefined, shortTokenContractVal, shortTokenContractVal);
                                                  }));
                                    }));
                      }));
                it("calls initializeForMarket on yield manager", (function () {
                        return YieldManagerAaveSmocked.initializeForMarketCallCheck(contracts.contents.yieldManagerSmocked);
                      }));
                it("calls updatePrice price on the oracle", (function () {
                        return OracleManagerMockSmocked.updatePriceCallCheck(contracts.contents.oracleManagerSmocked);
                      }));
                it("emits SyntheticMarketCreated with correct args", (function () {
                        return Chai.callEmitEvents(createNewSyntheticMarketUpgradeableCallRef.contents, contracts.contents.longShort, "SyntheticMarketCreated").withArgs(marketIndex, longToken, shortToken, paymentToken, assetPrice, syntheticName, syntheticSymbol, contracts.contents.oracleManagerSmocked.address, contracts.contents.yieldManagerSmocked.address);
                      }));
                
              }));
}

exports.testUnit = testUnit;
/* Chai Not a pure module */
