// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var CONSTANTS = require("../../CONSTANTS.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var StakerHelpers = require("./StakerHelpers.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");

function test(contracts, accounts) {
  var stakerRef = {
    contents: ""
  };
  var prom = {
    contents: undefined
  };
  var multiplier = Helpers.randomInteger(undefined).add(CONSTANTS.tenToThe18);
  return Globals.describe("getKValue")(undefined, undefined, undefined, (function (param) {
                var diffRef = {
                  contents: CONSTANTS.zeroBn
                };
                var periodRef = {
                  contents: CONSTANTS.zeroBn
                };
                var setup = function (multiplier, periodShouldBeOver) {
                  return LetOps.AwaitThen.let_(StakerHelpers.deployAndSetupStakerToUnitTest(stakerRef, "getKValue", contracts, accounts), (function (param) {
                                return LetOps.AwaitThen.let_(Helpers.getRandomTimestampInPast(undefined), (function (pastTimestamp) {
                                              return LetOps.AwaitThen.let_(Helpers.getBlock(undefined), (function (param) {
                                                            diffRef.contents = ethers.BigNumber.from(param.timestamp + 1 | 0).sub(pastTimestamp);
                                                            var diff = diffRef.contents;
                                                            var period = periodShouldBeOver ? diff.sub(ethers.BigNumber.from(20)) : diff.add(ethers.BigNumber.from(20));
                                                            periodRef.contents = period;
                                                            return LetOps.Await.let_(stakerRef.contents.setGetKValueParams(2, pastTimestamp), (function (param) {
                                                                          StakerSmocked.InternalMock.mockgetMarketLaunchIncentiveParametersToReturn(period, multiplier);
                                                                          prom.contents = stakerRef.contents.getKValueExternal(2);
                                                                          
                                                                        }));
                                                          }));
                                            }));
                              }));
                };
                Globals.it$prime("returns  kInitialMultiplier -\n                (((kInitialMultiplier - 1e18) *\n                    (block.timestamp - initialTimestamp)) / kPeriod) if kPeriod isn't over")(undefined, undefined, undefined, (function (param) {
                        return LetOps.AwaitThen.let_(setup(multiplier, false), (function (param) {
                                      return LetOps.Await.let_(prom.contents, (function (returnVal) {
                                                    return Chai.bnEqual(undefined, returnVal, multiplier.sub(diffRef.contents.mul(multiplier.sub(CONSTANTS.tenToThe18)).div(periodRef.contents)));
                                                  }));
                                    }));
                      }));
                Globals.it$prime("reverts if kInitialMultiplier less than 1e18")(undefined, undefined, undefined, (function (param) {
                        return LetOps.Await.let_(setup(CONSTANTS.oneBn, true), (function (param) {
                                      return Chai.expectRevertNoReason(prom.contents);
                                    }));
                      }));
                return Globals.describe("")(undefined, undefined, undefined, (function (param) {
                              Globals.before_once$prime(function (param) {
                                    return setup(multiplier, true);
                                  });
                              Globals.it$prime("returns 1e18 if more seconds have passed than the kPeriod since the staking fund for the market was added")(undefined, undefined, undefined, (function (param) {
                                      return LetOps.Await.let_(prom.contents, (function (returnVal) {
                                                    return Chai.bnEqual(undefined, returnVal, CONSTANTS.tenToThe18);
                                                  }));
                                    }));
                              return Globals.it$prime$prime("calls getMarketLaunchIncentiveParameters with correct arguments", (function (param) {
                                            return Chai.recordEqualFlat(Belt_Array.getExn(StakerSmocked.InternalMock.getMarketLaunchIncentiveParametersCalls(undefined), 0), {
                                                        marketIndex: 2
                                                      });
                                          }));
                            }));
              }));
}

exports.test = test;
/* Chai Not a pure module */
