// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var LetOps = require("../../library/LetOps.js");
var Staker = require("../../library/contracts/Staker.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var CONSTANTS = require("../../CONSTANTS.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");
var FloatTokenSmocked = require("../../library/smock/FloatTokenSmocked.js");

function test(contracts, param) {
  describe("_mintFloat", (function () {
          var user = Helpers.randomAddress(undefined);
          var floatToMint = Helpers.randomTokenAmount(undefined);
          var floatPercentage = Helpers.randomJsInteger(undefined) / 65536 | 0;
          Globals.before_once$p(function (param) {
                var match = contracts.contents;
                var floatCapitalSmocked = match.floatCapitalSmocked;
                var floatTokenSmocked = match.floatTokenSmocked;
                var staker = match.staker;
                return LetOps.Await.let_(StakerSmocked.InternalMock.setupFunctionForUnitTesting(staker, "_mintFloat"), (function (param) {
                              return LetOps.Await.let_(Staker.setVariable(staker, "floatCapital", floatCapitalSmocked.address), (function (param) {
                                            return LetOps.AwaitThen.let_(staker.set_mintFloatParams(floatTokenSmocked.address, floatPercentage), (function (param) {
                                                          return staker._mintFloatExposed(user, floatToMint);
                                                        }));
                                          }));
                            }));
              });
          it("calls mint on floatToken for user for amount floatToMint", (function () {
                  return FloatTokenSmocked.mintCallCheck(contracts.contents.floatTokenSmocked, {
                              _to: user,
                              amount: floatToMint
                            });
                }));
          it("calls mint on floatTokens for floatCapital for amount (floatToMint * floatPercentage) / 1e18", (function () {
                  var match = contracts.contents;
                  return FloatTokenSmocked.mintCallCheck(match.floatTokenSmocked, {
                              _to: match.floatCapitalSmocked.address,
                              amount: Globals.div(Globals.mul(floatToMint, Globals.bnFromInt(floatPercentage)), CONSTANTS.tenToThe18)
                            });
                }));
          
        }));
  
}

exports.test = test;
/* Staker Not a pure module */
