// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var StakerHelpers = require("./StakerHelpers.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");

function test(contracts, accounts) {
  describe("stakeFromUser", (function () {
          var stakerRef = {
            contents: undefined
          };
          var from = Helpers.randomAddress(undefined);
          var amount = Helpers.randomTokenAmount(undefined);
          var mockTokenWalletRef = {
            contents: undefined
          };
          Globals.before_once$p(function (param) {
                return LetOps.Await.let_(StakerHelpers.deployAndSetupStakerToUnitTest(stakerRef, "stakeFromUser", contracts, accounts), (function (param) {
                              mockTokenWalletRef.contents = Belt_Array.getExn(accounts.contents, 6);
                              StakerSmocked.InternalMock.mockOnlyValidSyntheticToReturn(undefined);
                              StakerSmocked.InternalMock.mock_updateStateToReturn(undefined);
                              StakerSmocked.InternalMock.mock_stakeToReturn(undefined);
                              return stakerRef.contents.connect(mockTokenWalletRef.contents).stakeFromUser(from, amount);
                            }));
              });
          it("calls onlyValidSynthetic with correct args", (function () {
                  return Chai.recordEqualFlat(Belt_Array.getExn(StakerSmocked.InternalMock.onlyValidSyntheticCalls(undefined), 0), {
                              synth: mockTokenWalletRef.contents.address
                            });
                }));
          it("calls _stake with correct args", (function () {
                  return Chai.recordEqualFlat(Belt_Array.getExn(StakerSmocked.InternalMock._stakeCalls(undefined), 0), {
                              token: mockTokenWalletRef.contents.address,
                              amount: amount,
                              user: from
                            });
                }));
          it("calls _updateState with correct args", (function () {
                  return Chai.recordEqualFlat(Belt_Array.getExn(StakerSmocked.InternalMock._updateStateCalls(undefined), 0), {
                              token: mockTokenWalletRef.contents.address
                            });
                }));
          
        }));
  
}

exports.test = test;
/* Chai Not a pure module */
