// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var CONSTANTS = require("../../CONSTANTS.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var StakerHelpers = require("./StakerHelpers.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");

function test(contracts, accounts) {
  var promiseRef = {
    contents: undefined
  };
  var timestampRef = {
    contents: CONSTANTS.zeroBn
  };
  var marketIndex = Helpers.randomJsInteger(undefined);
  var match = Helpers.Tuple.make5(Helpers.randomInteger);
  var timeDeltaGreaterThanZero = match[4];
  var shortValue = match[3];
  var longValue = match[2];
  var shortPrice = match[1];
  var longPrice = match[0];
  describe("addNewStateForFloatRewards", (function () {
          var setup = function (timeDelta) {
            var longShortAddress = accounts.contents[5];
            return LetOps.AwaitThen.let_(StakerHelpers.deployAndSetupStakerToUnitTest("addNewStateForFloatRewards", contracts, accounts), (function (param) {
                          StakerSmocked.InternalMock.mockCalculateTimeDeltaToReturn(timeDelta);
                          StakerSmocked.InternalMock.mockSetRewardObjectsToReturn(undefined);
                          return LetOps.AwaitThen.let_(Helpers.getBlock(undefined), (function (param) {
                                        timestampRef.contents = ethers.BigNumber.from(param.timestamp + 1 | 0);
                                        return LetOps.AwaitThen.let_(contracts.contents.staker.setAddNewStateForFloatRewardsParams(longShortAddress.address), (function (param) {
                                                      promiseRef.contents = contracts.contents.staker.connect(longShortAddress).addNewStateForFloatRewards(marketIndex, longPrice, shortPrice, longValue, shortValue);
                                                      return LetOps.Await.let_(promiseRef.contents, (function (param) {
                                                                    
                                                                  }));
                                                    }));
                                      }));
                        }));
          };
          describe("case timeDelta > 0", (function () {
                  Globals.before_once$p(function (param) {
                        return setup(timeDeltaGreaterThanZero);
                      });
                  it.skip("calls the onlyLongShort modifier", (function () {
                          
                        }));
                  it("calls calculateTimeDelta with correct arguments", (function () {
                          return Chai.recordEqualFlat(Belt_Array.getExn(StakerSmocked.InternalMock.calculateTimeDeltaCalls(undefined), 0), {
                                      marketIndex: marketIndex
                                    });
                        }));
                  it("calls setRewardObjects with correct arguments", (function () {
                          return Chai.recordEqualFlat(Belt_Array.getExn(StakerSmocked.InternalMock.setRewardObjectsCalls(undefined), 0), {
                                      marketIndex: marketIndex,
                                      longPrice: longPrice,
                                      shortPrice: shortPrice,
                                      longValue: longValue,
                                      shortValue: shortValue
                                    });
                        }));
                  
                }));
          describe("case timeDelta == 0", (function () {
                  it("doesn't call setRewardObjects", (function () {
                          return LetOps.Await.let_(setup(CONSTANTS.zeroBn), (function (param) {
                                        return Chai.intEqual(undefined, StakerSmocked.InternalMock.setRewardObjectsCalls(undefined).length, 0);
                                      }));
                        }));
                  
                }));
          
        }));
  
}

exports.test = test;
/* Chai Not a pure module */
