// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var CONSTANTS = require("../../CONSTANTS.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");

function testUnit(contracts, param) {
  var marketIndex = Helpers.randomJsInteger(undefined);
  var match = Helpers.Tuple.make7(Helpers.randomInteger);
  var shortAccum = match[6];
  var longAccum = match[5];
  var timeDeltaGreaterThanZero = match[4];
  var shortValue = match[3];
  var longValue = match[2];
  var shortPrice = match[1];
  var longPrice = match[0];
  describe("pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations", (function () {
          var timestampRef = {
            contents: CONSTANTS.zeroBn
          };
          var txReference = {
            contents: "NotSetYet"
          };
          Globals.before_once$p(function (param) {
                return StakerSmocked.InternalMock.setupFunctionForUnitTesting(contracts.contents.staker, "pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations");
              });
          var setup = function (marketUpdateIndex, timeDelta) {
            return LetOps.Await.let_(Helpers.getBlock(undefined), (function (param) {
                          timestampRef.contents = ethers.BigNumber.from(param.timestamp + 1 | 0);
                          StakerSmocked.InternalMock.mock_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotToReturn(timeDelta);
                          StakerSmocked.InternalMock.mock_calculateNewCumulativeIssuancePerStakedSynthToReturn(longAccum, shortAccum);
                          txReference.contents = contracts.contents.staker.pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations(marketIndex, marketUpdateIndex, longPrice, shortPrice, longValue, shortValue);
                          
                        }));
          };
          describe("modifiers", (function () {
                  it("calls the onlyLongShort modifier", (function () {
                          return LetOps.Await.let_(contracts.contents.staker.pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations(marketIndex, Helpers.randomInteger(undefined), longPrice, shortPrice, longValue, shortValue), (function (param) {
                                        return StakerSmocked.InternalMock.onlyLongShortModifierLogicCallCheck(undefined);
                                      }));
                        }));
                  
                }));
          describe("case timeDelta > 0", (function () {
                  var marketUpdateIndex = Helpers.randomTokenAmount(undefined);
                  return Globals.before_once$p(function (param) {
                              return setup(marketUpdateIndex, timeDeltaGreaterThanZero);
                            });
                }));
          describe("case marketUpdateIndex > 0", (function () {
                  var latestRewardIndex = Helpers.randomInteger(undefined);
                  var marketUpdateIndex = Helpers.randomInteger(undefined);
                  var pushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsTxPromise = {
                    contents: "Not set yet"
                  };
                  return Globals.before_once$p(function (param) {
                              return LetOps.Await.let_(contracts.contents.staker.setLatestRewardIndexGlobals(marketIndex, latestRewardIndex), (function (param) {
                                            pushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsTxPromise.contents = setup(marketUpdateIndex, timeDeltaGreaterThanZero);
                                            return pushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsTxPromise.contents;
                                          }));
                            });
                }));
          describe("", (function () {
                  var marketUpdateIndex = Helpers.randomTokenAmount(undefined);
                  Globals.before_once$p(function (param) {
                        return setup(marketUpdateIndex, timeDeltaGreaterThanZero);
                      });
                  it("calls calculateNewCumulativeIssuancePerStakedSynth with correct arguments", (function () {
                          return LetOps.Await.let_(txReference.contents, (function (param) {
                                        return StakerSmocked.InternalMock._calculateNewCumulativeIssuancePerStakedSynthCallCheck({
                                                    marketIndex: marketIndex,
                                                    previousMarketUpdateIndex: Globals.sub(marketUpdateIndex, Globals.oneBn),
                                                    longPrice: longPrice,
                                                    shortPrice: shortPrice,
                                                    longValue: longValue,
                                                    shortValue: shortValue
                                                  });
                                      }));
                        }));
                  it("sets the latestRewardIndex correctly", (function () {
                          return LetOps.Await.let_(contracts.contents.staker.latestRewardIndex(marketIndex), (function (latestRewardIndex) {
                                        return Chai.bnEqual(undefined, latestRewardIndex, marketUpdateIndex);
                                      }));
                        }));
                  it("mutates accumulativeFloatPerSyntheticTokenSnapshots", (function () {
                          return LetOps.Await.let_(contracts.contents.staker.accumulativeFloatPerSyntheticTokenSnapshots(marketIndex, marketUpdateIndex), (function (rewardParams) {
                                        return Chai.recordEqualFlat(rewardParams, {
                                                    timestamp: timestampRef.contents,
                                                    accumulativeFloatPerSyntheticToken_long: longAccum,
                                                    accumulativeFloatPerSyntheticToken_short: shortAccum
                                                  });
                                      }));
                        }));
                  it("emits AccumulativeIssuancePerStakedSynthSnapshotCreated event", (function () {
                          return Chai.callEmitEvents(txReference.contents, contracts.contents.staker, "AccumulativeIssuancePerStakedSynthSnapshotCreated").withArgs(marketIndex, marketUpdateIndex, longAccum, shortAccum);
                        }));
                  
                }));
          
        }));
  
}

exports.testUnit = testUnit;
/* Chai Not a pure module */
