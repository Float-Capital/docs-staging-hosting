// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var CONSTANTS = require("../../CONSTANTS.js");
var StakerHelpers = require("./StakerHelpers.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");

function test(contracts, accounts) {
  var stakerRef = {
    contents: ""
  };
  var period = Helpers.randomInteger(undefined);
  describe("changeMarketLaunchIncentiveParameters (external)", (function () {
          var initialMultiplier = Helpers.randomInteger(undefined);
          Globals.before_once$p(function (param) {
                return LetOps.AwaitThen.let_(StakerHelpers.deployAndSetupStakerToUnitTest(stakerRef, "changeMarketLaunchIncentiveParameters", contracts, accounts), (function (param) {
                              StakerSmocked.InternalMock.mock_changeMarketLaunchIncentiveParametersToReturn(undefined);
                              StakerSmocked.InternalMock.mockonlyAdminToReturn(undefined);
                              return LetOps.Await.let_(stakerRef.contents.changeMarketLaunchIncentiveParameters(2, period, initialMultiplier), (function (param) {
                                            
                                          }));
                            }));
              });
          Globals.it$p("calls the onlyAdminModifier", (function (param) {
                  return Chai.intEqual(undefined, StakerSmocked.InternalMock.onlyAdminCalls(undefined).length, 1);
                }));
          return Globals.it$p("calls _changeMarketLaunchIncentiveParameters with correct arguments", (function (param) {
                        return Chai.recordEqualFlat(StakerSmocked.InternalMock._changeMarketLaunchIncentiveParametersCalls(undefined)[0], {
                                    marketIndex: 2,
                                    period: period,
                                    initialMultiplier: initialMultiplier
                                  });
                      }));
        }));
  describe("_changeMarketLaunchIncentiveParameters (internal)", (function () {
          var initialMultiplierFine = Helpers.randomInteger(undefined).mul(CONSTANTS.tenToThe18);
          var promise = {
            contents: undefined
          };
          var setup = function (initialMultiplier) {
            return LetOps.Await.let_(Helpers.inititialize(accounts.contents[0], true), (function (deployedContracts) {
                          stakerRef.contents = deployedContracts.staker;
                          var prom = stakerRef.contents._changeMarketLaunchIncentiveParametersExternal(2, period, initialMultiplier);
                          promise.contents = prom;
                          
                        }));
          };
          describe("passing transaction", (function () {
                  Globals.before_once$p(function (param) {
                        return LetOps.Await.let_(setup(initialMultiplierFine), (function (param) {
                                      return LetOps.Await.let_(promise.contents, (function (param) {
                                                    
                                                  }));
                                    }));
                      });
                  it("mutates marketLaunchIncentivePeriod", (function () {
                          return LetOps.Await.let_(stakerRef.contents.marketLaunchIncentivePeriod(2), (function (setPeriod) {
                                        return Chai.bnEqual(undefined, period, setPeriod);
                                      }));
                        }));
                  it("mutates marketLaunchIncentiveMultiplier", (function () {
                          return LetOps.Await.let_(stakerRef.contents.marketLaunchIncentiveMultipliers(2), (function (setMultiplier) {
                                        return Chai.bnEqual(undefined, initialMultiplierFine, setMultiplier);
                                      }));
                        }));
                  it("emits MarketLaunchIncentiveParametersChanges event", (function () {
                          return Chai.callEmitEvents(promise.contents, stakerRef.contents, "MarketLaunchIncentiveParametersChanges").withArgs(2, period, initialMultiplierFine);
                        }));
                  
                }));
          describe("failing transaction", (function () {
                  Globals.before_once$p(function (param) {
                        return setup(CONSTANTS.oneBn);
                      });
                  it("reverts if initialMultiplier < 1e18", (function () {
                          return LetOps.Await.let_(Chai.expectRevert(promise.contents, "marketLaunchIncentiveMultiplier must be >= 1e18"), (function (param) {
                                        
                                      }));
                        }));
                  
                }));
          
        }));
  
}

exports.test = test;
/* Chai Not a pure module */
