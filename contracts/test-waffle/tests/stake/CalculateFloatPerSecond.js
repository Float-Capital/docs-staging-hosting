// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var CONSTANTS = require("../../CONSTANTS.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");

function test(contracts, param) {
  var tenToThe14 = Globals.div(Globals.tenToThe18, Globals.bnFromInt(10000));
  var tenToThe16 = Globals.div(Globals.tenToThe18, Globals.bnFromInt(100));
  var match = Helpers.Tuple.make3(Helpers.randomTokenAmount);
  var shortPrice = match[2];
  var longPrice = match[1];
  var kVal = match[0];
  var match$1 = Helpers.Tuple.make2(function (param) {
        return (Helpers.randomJsInteger(undefined) / 10 | 0) + 1 | 0;
      });
  var randomValueLocked2 = match$1[1];
  var randomValueLocked1 = match$1[0];
  describe("calculateFloatPerSecond", (function () {
          var calculateFloatPerSecondPerPaymentTokenLocked = function (underBalancedSideValue, exponent, equilibriumOffsetMarketScaled, totalLocked, requiredBitShifting, equilibriumMultiplier) {
            var overflowProtectionDivision = Globals.pow(Globals.twoBn, requiredBitShifting);
            var numerator = Globals.pow(Globals.div(Globals.add(underBalancedSideValue, Globals.mul(equilibriumOffsetMarketScaled, equilibriumMultiplier)), Globals.div(overflowProtectionDivision, Globals.twoBn)), exponent);
            var denominator = Globals.pow(Globals.div(totalLocked, overflowProtectionDivision), exponent);
            var overBalancedSideRate = Globals.div(Globals.div(Globals.mul(numerator, Globals.tenToThe18), denominator), Globals.twoBn);
            var underBalancedSideRate = Globals.sub(Globals.tenToThe18, overBalancedSideRate);
            Chai.expectTrue(Globals.bnGte(underBalancedSideRate, overBalancedSideRate));
            return [
                    overBalancedSideRate,
                    underBalancedSideRate
                  ];
          };
          var balanceIncentiveCurve_exponent = Globals.bnFromInt(5);
          var safeExponentBitShifting = Globals.bnFromInt(50);
          before(function () {
                var match = contracts.contents;
                var longShortSmocked = match.longShortSmocked;
                var staker = match.staker;
                return LetOps.AwaitThen.let_(StakerSmocked.InternalMock.setupFunctionForUnitTesting(staker, "_calculateFloatPerSecond"), (function (param) {
                              longShortSmocked.marketSideValueInPaymentToken.returns(CONSTANTS.tenToThe18);
                              return LetOps.Await.let_(staker._changeBalanceIncentiveParametersExposed(1, balanceIncentiveCurve_exponent, CONSTANTS.zeroBn, safeExponentBitShifting), (function (param) {
                                            return StakerSmocked.InternalMock.mock_getKValueToReturn(kVal);
                                          }));
                            }));
              });
          var runTestsAndReturnUnscaledFpsValuesE18 = function (longValueUnscaled, shortValueUnscaled) {
            var longValue = Globals.mul(Globals.bnFromInt(longValueUnscaled), Globals.tenToThe18);
            var shortValue = Globals.mul(Globals.bnFromInt(shortValueUnscaled), Globals.tenToThe18);
            var totalLocked = Globals.add(longValue, shortValue);
            return LetOps.AwaitThen.let_(contracts.contents.staker.balanceIncentiveCurve_equilibriumOffset(1), (function (balanceIncentiveCurve_equilibriumOffset) {
                          var equilibriumOffsetMarketScaled = Globals.div(Globals.div(Globals.mul(balanceIncentiveCurve_equilibriumOffset, totalLocked), Globals.twoBn), Globals.tenToThe18);
                          return LetOps.Await.let_(contracts.contents.staker._calculateFloatPerSecondExposed(1, longPrice, shortPrice, longValue, shortValue), (function (result) {
                                        var longFloatPerSecond = result.longFloatPerSecond;
                                        var shortFloatPerSecond = result.shortFloatPerSecond;
                                        var longRateScaled;
                                        var shortRateScaled;
                                        if (Globals.bnGte(longValue, Globals.sub(shortValue, Globals.mul(equilibriumOffsetMarketScaled, Globals.twoBn)))) {
                                          if (Globals.bnGte(equilibriumOffsetMarketScaled, shortValue)) {
                                            shortRateScaled = Globals.mul(kVal, shortPrice);
                                            longRateScaled = Globals.zeroBn;
                                          } else {
                                            var match = calculateFloatPerSecondPerPaymentTokenLocked(shortValue, balanceIncentiveCurve_exponent, equilibriumOffsetMarketScaled, totalLocked, safeExponentBitShifting, Globals.bnFromInt(-1));
                                            longRateScaled = Globals.div(Globals.mul(Globals.mul(match[0], kVal), longPrice), Globals.tenToThe18);
                                            shortRateScaled = Globals.div(Globals.mul(Globals.mul(match[1], kVal), shortPrice), Globals.tenToThe18);
                                          }
                                        } else if (Globals.bnGte(Globals.mul(equilibriumOffsetMarketScaled, Globals.bnFromInt(-1)), longValue)) {
                                          shortRateScaled = Globals.zeroBn;
                                          longRateScaled = Globals.mul(kVal, longPrice);
                                        } else {
                                          var match$1 = calculateFloatPerSecondPerPaymentTokenLocked(longValue, balanceIncentiveCurve_exponent, equilibriumOffsetMarketScaled, totalLocked, safeExponentBitShifting, Globals.oneBn);
                                          longRateScaled = Globals.div(Globals.mul(Globals.mul(match$1[1], kVal), longPrice), Globals.tenToThe18);
                                          shortRateScaled = Globals.div(Globals.mul(Globals.mul(match$1[0], kVal), shortPrice), Globals.tenToThe18);
                                        }
                                        Chai.bnEqual("[runTestsAndReturnUnscaledFpsValuesE18] unexpected longFloatPerSecond result", longFloatPerSecond, longRateScaled);
                                        Chai.bnEqual("[runTestsAndReturnUnscaledFpsValuesE18] unexpected shortFloatPerSecond result", shortFloatPerSecond, shortRateScaled);
                                        var longFloatPerSecondUnscaledE18 = Globals.div(Globals.div(Globals.mul(longFloatPerSecond, Globals.tenToThe18), kVal), longPrice);
                                        var shortFloatPerSecondUnscaledE18 = Globals.div(Globals.div(Globals.mul(shortFloatPerSecond, Globals.tenToThe18), kVal), shortPrice);
                                        return [
                                                longFloatPerSecondUnscaledE18,
                                                shortFloatPerSecondUnscaledE18
                                              ];
                                      }));
                        }));
          };
          describe("returns correct longFloatPerSecond and shortFloatPerSecond for each market side", (function () {
                  describe("without offset", (function () {
                          before(function () {
                                return contracts.contents.staker.setEquilibriumOffset(1, Globals.zeroBn);
                              });
                          it("longValue > shortValue", (function () {
                                  return runTestsAndReturnUnscaledFpsValuesE18(randomValueLocked1 + randomValueLocked2 | 0, randomValueLocked2);
                                }));
                          it("longValue < shortValue", (function () {
                                  return runTestsAndReturnUnscaledFpsValuesE18(randomValueLocked1, randomValueLocked1 + randomValueLocked2 | 0);
                                }));
                          it("has a continuous curve through intersection point", (function () {
                                  return LetOps.Await.let_(runTestsAndReturnUnscaledFpsValuesE18(499, 501), (function (param) {
                                                var shortFps1UnscaledE18 = param[1];
                                                var longFps1UnscaledE18 = param[0];
                                                Chai.expectTrue(Globals.bnGt(longFps1UnscaledE18, Globals.div(Globals.tenToThe18, Globals.twoBn)));
                                                Chai.expectTrue(Globals.bnLt(shortFps1UnscaledE18, Globals.div(Globals.tenToThe18, Globals.twoBn)));
                                                return LetOps.Await.let_(runTestsAndReturnUnscaledFpsValuesE18(501, 499), (function (param) {
                                                              var shortFps2UnscaledE18 = param[1];
                                                              var longFps2UnscaledE18 = param[0];
                                                              Chai.expectTrue(Globals.bnLt(longFps2UnscaledE18, Globals.div(Globals.tenToThe18, Globals.twoBn)));
                                                              Chai.expectTrue(Globals.bnGt(shortFps2UnscaledE18, Globals.div(Globals.tenToThe18, Globals.twoBn)));
                                                              Chai.expectTrue(Globals.bnLt(Globals.sub(longFps1UnscaledE18, longFps2UnscaledE18), tenToThe16));
                                                              return Chai.expectTrue(Globals.bnLt(Globals.sub(shortFps2UnscaledE18, shortFps1UnscaledE18), tenToThe16));
                                                            }));
                                              }));
                                }));
                          
                        }));
                  describe("with negative offset", (function () {
                          Globals.before_once$p(function (param) {
                                return contracts.contents.staker.setEquilibriumOffset(1, Globals.div(Globals.mul(Globals.bnFromInt(-1), Globals.tenToThe18), Globals.twoBn));
                              });
                          it("longValue > shortValue", (function () {
                                  return runTestsAndReturnUnscaledFpsValuesE18(randomValueLocked1 + randomValueLocked2 | 0, randomValueLocked2);
                                }));
                          it("longValue < shortValue", (function () {
                                  return runTestsAndReturnUnscaledFpsValuesE18(randomValueLocked1, randomValueLocked1 + randomValueLocked2 | 0);
                                }));
                          it("has a continuous curve through intersection point", (function () {
                                  return LetOps.Await.let_(runTestsAndReturnUnscaledFpsValuesE18(749, 251), (function (param) {
                                                var shortFps1UnscaledE18 = param[1];
                                                var longFps1UnscaledE18 = param[0];
                                                Chai.expectTrue(Globals.bnGt(longFps1UnscaledE18, Globals.div(Globals.tenToThe18, Globals.twoBn)));
                                                Chai.expectTrue(Globals.bnLt(shortFps1UnscaledE18, Globals.div(Globals.tenToThe18, Globals.twoBn)));
                                                return LetOps.Await.let_(runTestsAndReturnUnscaledFpsValuesE18(751, 249), (function (param) {
                                                              var shortFps2UnscaledE18 = param[1];
                                                              var longFps2UnscaledE18 = param[0];
                                                              Chai.expectTrue(Globals.bnLt(longFps2UnscaledE18, Globals.div(Globals.tenToThe18, Globals.twoBn)));
                                                              Chai.expectTrue(Globals.bnGt(shortFps2UnscaledE18, Globals.div(Globals.tenToThe18, Globals.twoBn)));
                                                              Chai.expectTrue(Globals.bnLt(Globals.sub(longFps1UnscaledE18, longFps2UnscaledE18), tenToThe16));
                                                              return Chai.expectTrue(Globals.bnLt(Globals.sub(shortFps2UnscaledE18, shortFps1UnscaledE18), tenToThe16));
                                                            }));
                                              }));
                                }));
                          it("has a continuous curve at the edge case boundary", (function () {
                                  return LetOps.Await.let_(runTestsAndReturnUnscaledFpsValuesE18(24, 76), (function (param) {
                                                var shortFps1UnscaledE18 = param[1];
                                                var longFps1UnscaledE18 = param[0];
                                                Chai.bnEqual("long out-of-bounds result should be 1", longFps1UnscaledE18, Globals.tenToThe18);
                                                Chai.bnEqual("short out-of-bounds result should be 0", shortFps1UnscaledE18, Globals.zeroBn);
                                                return LetOps.Await.let_(runTestsAndReturnUnscaledFpsValuesE18(26, 74), (function (param) {
                                                              Chai.expectTrue(Globals.bnLt(Globals.sub(longFps1UnscaledE18, param[0]), tenToThe14));
                                                              return Chai.expectTrue(Globals.bnLt(Globals.sub(param[1], shortFps1UnscaledE18), tenToThe14));
                                                            }));
                                              }));
                                }));
                          
                        }));
                  describe("with positive offset", (function () {
                          Globals.before_once$p(function (param) {
                                return contracts.contents.staker.setEquilibriumOffset(1, Globals.div(Globals.tenToThe18, Globals.twoBn));
                              });
                          it("longValue > shortValue", (function () {
                                  return runTestsAndReturnUnscaledFpsValuesE18(randomValueLocked1 + randomValueLocked2 | 0, randomValueLocked2);
                                }));
                          it("longValue < shortValue", (function () {
                                  return runTestsAndReturnUnscaledFpsValuesE18(randomValueLocked1, randomValueLocked1 + randomValueLocked2 | 0);
                                }));
                          it("has a continuous curve through intersection point", (function () {
                                  return LetOps.Await.let_(runTestsAndReturnUnscaledFpsValuesE18(249, 751), (function (param) {
                                                var shortFps1UnscaledE18 = param[1];
                                                var longFps1UnscaledE18 = param[0];
                                                Chai.expectTrue(Globals.bnGt(longFps1UnscaledE18, Globals.div(Globals.tenToThe18, Globals.twoBn)));
                                                Chai.expectTrue(Globals.bnLt(shortFps1UnscaledE18, Globals.div(Globals.tenToThe18, Globals.twoBn)));
                                                return LetOps.Await.let_(runTestsAndReturnUnscaledFpsValuesE18(251, 749), (function (param) {
                                                              var shortFps2UnscaledE18 = param[1];
                                                              var longFps2UnscaledE18 = param[0];
                                                              Chai.expectTrue(Globals.bnLt(longFps2UnscaledE18, Globals.div(Globals.tenToThe18, Globals.twoBn)));
                                                              Chai.expectTrue(Globals.bnGt(shortFps2UnscaledE18, Globals.div(Globals.tenToThe18, Globals.twoBn)));
                                                              Chai.expectTrue(Globals.bnLt(Globals.sub(longFps1UnscaledE18, longFps2UnscaledE18), tenToThe16));
                                                              return Chai.expectTrue(Globals.bnLt(Globals.sub(shortFps2UnscaledE18, shortFps1UnscaledE18), tenToThe16));
                                                            }));
                                              }));
                                }));
                          it("has a continuous curve at the edge case boundary", (function () {
                                  return LetOps.Await.let_(runTestsAndReturnUnscaledFpsValuesE18(76, 24), (function (param) {
                                                var shortFps1UnscaledE18 = param[1];
                                                var longFps1UnscaledE18 = param[0];
                                                Chai.bnEqual("long out-of-bounds result should be 0", longFps1UnscaledE18, Globals.zeroBn);
                                                Chai.bnEqual("short out-of-bounds result should be 1", shortFps1UnscaledE18, Globals.tenToThe18);
                                                return LetOps.Await.let_(runTestsAndReturnUnscaledFpsValuesE18(74, 26), (function (param) {
                                                              Chai.expectTrue(Globals.bnLt(Globals.sub(param[0], longFps1UnscaledE18), tenToThe14));
                                                              return Chai.expectTrue(Globals.bnLt(Globals.sub(shortFps1UnscaledE18, param[1]), tenToThe14));
                                                            }));
                                              }));
                                }));
                          
                        }));
                  
                }));
          it("calls getKValue correctly", (function () {
                  StakerSmocked.InternalMock.mock_getKValueToReturn(kVal);
                  return LetOps.Await.let_(contracts.contents.staker._calculateFloatPerSecondExposed(1, longPrice, shortPrice, Globals.mul(Globals.bnFromInt(randomValueLocked1), Globals.tenToThe18), Globals.mul(Globals.bnFromInt(randomValueLocked2), Globals.tenToThe18)), (function (_result) {
                                return StakerSmocked.InternalMock._getKValueCallCheck({
                                            marketIndex: 1
                                          });
                              }));
                }));
          
        }));
  
}

exports.test = test;
/* Chai Not a pure module */
