// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Helpers = require("../../library/Helpers.js");
var CONSTANTS = require("../../CONSTANTS.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var StakerHelpers = require("./StakerHelpers.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");

function test(contracts, accounts) {
  var stakerRef = {
    contents: ""
  };
  var marketIndex = Helpers.randomJsInteger(undefined);
  describe("calculateFloatPerSecond", (function () {
          var mockReturnFormula = function (k, oppositeSideValue, sidePrice, totalLocked) {
            return k.mul(oppositeSideValue).mul(sidePrice).div(totalLocked);
          };
          var test = function (kVal, longPrice, shortPrice, longValue, shortValue, expectedLongFPS, expectedShortFPS) {
            var match = contracts.contents;
            stakerRef.contents = match.staker;
            return LetOps.AwaitThen.let_(StakerHelpers.deployAndSetupStakerToUnitTest(stakerRef, "calculateFloatPerSecond", contracts, accounts), (function (param) {
                          StakerSmocked.InternalMock.mockGetKValueToReturn(kVal);
                          return LetOps.Await.let_(stakerRef.contents.calculateFloatPerSecondExposed(marketIndex, longPrice, shortPrice, longValue, shortValue), (function (result) {
                                        var longFloatPerSecond = Belt_Array.getExn(result, 0);
                                        var shortFloatPerSecond = Belt_Array.getExn(result, 1);
                                        Chai.bnEqual(undefined, longFloatPerSecond, expectedLongFPS);
                                        return Chai.bnEqual(undefined, shortFloatPerSecond, expectedShortFPS);
                                      }));
                        }));
          };
          it("returns (kVal * sidePrice * oppositeSideValue) / totalLocked for each market side and calls getKValue correctly", (function () {
                  var match = Helpers.Tuple.make5(Helpers.randomInteger);
                  var shortValue = match[4];
                  var longValue = match[3];
                  var shortPrice = match[2];
                  var longPrice = match[1];
                  var kVal = match[0];
                  var totalLocked = longValue.add(shortValue);
                  return LetOps.Await.let_(test(kVal, longPrice, shortPrice, longValue, shortValue, mockReturnFormula(kVal, shortValue, longPrice, totalLocked), mockReturnFormula(kVal, longValue, shortPrice, totalLocked)), (function (param) {
                                
                              }));
                }));
          it("calls getKValue correctly", (function () {
                  var call = StakerSmocked.InternalMock.getKValueCalls(undefined)[0];
                  return Chai.recordEqualFlat(call, {
                              marketIndex: marketIndex
                            });
                }));
          it("returns 0 for empty markets", (function () {
                  return test(Helpers.randomInteger(undefined), Helpers.randomInteger(undefined), Helpers.randomInteger(undefined), CONSTANTS.zeroBn, CONSTANTS.zeroBn, CONSTANTS.zeroBn, CONSTANTS.zeroBn);
                }));
          
        }));
  
}

exports.test = test;
/* Chai Not a pure module */
