// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Helpers = require("../library/Helpers.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

function let_(prom, cb) {
  return prom.then(Curry.__1(cb));
}

var Await = {
  let_: let_
};

function test(markets, accounts, contracts) {
  var testUser = accounts[1];
  var longShort = contracts.longShort;
  var synthsUserHasStaked = {
    contents: []
  };
  var marketsUserHasStakedIn = {
    contents: []
  };
  var prom = Promise.all(Belt_Array.map(contracts.markets, (function (param) {
              var marketIndex = param.marketIndex;
              var shortSynth = param.shortSynth;
              var paymentToken = param.paymentToken;
              var mintStake = function (param) {
                return function (param$1) {
                  return Helpers.mintAndStake(marketIndex, param, paymentToken, testUser, longShort, param$1);
                };
              };
              marketsUserHasStakedIn.contents = Belt_Array.concat(marketsUserHasStakedIn.contents, [marketIndex]);
              var amount = Helpers.randomMintLongShort(undefined);
              switch (amount.TAG | 0) {
                case /* Long */0 :
                    synthsUserHasStaked.contents = Belt_Array.concat(synthsUserHasStaked.contents, [param.longSynth]);
                    return mintStake(amount._0)(true);
                case /* Short */1 :
                    synthsUserHasStaked.contents = Belt_Array.concat(synthsUserHasStaked.contents, [shortSynth]);
                    return mintStake(amount._0)(false);
                case /* Both */2 :
                    var shortAmount = amount._1;
                    synthsUserHasStaked.contents = Belt_Array.concat(synthsUserHasStaked.contents, [
                          shortSynth,
                          shortSynth
                        ]);
                    return mintStake(amount._0)(true).then(function (param) {
                                return mintStake(shortAmount)(false);
                              });
                
              }
            })));
  return prom.then(function (thing) {
              return Promise.resolve(undefined);
            });
}

exports.Await = Await;
exports.test = test;
/* No side effect */
