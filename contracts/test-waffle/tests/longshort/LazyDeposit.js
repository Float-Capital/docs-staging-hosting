// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");

function testExposed(contracts, accounts) {
  return Globals.describe("lazyDeposits")(undefined, undefined, undefined, (function (param) {
                Globals.it$prime("calls the executeOutstandingLazySettlements modifier")(undefined, undefined, undefined, (function (param) {
                        var match = contracts.contents;
                        var longShort = match.longShort;
                        var amount = ethers.BigNumber.from(1);
                        var testWallet = accounts.contents[1];
                        return LetOps.Await.let_(longShort.setUseexecuteOutstandingLazySettlementsMock(true), (function (param) {
                                      Chai.callEmitEvents(longShort.connect(testWallet).mintLongLazy(1, amount), longShort, "executeOutstandingLazySettlementsMock");
                                      
                                    }));
                      }));
                return Globals.describe("mintLongLazy")(undefined, undefined, undefined, (function (param) {
                              var mintLongLazyTxPromise = {
                                contents: undefined
                              };
                              var amount = ethers.BigNumber.from(1);
                              Globals.before_each(undefined)(undefined, undefined, undefined, (function (param) {
                                      var match = contracts.contents;
                                      var testWallet = accounts.contents[1];
                                      mintLongLazyTxPromise.contents = match.longShort.connect(testWallet).mintLongLazy(1, amount);
                                      
                                    }));
                              Globals.it$prime("should emit the correct event")(undefined, undefined, undefined, (function (param) {
                                      var match = contracts.contents;
                                      var testWallet = accounts.contents[1];
                                      return Chai.callEmitEvents(mintLongLazyTxPromise.contents, match.longShort, "LazyLongMinted").withArgs(1, amount, testWallet.address, amount, 1);
                                    }));
                              Globals.it$prime("transfer all the payment tokens to the LongShort contract")(undefined, undefined, undefined, (function (param) {
                                      var match = contracts.contents;
                                      var paymentToken = match.markets[1].paymentToken;
                                      return Chai.changeBallance((function (param) {
                                                    return mintLongLazyTxPromise.contents;
                                                  }), paymentToken, match.longShort, amount);
                                    }));
                              Globals.it$prime("updates the mintLong value for the market")(undefined, undefined, undefined, (function (param) {
                                      var match = contracts.contents;
                                      var longShort = match.longShort;
                                      return LetOps.AwaitThen.let_(mintLongLazyTxPromise.contents, (function (param) {
                                                    return LetOps.Await.let_(longShort.batchedLazyDeposit(1), (function (param) {
                                                                  return Chai.bnEqual("Incorrect batched lazy deposit mint long", amount, param.mintLong);
                                                                }));
                                                  }));
                                    }));
                              Globals.it$prime("updates the user's batched mint long amount")(undefined, undefined, undefined, (function (param) {
                                      return Promise.resolve(undefined);
                                    }));
                              return Globals.it$prime("updates the user's oracle index for lazy minting")(undefined, undefined, undefined, (function (param) {
                                            return Promise.resolve(undefined);
                                          }));
                            }));
              }));
}

exports.testExposed = testExposed;
/* Chai Not a pure module */
