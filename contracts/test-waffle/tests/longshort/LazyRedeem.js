// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Helpers = require("../../library/Helpers.js");
var Contract = require("../../library/Contract.js");
var CONSTANTS = require("../../CONSTANTS.js");

function testIntegration(contracts, accounts) {
  return Globals.describe("lazyRedeem")(undefined, undefined, undefined, (function (param) {
                return Globals.it$prime("should work as expected happy path")(undefined, undefined, undefined, (function (param) {
                              var testUser = accounts.contents[8];
                              var amountToLazyMint = Helpers.randomTokenAmount(undefined);
                              var match = contracts.contents;
                              var longShort = match.longShort;
                              var longShortUserConnected = longShort.connect(testUser);
                              var match$1 = match.markets[0];
                              var marketIndex = match$1.marketIndex;
                              var longSynth = match$1.longSynth;
                              var oracleManager = match$1.oracleManager;
                              var paymentToken = match$1.paymentToken;
                              return LetOps.AwaitThen.let_(longShort.syntheticTokenBackedValue(CONSTANTS.longTokenType, marketIndex), (function (_longValueBefore) {
                                            return LetOps.AwaitThen.let_(paymentToken.mint(testUser.address, amountToLazyMint), (function (param) {
                                                          return LetOps.AwaitThen.let_(paymentToken.setShouldMockTransfer(false), (function (param) {
                                                                        return LetOps.AwaitThen.let_(paymentToken.connect(testUser).approve(longShort.address, amountToLazyMint), (function (param) {
                                                                                      return LetOps.AwaitThen.let_(longShortUserConnected.mintLong(marketIndex, amountToLazyMint), (function (param) {
                                                                                                    return LetOps.AwaitThen.let_(longSynth.balanceOf(testUser.address), (function (usersBalanceAvailableForRedeem) {
                                                                                                                  return LetOps.AwaitThen.let_(longShortUserConnected.redeemLongLazy(marketIndex, usersBalanceAvailableForRedeem), (function (param) {
                                                                                                                                return LetOps.AwaitThen.let_(longSynth.balanceOf(testUser.address), (function (usersBalanceAfterLazyRedeem) {
                                                                                                                                              Chai.bnEqual("Balance after price system update but before user settlement should be the same as after settlement", usersBalanceAfterLazyRedeem, CONSTANTS.zeroBn);
                                                                                                                                              return LetOps.AwaitThen.let_(paymentToken.balanceOf(testUser.address), (function (paymentTokenBalanceBeforeWithdrawal) {
                                                                                                                                                            return LetOps.AwaitThen.let_(Contract.LongShortHelpers.getMarketBalance(longShort, marketIndex), (function (param) {
                                                                                                                                                                          var valueShortBefore = param.shortValue;
                                                                                                                                                                          var valueLongBefore = param.longValue;
                                                                                                                                                                          return LetOps.AwaitThen.let_(oracleManager.getLatestPrice(), (function (previousPrice) {
                                                                                                                                                                                        var nextPrice = Globals.div(Globals.mul(previousPrice, Globals.bnFromInt(12)), Globals.bnFromInt(10));
                                                                                                                                                                                        return LetOps.AwaitThen.let_(oracleManager.setPrice(nextPrice), (function (param) {
                                                                                                                                                                                                      return LetOps.AwaitThen.let_(longShort._updateSystemState(marketIndex), (function (param) {
                                                                                                                                                                                                                    return LetOps.AwaitThen.let_(longShort.latestUpdateIndex(marketIndex), (function (latestUpdateIndex) {
                                                                                                                                                                                                                                  return LetOps.AwaitThen.let_(Contract.LongShortHelpers.getBatchedRedemptionAmountWithoutFees(longShort, marketIndex, latestUpdateIndex, CONSTANTS.longTokenType), (function (batchedRedemptionAmountWithoutFees) {
                                                                                                                                                                                                                                                return LetOps.AwaitThen.let_(Contract.LongShortHelpers.getFeesRedeemLazy(longShort, marketIndex, batchedRedemptionAmountWithoutFees, valueLongBefore, valueShortBefore), (function (feesForRedeemLazy) {
                                                                                                                                                                                                                                                              var amountExpectedToBeRedeemed = Globals.sub(batchedRedemptionAmountWithoutFees, feesForRedeemLazy);
                                                                                                                                                                                                                                                              return LetOps.AwaitThen.let_(longShort._executeOutstandingLazyRedeems(testUser.address, marketIndex), (function (param) {
                                                                                                                                                                                                                                                                            return LetOps.Await.let_(paymentToken.balanceOf(testUser.address), (function (paymentTokenBalanceAfterWithdrawal) {
                                                                                                                                                                                                                                                                                          var deltaBalanceChange = Globals.sub(paymentTokenBalanceAfterWithdrawal, paymentTokenBalanceBeforeWithdrawal);
                                                                                                                                                                                                                                                                                          return Chai.bnEqual("Balance of paymentToken didn't update correctly", deltaBalanceChange, amountExpectedToBeRedeemed);
                                                                                                                                                                                                                                                                                        }));
                                                                                                                                                                                                                                                                          }));
                                                                                                                                                                                                                                                            }));
                                                                                                                                                                                                                                              }));
                                                                                                                                                                                                                                }));
                                                                                                                                                                                                                  }));
                                                                                                                                                                                                    }));
                                                                                                                                                                                      }));
                                                                                                                                                                        }));
                                                                                                                                                          }));
                                                                                                                                            }));
                                                                                                                              }));
                                                                                                                }));
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

exports.testIntegration = testIntegration;
/* Chai Not a pure module */
