// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../../bindings/chai/Chai.js");
var LetOps = require("../../library/LetOps.js");
var Globals = require("../../library/Globals.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var StakerSmocked = require("../../library/smock/StakerSmocked.js");
var LongShortSmocked = require("../../library/smock/LongShortSmocked.js");
var Smock = require("@eth-optimism/smock");

function test(contracts, accounts) {
  return Globals.describe("initializeMarket")(undefined, undefined, undefined, (function (param) {
                var stakerSmockedRef = {
                  contents: undefined
                };
                var longShortRef = {
                  contents: ""
                };
                var sampleAddress = ethers.Wallet.createRandom().address;
                var setup = function (marketIndex, marketIndexValue, latestMarket) {
                  var match = contracts.contents;
                  longShortRef.contents = match.longShort;
                  return LetOps.Await.let_(Smock.smockit(contracts.contents.staker), (function (smocked) {
                                StakerSmocked.mockaddNewStakingFundToReturn(smocked);
                                stakerSmockedRef.contents = smocked;
                                return LetOps.Await.let_(LongShortSmocked.InternalMock.setup(longShortRef.contents), (function (param) {
                                              return LetOps.Await.let_(LongShortSmocked.InternalMock.setupFunctionForUnitTesting(longShortRef.contents, "initializeMarket"), (function (param) {
                                                            LongShortSmocked.InternalMock.mock_changeFeesToReturn(undefined);
                                                            LongShortSmocked.InternalMock.mockadminOnlyToReturn(undefined);
                                                            LongShortSmocked.InternalMock.mockseedMarketInitiallyToReturn(undefined);
                                                            return longShortRef.contents.setInitializeMarketParams(marketIndex, marketIndexValue, latestMarket, stakerSmockedRef.contents.address, sampleAddress, sampleAddress);
                                                          }));
                                            }));
                              }));
                };
                Globals.it$prime("calls all functions (staker.addNewStakingFund, _changeFees, adminOnly, seedMarketInitially) and mutates state (marketExists) correctly")(undefined, undefined, undefined, (function (param) {
                        return LetOps.Await.let_(setup(1, false, 1), (function (param) {
                                      return LetOps.Await.let_(longShortRef.contents.connect(accounts.contents[0]).initializeMarket(1, ethers.BigNumber.from("1"), ethers.BigNumber.from("2"), ethers.BigNumber.from("5"), ethers.BigNumber.from("3"), ethers.BigNumber.from("6"), ethers.BigNumber.from("4"), ethers.BigNumber.from("7")), (function (param) {
                                                    var stakerCalls = StakerSmocked.addNewStakingFundCalls(stakerSmockedRef.contents);
                                                    Chai.recordEqualFlat(Belt_Array.getExn(stakerCalls, 0), {
                                                          marketIndex: 1,
                                                          longToken: sampleAddress,
                                                          shortToken: sampleAddress,
                                                          kInitialMultiplier: ethers.BigNumber.from("6"),
                                                          kPeriod: ethers.BigNumber.from("4")
                                                        });
                                                    var changeFeeCalls = LongShortSmocked.InternalMock._changeFeeCalls(undefined);
                                                    Chai.recordEqualFlat(Belt_Array.getExn(changeFeeCalls, 0), {
                                                          marketIndex: 1,
                                                          _baseEntryFee: ethers.BigNumber.from("1"),
                                                          _badLiquidityEntryFee: ethers.BigNumber.from("2"),
                                                          _baseExitFee: ethers.BigNumber.from("5"),
                                                          _badLiquidityExitFee: ethers.BigNumber.from("3")
                                                        });
                                                    var seedMarketInitiallyCalls = LongShortSmocked.InternalMock.seedMarketInitiallyCalls(undefined);
                                                    Chai.recordEqualFlat(Belt_Array.getExn(seedMarketInitiallyCalls, 0), {
                                                          initialMarketSeed: ethers.BigNumber.from("7"),
                                                          marketIndex: 1
                                                        });
                                                    var adminOnlyCalls = LongShortSmocked.InternalMock.adminOnlyCalls(undefined);
                                                    Chai.intEqual(undefined, 1, adminOnlyCalls.length);
                                                    return LetOps.Await.let_(longShortRef.contents.marketExists(1), (function (isMarket) {
                                                                  return Chai.boolEqual(undefined, isMarket, true);
                                                                }));
                                                  }));
                                    }));
                      }));
                Globals.it$prime("reverts if market exists")(undefined, undefined, undefined, (function (param) {
                        return LetOps.Await.let_(setup(1, true, 1), (function (param) {
                                      return LetOps.Await.let_(Chai.expectRevertNoReason(longShortRef.contents.connect(accounts.contents[0]).initializeMarket(1, ethers.BigNumber.from("1"), ethers.BigNumber.from("2"), ethers.BigNumber.from("5"), ethers.BigNumber.from("3"), ethers.BigNumber.from("6"), ethers.BigNumber.from("4"), ethers.BigNumber.from("7"))), (function (param) {
                                                    
                                                  }));
                                    }));
                      }));
                return Globals.it$prime("reverts if market index is greater than latest market index")(undefined, undefined, undefined, (function (param) {
                              return LetOps.Await.let_(setup(2, false, 1), (function (param) {
                                            return LetOps.Await.let_(Chai.expectRevertNoReason(longShortRef.contents.connect(accounts.contents[0]).initializeMarket(1, ethers.BigNumber.from("1"), ethers.BigNumber.from("2"), ethers.BigNumber.from("5"), ethers.BigNumber.from("3"), ethers.BigNumber.from("6"), ethers.BigNumber.from("4"), ethers.BigNumber.from("7"))), (function (param) {
                                                          
                                                        }));
                                          }));
                            }));
              }));
}

exports.test = test;
/* Chai Not a pure module */
