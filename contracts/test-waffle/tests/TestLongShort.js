// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("../bindings/chai/Chai.js");
var LetOps = require("../library/LetOps.js");
var Globals = require("../library/Globals.js");
var Helpers = require("../library/Helpers.js");
var DepositFunds = require("./longShort/DepositFunds.js");
var UtilsHelpers = require("./longShort/UtilsHelpers.js");
var HelperActions = require("../library/HelperActions.js");
var MintNextPrice = require("./longShort/MintNextPrice.js");
var ShiftNextPrice = require("./longShort/ShiftNextPrice.js");
var RedeemNextPrice = require("./longShort/RedeemNextPrice.js");
var InitializeMarket = require("./longShort/InitializeMarket.js");
var BatchedSettlement = require("./longShort/BatchedSettlement.js");
var UpdateSystemState = require("./longShort/UpdateSystemState.js");
var ExecuteNextPriceAction = require("./longShort/ExecuteNextPriceAction.js");
var CreateNewSyntheticMarket = require("./longShort/CreateNewSyntheticMarket.js");
var PriceCalculationFunctions = require("./longShort/PriceCalculationFunctions.js");
var GetUsersConfirmedButNotSettledBalance = require("./longShort/GetUsersConfirmedButNotSettledBalance.js");
var ExecuteOutstandingNextPriceSettlements = require("./longShort/ExecuteOutstandingNextPriceSettlements.js");
var ClaimAndDistributeYieldThenRebalanceMarket = require("./longShort/ClaimAndDistributeYieldThenRebalanceMarket.js");
var ExecuteOutstandingNextPriceSettlementsUserMulti = require("./longShort/ExecuteOutstandingNextPriceSettlementsUserMulti.js");

describe("Float System", (function () {
        Globals.describeIntegration("LongShort", (function (param) {
                var contracts = {
                  contents: undefined
                };
                var accounts = {
                  contents: undefined
                };
                beforeEach(function () {
                      return LetOps.Await.let_(ethers.getSigners(), (function (loadedAccounts) {
                                    accounts.contents = loadedAccounts;
                                    return LetOps.AwaitThen.let_(Helpers.initialize(accounts.contents[0], false), (function (deployedContracts) {
                                                  contracts.contents = deployedContracts;
                                                  var setupUser = accounts.contents[2];
                                                  return HelperActions.stakeRandomlyInBothSidesOfMarket(deployedContracts.markets, setupUser, deployedContracts.longShort);
                                                }));
                                  }));
                    });
                UpdateSystemState.testIntegration(contracts, accounts);
                MintNextPrice.testIntegration(contracts, accounts);
                ShiftNextPrice.testIntegration(contracts, accounts);
                RedeemNextPrice.testIntegration(contracts, accounts);
                return InitializeMarket.testIntegration(contracts, accounts);
              }));
        Globals.describeBoth("LongShort - Admin functions", (function (param) {
                var contracts = {
                  contents: undefined
                };
                var accounts = {
                  contents: undefined
                };
                before(function () {
                      return LetOps.Await.let_(ethers.getSigners(), (function (loadedAccounts) {
                                    accounts.contents = loadedAccounts;
                                    return LetOps.Await.let_(Helpers.initialize(accounts.contents[0], false), (function (deployedContracts) {
                                                  contracts.contents = deployedContracts;
                                                  
                                                }));
                                  }));
                    });
                describe("updateMarketOracle", (function () {
                        var newOracleManager = ethers.Wallet.createRandom().address;
                        it("should allow admin to update the oracle", (function () {
                                return LetOps.Await.let_(contracts.contents.longShort.oracleManagers(1), (function (originalOracleAddress) {
                                              return LetOps.Await.let_(contracts.contents.longShort.updateMarketOracle(1, newOracleManager), (function (param) {
                                                            return LetOps.Await.let_(contracts.contents.longShort.oracleManagers(1), (function (updatedOracleAddress) {
                                                                          Chai.addressEqual(undefined, updatedOracleAddress, newOracleManager);
                                                                          return LetOps.Await.let_(contracts.contents.longShort.updateMarketOracle(1, originalOracleAddress), (function (param) {
                                                                                        
                                                                                      }));
                                                                        }));
                                                          }));
                                            }));
                              }));
                        it("shouldn't allow non admin to update the oracle", (function () {
                                var attackerAddress = accounts.contents[5];
                                return Chai.expectRevert(contracts.contents.longShort.connect(attackerAddress).updateMarketOracle(1, newOracleManager), Helpers.adminErrorMessage(attackerAddress.address));
                              }));
                        
                      }));
                describe("changeMarketTreasurySplitGradient", (function () {
                        it("should allow admin to update a gradient", (function () {
                                return LetOps.Await.let_(contracts.contents.longShort.changeMarketTreasurySplitGradient(1, Globals.twoBn), (function (param) {
                                              return LetOps.Await.let_(contracts.contents.longShort.marketTreasurySplitGradient_e18(1), (function (updatedGradient) {
                                                            return Chai.bnEqual(undefined, updatedGradient, Globals.twoBn);
                                                          }));
                                            }));
                              }));
                        it("shouldn't allow non admin to update the treasury address", (function () {
                                var attackerAddress = accounts.contents[5];
                                return Chai.expectRevert(contracts.contents.longShort.connect(attackerAddress).changeMarketTreasurySplitGradient(1, Globals.twoBn), Helpers.adminErrorMessage(attackerAddress.address));
                              }));
                        
                      }));
                
              }));
        describe("Smocked", (function () {
                var contracts = {
                  contents: "NOT INITIALIZED"
                };
                var accounts = {
                  contents: "NOT INITIALIZED"
                };
                before(function () {
                      return LetOps.Await.let_(ethers.getSigners(), (function (loadedAccounts) {
                                    accounts.contents = loadedAccounts;
                                    return LetOps.Await.let_(Helpers.initializeLongShortUnit(undefined), (function (deployedContracts) {
                                                  contracts.contents = deployedContracts;
                                                  
                                                }));
                                  }));
                    });
                return Globals.describeUnit("Unit tests", (function (param) {
                              ExecuteOutstandingNextPriceSettlements.testUnit(contracts, accounts);
                              ExecuteOutstandingNextPriceSettlementsUserMulti.testUnit(contracts, accounts);
                              ExecuteNextPriceAction.testUnit(contracts, accounts);
                              PriceCalculationFunctions.testUnit(contracts, accounts);
                              DepositFunds.testUnit(contracts, accounts);
                              GetUsersConfirmedButNotSettledBalance.testUnit(contracts, accounts);
                              InitializeMarket.testUnit(contracts, accounts);
                              UpdateSystemState.testUnit(contracts, accounts);
                              ClaimAndDistributeYieldThenRebalanceMarket.testUnit(contracts, accounts);
                              UtilsHelpers.testUnit(contracts, accounts);
                              RedeemNextPrice.testUnit(contracts, accounts);
                              ShiftNextPrice.testUnit(contracts, accounts);
                              MintNextPrice.testUnit(contracts, accounts);
                              BatchedSettlement.testUnit(contracts, accounts);
                              return CreateNewSyntheticMarket.testUnit(contracts, accounts);
                            }));
              }));
        
      }));

/*  Not a pure module */
