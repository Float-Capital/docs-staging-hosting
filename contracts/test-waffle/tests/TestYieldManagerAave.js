// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var LetOps = require("../library/LetOps.js");
var Globals = require("../library/Globals.js");
var Helpers = require("../library/Helpers.js");
var ClaimAaveRewards = require("./yieldManager/ClaimAaveRewards.js");
var ERC20MockSmocked = require("../library/smock/ERC20MockSmocked.js");
var YieldManagerAave = require("../library/contracts/YieldManagerAave.js");
var AaveIncentivesControllerMockSmocked = require("../library/smock/AaveIncentivesControllerMockSmocked.js");
var LendingPoolAddressesProviderMockSmocked = require("../library/smock/LendingPoolAddressesProviderMockSmocked.js");

describe("Float System", (function () {
        var accounts = {
          contents: undefined
        };
        var contracts = {
          contents: undefined
        };
        var setup = function (param) {
          return LetOps.AwaitThen.let_(ethers.getSigners(), (function (loadedAccounts) {
                        accounts.contents = loadedAccounts;
                        var treasury = loadedAccounts[1];
                        var longShortAddress = ethers.Wallet.createRandom().address;
                        return LetOps.Await.let_(ERC20MockSmocked.make(undefined), (function (paymentTokenSmocked) {
                                      return LetOps.Await.let_(ERC20MockSmocked.make(undefined), (function (aTokenSmocked) {
                                                    return LetOps.Await.let_(AaveIncentivesControllerMockSmocked.make(undefined), (function (aaveIncentivesControllerSmocked) {
                                                                  return LetOps.Await.let_(LendingPoolAddressesProviderMockSmocked.make(undefined), (function (lendingPoolAddressesProviderSmocked) {
                                                                                return LetOps.Await.let_(YieldManagerAave.make(undefined), (function (yieldManagerAave) {
                                                                                              return LetOps.Await.let_(yieldManagerAave.initialize(longShortAddress, treasury.address, paymentTokenSmocked.address, aTokenSmocked.address, lendingPoolAddressesProviderSmocked.address, aaveIncentivesControllerSmocked.address, 6543, Helpers.randomAddress(undefined)), (function (param) {
                                                                                                            contracts.contents = {
                                                                                                              aToken: aTokenSmocked,
                                                                                                              yieldManagerAave: yieldManagerAave,
                                                                                                              paymentToken: paymentTokenSmocked,
                                                                                                              treasury: treasury,
                                                                                                              aaveIncentivesController: aaveIncentivesControllerSmocked
                                                                                                            };
                                                                                                            
                                                                                                          }));
                                                                                            }));
                                                                              }));
                                                                }));
                                                  }));
                                    }));
                      }));
        };
        Globals.describeUnit("(un-optimised) YieldManagerAave - internals exposed", (function (param) {
                beforeEach(function () {
                      return setup(undefined);
                    });
                
              }));
        return Globals.describeUnit("(optimised) YieldManagerAave - internals exposed ", (function (param) {
                      before(function () {
                            return setup(undefined);
                          });
                      return ClaimAaveRewards.testUnit(contracts);
                    }));
      }));

/*  Not a pure module */
