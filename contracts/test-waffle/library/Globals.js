// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var LetOps = require("./LetOps.js");

function it$prime$prime(str, fn) {
  it(str, (function (param) {
          return Promise.resolve(Curry._1(fn, undefined));
        }));
  
}

function before_once$prime(fn) {
  var ranRef = {
    contents: false
  };
  beforeEach(function (param) {
        if (ranRef.contents) {
          return Promise.resolve(undefined);
        } else {
          return LetOps.Await.let_(Curry._1(fn, undefined), (function (param) {
                        ranRef.contents = true;
                        
                      }));
        }
      });
  
}

function add(prim, prim$1) {
  return prim.add(prim$1);
}

function sub(prim, prim$1) {
  return prim.sub(prim$1);
}

function bnFromString(prim) {
  return ethers.BigNumber.from(prim);
}

function bnFromInt(prim) {
  return ethers.BigNumber.from(prim);
}

function mul(prim, prim$1) {
  return prim.mul(prim$1);
}

function div(prim, prim$1) {
  return prim.div(prim$1);
}

function bnToString(prim) {
  return prim.toString();
}

function bnToInt(prim) {
  return prim.toNumber();
}

function bnGt(prim, prim$1) {
  return prim.gt(prim$1);
}

function bnGte(prim, prim$1) {
  return prim.gte(prim$1);
}

function bnLt(prim, prim$1) {
  return prim.lt(prim$1);
}

exports.it$prime$prime = it$prime$prime;
exports.before_once$prime = before_once$prime;
exports.add = add;
exports.sub = sub;
exports.bnFromString = bnFromString;
exports.bnFromInt = bnFromInt;
exports.mul = mul;
exports.div = div;
exports.bnToString = bnToString;
exports.bnToInt = bnToInt;
exports.bnGt = bnGt;
exports.bnGte = bnGte;
exports.bnLt = bnLt;
/* No side effect */
