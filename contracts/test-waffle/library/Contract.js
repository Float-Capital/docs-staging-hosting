// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var LetOps = require("./LetOps.js");
var Staker = require("./contracts/Staker.js");
var Globals = require("./Globals.js");

function mintAndApprove(t, user, amount, spender) {
  return t.mint(user.address, amount).then(function (param) {
              return t.connect(user).approve(spender, amount);
            });
}

var PaymentTokenHelpers = {
  mintAndApprove: mintAndApprove
};

function marketIndexOfSynth(longShort, syntheticToken) {
  return longShort.staker().then(Staker.at).then(function (__x) {
              return __x.marketIndexOfToken(syntheticToken.address);
            });
}

var DataFetchers = {
  marketIndexOfSynth: marketIndexOfSynth
};

function getFees(longShort, marketIndex, amount, valueInEntrySide, valueInOtherSide) {
  return LetOps.AwaitThen.let_(longShort.baseEntryFee(marketIndex), (function (baseEntryFee) {
                return LetOps.AwaitThen.let_(longShort.badLiquidityEntryFee(marketIndex), (function (badLiquidityEntryFee) {
                              return LetOps.Await.let_(longShort.feeUnitsOfPrecision(), (function (feeUnitsOfPrecision) {
                                            var baseFee = Globals.div(Globals.mul(amount, baseEntryFee), feeUnitsOfPrecision);
                                            if (Globals.bnGte(valueInEntrySide, valueInOtherSide)) {
                                              return Globals.add(baseFee, Globals.div(Globals.mul(amount, badLiquidityEntryFee), feeUnitsOfPrecision));
                                            }
                                            if (!Globals.bnGt(Globals.add(valueInEntrySide, amount), valueInOtherSide)) {
                                              return baseFee;
                                            }
                                            var amountImbalancing = Globals.sub(amount, Globals.sub(valueInOtherSide, valueInEntrySide));
                                            var penaltyFee = Globals.div(Globals.mul(amountImbalancing, badLiquidityEntryFee), feeUnitsOfPrecision);
                                            return Globals.add(baseFee, penaltyFee);
                                          }));
                            }));
              }));
}

var LongShortHelpers = {
  getFees: getFees
};

exports.PaymentTokenHelpers = PaymentTokenHelpers;
exports.DataFetchers = DataFetchers;
exports.LongShortHelpers = LongShortHelpers;
/* No side effect */
