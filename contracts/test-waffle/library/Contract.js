// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var LetOps = require("./LetOps.js");
var Staker = require("./contracts/Staker.js");
var Globals = require("./Globals.js");
var CONSTANTS = require("../CONSTANTS.js");
var ContractHelpers = require("./ContractHelpers.js");

function mintAndApprove(t, user, amount, spender) {
  return t.mint(user.address, amount).then(function (param) {
              return t.connect(user).approve(spender, amount);
            });
}

var PaymentTokenHelpers = {
  mintAndApprove: mintAndApprove
};

function marketIndexOfSynth(longShort, syntheticToken) {
  return longShort.staker().then(Staker.at).then(function (__x) {
              return __x.marketIndexOfToken(syntheticToken.address);
            });
}

var DataFetchers = {
  marketIndexOfSynth: marketIndexOfSynth
};

function getMarketBalance(longShort, marketIndex) {
  return LetOps.AwaitThen.let_(longShort.syntheticTokenPoolValue(marketIndex, true), (function (longValue) {
                return LetOps.Await.let_(longShort.syntheticTokenPoolValue(marketIndex, false), (function (shortValue) {
                              return {
                                      longValue: longValue,
                                      shortValue: shortValue
                                    };
                            }));
              }));
}

function getSyntheticTokenPrice(longShort, marketIndex, isLong) {
  return LetOps.AwaitThen.let_(longShort.syntheticTokens(marketIndex, isLong), (function (syntheticTokenAddress) {
                return LetOps.AwaitThen.let_(ContractHelpers.attachToContract("SyntheticToken", syntheticTokenAddress), (function (synthContract) {
                              return LetOps.AwaitThen.let_(synthContract.totalSupply(), (function (totalSupply) {
                                            return LetOps.Await.let_(longShort.syntheticTokenPoolValue(marketIndex, isLong), (function (syntheticTokenPoolValue) {
                                                          return Globals.div(Globals.mul(syntheticTokenPoolValue, CONSTANTS.tenToThe18), totalSupply);
                                                        }));
                                          }));
                            }));
              }));
}

var LongShortHelpers = {
  getMarketBalance: getMarketBalance,
  getSyntheticTokenPrice: getSyntheticTokenPrice
};

function getIsLong(synthToken) {
  return LetOps.Await.let_(synthToken.isLong(), (function (isLong) {
                return isLong === true;
              }));
}

var SyntheticTokenHelpers = {
  getIsLong: getIsLong
};

exports.PaymentTokenHelpers = PaymentTokenHelpers;
exports.DataFetchers = DataFetchers;
exports.LongShortHelpers = LongShortHelpers;
exports.SyntheticTokenHelpers = SyntheticTokenHelpers;
/* Globals Not a pure module */
