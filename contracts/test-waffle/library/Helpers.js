// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_int = require("bs-platform/lib/js/js_int.js");
var Js_math = require("bs-platform/lib/js/js_math.js");
var Contract = require("./Contract.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

function randomInteger(param) {
  return ethers.BigNumber.from(Js_math.random_int(1, Js_int.max));
}

function randomTokenAmount(param) {
  return ethers.BigNumber.from(Js_math.random_int(1, Js_int.max)).mul(ethers.BigNumber.from("10000000000000"));
}

function randomMintLongShort(param) {
  var match = Js_math.random_int(0, 3);
  switch (match) {
    case 0 :
        return {
                TAG: /* Long */0,
                _0: randomTokenAmount(undefined)
              };
    case 1 :
        return {
                TAG: /* Short */1,
                _0: randomTokenAmount(undefined)
              };
    case 2 :
        return {
                TAG: /* Both */2,
                _0: randomTokenAmount(undefined),
                _1: randomTokenAmount(undefined)
              };
    default:
      return {
              TAG: /* Both */2,
              _0: randomTokenAmount(undefined),
              _1: randomTokenAmount(undefined)
            };
  }
}

function createSyntheticMarket(admin, longShort, treasury, fundToken, marketName, marketSymbol) {
  return Promise.all([
                Contract.OracleManagerMock.make(admin),
                Contract.YieldManagerMock.make(admin, longShort.address, treasury.address, fundToken.address)
              ]).then(function (param) {
              var yieldManager = param[1];
              Contract.PaymentToken.grantMintRole(fundToken, yieldManager.address);
              return longShort.newSyntheticMarket(marketName, marketSymbol, fundToken.address, param[0].address, yieldManager.address).then(function (param) {
                            return longShort.latestMarket();
                          }).then(function (marketIndex) {
                          return longShort.initializeMarket(marketIndex, 0, 50, 50, 50, ethers.BigNumber.from("1000000000000000000"), ethers.BigNumber.from(0));
                        });
            });
}

function getAllMarkets(longShort) {
  return longShort.latestMarket().then(function (nextMarketIndex) {
              return Promise.all(Belt_Array.map(Belt_Array.range(1, nextMarketIndex), (function (marketIndex) {
                                return Promise.all([
                                              longShort.longTokens(marketIndex).then(Contract.SyntheticToken.at),
                                              longShort.shortTokens(marketIndex).then(Contract.SyntheticToken.at),
                                              longShort.fundTokens(marketIndex).then(Contract.PaymentToken.at),
                                              longShort.oracleManagers(marketIndex).then(Contract.OracleManagerMock.at),
                                              longShort.yieldManagers(marketIndex).then(Contract.YieldManagerMock.at)
                                            ]).then(function (param) {
                                            return {
                                                    paymentToken: param[2],
                                                    oracleManager: param[3],
                                                    yieldManager: param[4],
                                                    longSynth: param[0],
                                                    shortSynth: param[1],
                                                    marketIndex: marketIndex
                                                  };
                                          });
                              })));
            });
}

function inititialize(admin, exposeInternals) {
  return Promise.all([
                Contract.FloatCapital_v0.make(undefined),
                Contract.Treasury_v0.make(undefined),
                Contract.FloatToken.make(undefined),
                exposeInternals ? Contract.Staker.makeExposed(undefined) : Contract.Staker.make(undefined),
                exposeInternals ? Contract.LongShort.makeExposed(undefined) : Contract.LongShort.make(undefined),
                Promise.all([
                      Contract.PaymentToken.make("Pay Token 1", "PT1"),
                      Contract.PaymentToken.make("Pay Token 2", "PT2")
                    ])
              ]).then(function (param) {
              var match = param[5];
              var payToken2 = match[1];
              var payToken1 = match[0];
              var longShort = param[4];
              var staker = param[3];
              var floatToken = param[2];
              var treasury = param[1];
              var floatCapital = param[0];
              return Contract.TokenFactory.make(admin.address, longShort.address).then(function (tokenFactory) {
                          return Promise.all([
                                          floatToken["initialize(string,string,address)"]("Float token", "FLOAT TOKEN", staker.address),
                                          treasury.initialize(admin.address),
                                          longShort.initialize(admin.address, treasury.address, tokenFactory.address, staker.address),
                                          staker.initialize(admin.address, longShort.address, floatToken.address, floatCapital.address)
                                        ]).then(function (param) {
                                        return Belt_Array.reduceWithIndex([
                                                      payToken1,
                                                      payToken1,
                                                      payToken2,
                                                      payToken1
                                                    ], Promise.resolve(undefined), (function (previousPromise, paymentToken, index) {
                                                        return previousPromise.then(function (param) {
                                                                    return createSyntheticMarket(admin.address, longShort, treasury, paymentToken, "Test Market " + String(index), "TM" + String(index));
                                                                  });
                                                      })).then(function (param) {
                                                    return getAllMarkets(longShort);
                                                  });
                                      }).then(function (markets) {
                                      return {
                                              tokenFactory: tokenFactory,
                                              treasury: treasury,
                                              floatToken: floatToken,
                                              staker: staker,
                                              longShort: longShort,
                                              markets: markets
                                            };
                                    });
                        });
            });
}

var increaseTime = ((seconds) => ethers.provider.send("evm_increaseTime", [seconds]));

exports.randomInteger = randomInteger;
exports.randomTokenAmount = randomTokenAmount;
exports.randomMintLongShort = randomMintLongShort;
exports.createSyntheticMarket = createSyntheticMarket;
exports.getAllMarkets = getAllMarkets;
exports.inititialize = inititialize;
exports.increaseTime = increaseTime;
/* No side effect */
