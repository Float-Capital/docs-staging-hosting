// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var ContractHelpers = require("../ContractHelpers.js");
var Smock = require("@eth-optimism/smock");

function mockFLOAT_ISSUANCE_FIXED_DECIMALToReturn(_r, _param0) {
  ((_r.smocked.FLOAT_ISSUANCE_FIXED_DECIMAL.will.return.with([_param0])));
  
}

function fLOAT_ISSUANCE_FIXED_DECIMALCalls(_r) {
  var array = _r.smocked.FLOAT_ISSUANCE_FIXED_DECIMAL.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockAdminToReturn(_r, _param0) {
  ((_r.smocked.admin.will.return.with([_param0])));
  
}

function adminCalls(_r) {
  var array = _r.smocked.admin.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockBalanceIncentiveCurveEquilibriumOffsetToReturn(_r, _param0) {
  ((_r.smocked.balanceIncentiveCurveEquilibriumOffset.will.return.with([_param0])));
  
}

function balanceIncentiveCurveEquilibriumOffsetCalls(_r) {
  var array = _r.smocked.balanceIncentiveCurveEquilibriumOffset.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockBalanceIncentiveCurveExponentToReturn(_r, _param0) {
  ((_r.smocked.balanceIncentiveCurveExponent.will.return.with([_param0])));
  
}

function balanceIncentiveCurveExponentCalls(_r) {
  var array = _r.smocked.balanceIncentiveCurveExponent.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockFloatCapitalToReturn(_r, _param0) {
  ((_r.smocked.floatCapital.will.return.with([_param0])));
  
}

function floatCapitalCalls(_r) {
  var array = _r.smocked.floatCapital.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockFloatPercentageToReturn(_r, _param0) {
  ((_r.smocked.floatPercentage.will.return.with([_param0])));
  
}

function floatPercentageCalls(_r) {
  var array = _r.smocked.floatPercentage.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockFloatTokenToReturn(_r, _param0) {
  ((_r.smocked.floatToken.will.return.with([_param0])));
  
}

function floatTokenCalls(_r) {
  var array = _r.smocked.floatToken.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockLatestRewardIndexToReturn(_r, _param0) {
  ((_r.smocked.latestRewardIndex.will.return.with([_param0])));
  
}

function latestRewardIndexCalls(_r) {
  var array = _r.smocked.latestRewardIndex.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockLongShortCoreContractToReturn(_r, _param0) {
  ((_r.smocked.longShortCoreContract.will.return.with([_param0])));
  
}

function longShortCoreContractCalls(_r) {
  var array = _r.smocked.longShortCoreContract.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockMarketIndexOfTokenToReturn(_r, _param0) {
  ((_r.smocked.marketIndexOfToken.will.return.with([_param0])));
  
}

function marketIndexOfTokenCalls(_r) {
  var array = _r.smocked.marketIndexOfToken.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockMarketLaunchIncentiveMultipliersToReturn(_r, _param0) {
  ((_r.smocked.marketLaunchIncentiveMultipliers.will.return.with([_param0])));
  
}

function marketLaunchIncentiveMultipliersCalls(_r) {
  var array = _r.smocked.marketLaunchIncentiveMultipliers.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockMarketLaunchIncentivePeriodToReturn(_r, _param0) {
  ((_r.smocked.marketLaunchIncentivePeriod.will.return.with([_param0])));
  
}

function marketLaunchIncentivePeriodCalls(_r) {
  var array = _r.smocked.marketLaunchIncentivePeriod.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockMarketUnstakeFeeBasisPointsToReturn(_r, _param0) {
  ((_r.smocked.marketUnstakeFeeBasisPoints.will.return.with([_param0])));
  
}

function marketUnstakeFeeBasisPointsCalls(_r) {
  var array = _r.smocked.marketUnstakeFeeBasisPoints.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function mockSyntheticRewardParamsToReturn(_r, _param0, _param1, _param2) {
  ((_r.smocked.syntheticRewardParams.will.return.with([_param0,_param1,_param2])));
  
}

function syntheticRewardParamsCalls(_r) {
  var array = _r.smocked.syntheticRewardParams.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockSyntheticTokensToReturn(_r, _param0) {
  ((_r.smocked.syntheticTokens.will.return.with([_param0])));
  
}

function syntheticTokensCalls(_r) {
  var array = _r.smocked.syntheticTokens.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockUserAmountStakedToReturn(_r, _param0) {
  ((_r.smocked.userAmountStaked.will.return.with([_param0])));
  
}

function userAmountStakedCalls(_r) {
  var array = _r.smocked.userAmountStaked.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockUserIndexOfLastClaimedRewardToReturn(_r, _param0) {
  ((_r.smocked.userIndexOfLastClaimedReward.will.return.with([_param0])));
  
}

function userIndexOfLastClaimedRewardCalls(_r) {
  var array = _r.smocked.userIndexOfLastClaimedReward.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function mockInitializeToReturn(_r) {
  ((_r.smocked.initialize.will.return()));
  
}

function initializeCalls(_r) {
  var array = _r.smocked.initialize.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        admin: param[0],
                        longShortCoreContract: param[1],
                        floatToken: param[2],
                        floatCapital: param[3],
                        floatPercentage: param[4]
                      };
              }));
}

function mockChangeAdminToReturn(_r) {
  ((_r.smocked.changeAdmin.will.return()));
  
}

function changeAdminCalls(_r) {
  var array = _r.smocked.changeAdmin.calls;
  return Belt_Array.map(array, (function (_m) {
                var admin = _m[0];
                return {
                        admin: admin
                      };
              }));
}

function mockChangeFloatPercentageToReturn(_r) {
  ((_r.smocked.changeFloatPercentage.will.return()));
  
}

function changeFloatPercentageCalls(_r) {
  var array = _r.smocked.changeFloatPercentage.calls;
  return Belt_Array.map(array, (function (_m) {
                var newFloatPercentage = _m[0];
                return {
                        newFloatPercentage: newFloatPercentage
                      };
              }));
}

function mockChangeUnstakeFeeToReturn(_r) {
  ((_r.smocked.changeUnstakeFee.will.return()));
  
}

function changeUnstakeFeeCalls(_r) {
  var array = _r.smocked.changeUnstakeFee.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        newMarketUnstakeFeeBasisPoints: param[1]
                      };
              }));
}

function mockChangeMarketLaunchIncentiveParametersToReturn(_r) {
  ((_r.smocked.changeMarketLaunchIncentiveParameters.will.return()));
  
}

function changeMarketLaunchIncentiveParametersCalls(_r) {
  var array = _r.smocked.changeMarketLaunchIncentiveParameters.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        period: param[1],
                        initialMultiplier: param[2]
                      };
              }));
}

function mockChangBalanceIncentiveExponentToReturn(_r) {
  ((_r.smocked.changBalanceIncentiveExponent.will.return()));
  
}

function changBalanceIncentiveExponentCalls(_r) {
  var array = _r.smocked.changBalanceIncentiveExponent.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        balanceIncentiveCurveExponent: param[1]
                      };
              }));
}

function mockChangBalanceIncentiveEquilibriumOffsetToReturn(_r) {
  ((_r.smocked.changBalanceIncentiveEquilibriumOffset.will.return()));
  
}

function changBalanceIncentiveEquilibriumOffsetCalls(_r) {
  var array = _r.smocked.changBalanceIncentiveEquilibriumOffset.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        balanceIncentiveCurveEquilibriumOffset: param[1]
                      };
              }));
}

function mockAddNewStakingFundToReturn(_r) {
  ((_r.smocked.addNewStakingFund.will.return()));
  
}

function addNewStakingFundCalls(_r) {
  var array = _r.smocked.addNewStakingFund.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        longToken: param[1],
                        shortToken: param[2],
                        kInitialMultiplier: param[3],
                        kPeriod: param[4],
                        unstakeFeeBasisPoints: param[5],
                        balanceIncentiveCurveExponent: param[6],
                        balanceIncentiveCurveEquilibriumOffset: param[7]
                      };
              }));
}

function mockAddNewStateForFloatRewardsToReturn(_r) {
  ((_r.smocked.addNewStateForFloatRewards.will.return()));
  
}

function addNewStateForFloatRewardsCalls(_r) {
  var array = _r.smocked.addNewStateForFloatRewards.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        longPrice: param[1],
                        shortPrice: param[2],
                        longValue: param[3],
                        shortValue: param[4]
                      };
              }));
}

function mockClaimFloatCustomToReturn(_r) {
  ((_r.smocked.claimFloatCustom.will.return()));
  
}

function claimFloatCustomCalls(_r) {
  var array = _r.smocked.claimFloatCustom.calls;
  return Belt_Array.map(array, (function (_m) {
                var marketIndexes = _m[0];
                return {
                        marketIndexes: marketIndexes
                      };
              }));
}

function mockStakeFromUserToReturn(_r) {
  ((_r.smocked.stakeFromUser.will.return()));
  
}

function stakeFromUserCalls(_r) {
  var array = _r.smocked.stakeFromUser.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        from: param[0],
                        amount: param[1]
                      };
              }));
}

function mockWithdrawToReturn(_r) {
  ((_r.smocked.withdraw.will.return()));
  
}

function withdrawCalls(_r) {
  var array = _r.smocked.withdraw.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        token: param[0],
                        amount: param[1]
                      };
              }));
}

function mockWithdrawAllToReturn(_r) {
  ((_r.smocked.withdrawAll.will.return()));
  
}

function withdrawAllCalls(_r) {
  var array = _r.smocked.withdrawAll.calls;
  return Belt_Array.map(array, (function (_m) {
                var token = _m[0];
                return {
                        token: token
                      };
              }));
}

var mockContractName = "StakerForInternalMocking";

var internalRef = {
  contents: undefined
};

var functionToNotMock = {
  contents: ""
};

function setup(contract) {
  return ContractHelpers.deployContract0(mockContractName).then(function (a) {
                return Smock.smockit(a);
              }).then(function (b) {
              internalRef.contents = b;
              return contract.setMocker(b.address);
            });
}

function setFunctionForUnitTesting(contract, functionName) {
  functionToNotMock.contents = functionName;
  return contract.setFunctionToNotMock(functionName);
}

function setupFunctionForUnitTesting(contract, functionName) {
  return ContractHelpers.deployContract0(mockContractName).then(function (a) {
                return Smock.smockit(a);
              }).then(function (b) {
              internalRef.contents = b;
              return Promise.all([
                          contract.setMocker(b.address),
                          contract.setFunctionToNotMock(functionName)
                        ]);
            });
}

var MockingAFunctionThatYouShouldntBe = /* @__PURE__ */Caml_exceptions.create("StakerSmocked.InternalMock.MockingAFunctionThatYouShouldntBe");

var HaventSetupInternalMockingForStaker = /* @__PURE__ */Caml_exceptions.create("StakerSmocked.InternalMock.HaventSetupInternalMockingForStaker");

function checkForExceptions(functionName) {
  if (functionToNotMock.contents === functionName) {
    throw {
          RE_EXN_ID: MockingAFunctionThatYouShouldntBe,
          Error: new Error()
        };
  }
  if (internalRef.contents !== undefined) {
    return ;
  }
  throw {
        RE_EXN_ID: HaventSetupInternalMockingForStaker,
        Error: new Error()
      };
}

function mockInitializeToReturn$1(param) {
  checkForExceptions("initialize");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.initializeMock.will.return()));
          
        }));
  
}

function initializeCalls$1(param) {
  checkForExceptions("initialize");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.initializeMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          admin: param[0],
                                          longShortCoreContract: param[1],
                                          floatToken: param[2],
                                          floatCapital: param[3],
                                          floatPercentage: param[4]
                                        };
                                }));
                  })));
}

function mockChangeAdminToReturn$1(param) {
  checkForExceptions("changeAdmin");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.changeAdminMock.will.return()));
          
        }));
  
}

function changeAdminCalls$1(param) {
  checkForExceptions("changeAdmin");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.changeAdminMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var admin = _m[0];
                                  return {
                                          admin: admin
                                        };
                                }));
                  })));
}

function mock_changeFloatPercentageToReturn(param) {
  checkForExceptions("_changeFloatPercentage");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._changeFloatPercentageMock.will.return()));
          
        }));
  
}

function _changeFloatPercentageCalls(param) {
  checkForExceptions("_changeFloatPercentage");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._changeFloatPercentageMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var newFloatPercentage = _m[0];
                                  return {
                                          newFloatPercentage: newFloatPercentage
                                        };
                                }));
                  })));
}

function mockChangeFloatPercentageToReturn$1(param) {
  checkForExceptions("changeFloatPercentage");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.changeFloatPercentageMock.will.return()));
          
        }));
  
}

function changeFloatPercentageCalls$1(param) {
  checkForExceptions("changeFloatPercentage");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.changeFloatPercentageMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var newFloatPercentage = _m[0];
                                  return {
                                          newFloatPercentage: newFloatPercentage
                                        };
                                }));
                  })));
}

function mock_changeUnstakeFeeToReturn(param) {
  checkForExceptions("_changeUnstakeFee");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._changeUnstakeFeeMock.will.return()));
          
        }));
  
}

function _changeUnstakeFeeCalls(param) {
  checkForExceptions("_changeUnstakeFee");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._changeUnstakeFeeMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          newMarketUnstakeFeeBasisPoints: param[1]
                                        };
                                }));
                  })));
}

function mockChangeUnstakeFeeToReturn$1(param) {
  checkForExceptions("changeUnstakeFee");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.changeUnstakeFeeMock.will.return()));
          
        }));
  
}

function changeUnstakeFeeCalls$1(param) {
  checkForExceptions("changeUnstakeFee");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.changeUnstakeFeeMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          newMarketUnstakeFeeBasisPoints: param[1]
                                        };
                                }));
                  })));
}

function mockChangeMarketLaunchIncentiveParametersToReturn$1(param) {
  checkForExceptions("changeMarketLaunchIncentiveParameters");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.changeMarketLaunchIncentiveParametersMock.will.return()));
          
        }));
  
}

function changeMarketLaunchIncentiveParametersCalls$1(param) {
  checkForExceptions("changeMarketLaunchIncentiveParameters");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.changeMarketLaunchIncentiveParametersMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          period: param[1],
                                          initialMultiplier: param[2]
                                        };
                                }));
                  })));
}

function mock_changeMarketLaunchIncentiveParametersToReturn(param) {
  checkForExceptions("_changeMarketLaunchIncentiveParameters");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._changeMarketLaunchIncentiveParametersMock.will.return()));
          
        }));
  
}

function _changeMarketLaunchIncentiveParametersCalls(param) {
  checkForExceptions("_changeMarketLaunchIncentiveParameters");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._changeMarketLaunchIncentiveParametersMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          period: param[1],
                                          initialMultiplier: param[2]
                                        };
                                }));
                  })));
}

function mock_changBalanceIncentiveExponentToReturn(param) {
  checkForExceptions("_changBalanceIncentiveExponent");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._changBalanceIncentiveExponentMock.will.return()));
          
        }));
  
}

function _changBalanceIncentiveExponentCalls(param) {
  checkForExceptions("_changBalanceIncentiveExponent");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._changBalanceIncentiveExponentMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          balanceIncentiveCurveExponent: param[1]
                                        };
                                }));
                  })));
}

function mockChangBalanceIncentiveExponentToReturn$1(param) {
  checkForExceptions("changBalanceIncentiveExponent");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.changBalanceIncentiveExponentMock.will.return()));
          
        }));
  
}

function changBalanceIncentiveExponentCalls$1(param) {
  checkForExceptions("changBalanceIncentiveExponent");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.changBalanceIncentiveExponentMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          balanceIncentiveCurveExponent: param[1]
                                        };
                                }));
                  })));
}

function mock_changBalanceIncentiveEquilibriumOffsetToReturn(param) {
  checkForExceptions("_changBalanceIncentiveEquilibriumOffset");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._changBalanceIncentiveEquilibriumOffsetMock.will.return()));
          
        }));
  
}

function _changBalanceIncentiveEquilibriumOffsetCalls(param) {
  checkForExceptions("_changBalanceIncentiveEquilibriumOffset");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._changBalanceIncentiveEquilibriumOffsetMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          balanceIncentiveCurveEquilibriumOffset: param[1]
                                        };
                                }));
                  })));
}

function mockChangBalanceIncentiveEquilibriumOffsetToReturn$1(param) {
  checkForExceptions("changBalanceIncentiveEquilibriumOffset");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.changBalanceIncentiveEquilibriumOffsetMock.will.return()));
          
        }));
  
}

function changBalanceIncentiveEquilibriumOffsetCalls$1(param) {
  checkForExceptions("changBalanceIncentiveEquilibriumOffset");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.changBalanceIncentiveEquilibriumOffsetMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          balanceIncentiveCurveEquilibriumOffset: param[1]
                                        };
                                }));
                  })));
}

function mockAddNewStakingFundToReturn$1(param) {
  checkForExceptions("addNewStakingFund");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.addNewStakingFundMock.will.return()));
          
        }));
  
}

function addNewStakingFundCalls$1(param) {
  checkForExceptions("addNewStakingFund");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.addNewStakingFundMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          longToken: param[1],
                                          shortToken: param[2],
                                          kInitialMultiplier: param[3],
                                          kPeriod: param[4],
                                          unstakeFeeBasisPoints: param[5],
                                          balanceIncentiveCurveExponent: param[6],
                                          balanceIncentiveCurveEquilibriumOffset: param[7]
                                        };
                                }));
                  })));
}

function mockGetMarketLaunchIncentiveParametersToReturn(_param0, _param1) {
  checkForExceptions("getMarketLaunchIncentiveParameters");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.getMarketLaunchIncentiveParametersMock.will.return.with([_param0,_param1])));
          
        }));
  
}

function getMarketLaunchIncentiveParametersCalls(param) {
  checkForExceptions("getMarketLaunchIncentiveParameters");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.getMarketLaunchIncentiveParametersMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var marketIndex = _m[0];
                                  return {
                                          marketIndex: marketIndex
                                        };
                                }));
                  })));
}

function mockGetKValueToReturn(_param0) {
  checkForExceptions("getKValue");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.getKValueMock.will.return.with([_param0])));
          
        }));
  
}

function getKValueCalls(param) {
  checkForExceptions("getKValue");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.getKValueMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var marketIndex = _m[0];
                                  return {
                                          marketIndex: marketIndex
                                        };
                                }));
                  })));
}

function mockGetRequiredAmountOfBitShiftForSafeExponentiationToReturn(_param0) {
  checkForExceptions("getRequiredAmountOfBitShiftForSafeExponentiation");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.getRequiredAmountOfBitShiftForSafeExponentiationMock.will.return.with([_param0])));
          
        }));
  
}

function getRequiredAmountOfBitShiftForSafeExponentiationCalls(param) {
  checkForExceptions("getRequiredAmountOfBitShiftForSafeExponentiation");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.getRequiredAmountOfBitShiftForSafeExponentiationMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          number: param[0],
                                          exponent: param[1]
                                        };
                                }));
                  })));
}

function mockCalculateFloatPerSecondToReturn(_param0, _param1) {
  checkForExceptions("calculateFloatPerSecond");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.calculateFloatPerSecondMock.will.return.with([_param0,_param1])));
          
        }));
  
}

function calculateFloatPerSecondCalls(param) {
  checkForExceptions("calculateFloatPerSecond");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.calculateFloatPerSecondMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          longPrice: param[1],
                                          shortPrice: param[2],
                                          longValue: param[3],
                                          shortValue: param[4]
                                        };
                                }));
                  })));
}

function mockCalculateTimeDeltaToReturn(_param0) {
  checkForExceptions("calculateTimeDelta");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.calculateTimeDeltaMock.will.return.with([_param0])));
          
        }));
  
}

function calculateTimeDeltaCalls(param) {
  checkForExceptions("calculateTimeDelta");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.calculateTimeDeltaMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var marketIndex = _m[0];
                                  return {
                                          marketIndex: marketIndex
                                        };
                                }));
                  })));
}

function mockCalculateNewCumulativeRateToReturn(_param0, _param1) {
  checkForExceptions("calculateNewCumulativeRate");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.calculateNewCumulativeRateMock.will.return.with([_param0,_param1])));
          
        }));
  
}

function calculateNewCumulativeRateCalls(param) {
  checkForExceptions("calculateNewCumulativeRate");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.calculateNewCumulativeRateMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          longPrice: param[1],
                                          shortPrice: param[2],
                                          longValue: param[3],
                                          shortValue: param[4]
                                        };
                                }));
                  })));
}

function mockSetRewardObjectsToReturn(param) {
  checkForExceptions("setRewardObjects");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.setRewardObjectsMock.will.return()));
          
        }));
  
}

function setRewardObjectsCalls(param) {
  checkForExceptions("setRewardObjects");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.setRewardObjectsMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          longPrice: param[1],
                                          shortPrice: param[2],
                                          longValue: param[3],
                                          shortValue: param[4]
                                        };
                                }));
                  })));
}

function mockAddNewStateForFloatRewardsToReturn$1(param) {
  checkForExceptions("addNewStateForFloatRewards");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.addNewStateForFloatRewardsMock.will.return()));
          
        }));
  
}

function addNewStateForFloatRewardsCalls$1(param) {
  checkForExceptions("addNewStateForFloatRewards");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.addNewStateForFloatRewardsMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          longPrice: param[1],
                                          shortPrice: param[2],
                                          longValue: param[3],
                                          shortValue: param[4]
                                        };
                                }));
                  })));
}

function mockCalculateAccumulatedFloatHelperToReturn(_param0, _param1) {
  checkForExceptions("calculateAccumulatedFloatHelper");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.calculateAccumulatedFloatHelperMock.will.return.with([_param0,_param1])));
          
        }));
  
}

function calculateAccumulatedFloatHelperCalls(param) {
  checkForExceptions("calculateAccumulatedFloatHelper");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.calculateAccumulatedFloatHelperMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          user: param[1],
                                          amountStakedLong: param[2],
                                          amountStakedShort: param[3],
                                          usersLastRewardIndex: param[4]
                                        };
                                }));
                  })));
}

function mockCalculateAccumulatedFloatToReturn(_param0, _param1) {
  checkForExceptions("calculateAccumulatedFloat");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.calculateAccumulatedFloatMock.will.return.with([_param0,_param1])));
          
        }));
  
}

function calculateAccumulatedFloatCalls(param) {
  checkForExceptions("calculateAccumulatedFloat");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.calculateAccumulatedFloatMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          user: param[1]
                                        };
                                }));
                  })));
}

function mock_mintFloatToReturn(param) {
  checkForExceptions("_mintFloat");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._mintFloatMock.will.return()));
          
        }));
  
}

function _mintFloatCalls(param) {
  checkForExceptions("_mintFloat");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._mintFloatMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          user: param[0],
                                          floatToMint: param[1]
                                        };
                                }));
                  })));
}

function mockMintAccumulatedFloatToReturn(param) {
  checkForExceptions("mintAccumulatedFloat");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.mintAccumulatedFloatMock.will.return()));
          
        }));
  
}

function mintAccumulatedFloatCalls(param) {
  checkForExceptions("mintAccumulatedFloat");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.mintAccumulatedFloatMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          user: param[1]
                                        };
                                }));
                  })));
}

function mock_claimFloatToReturn(param) {
  checkForExceptions("_claimFloat");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._claimFloatMock.will.return()));
          
        }));
  
}

function _claimFloatCalls(param) {
  checkForExceptions("_claimFloat");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._claimFloatMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var marketIndexes = _m[0];
                                  return {
                                          marketIndexes: marketIndexes
                                        };
                                }));
                  })));
}

function mockClaimFloatCustomToReturn$1(param) {
  checkForExceptions("claimFloatCustom");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.claimFloatCustomMock.will.return()));
          
        }));
  
}

function claimFloatCustomCalls$1(param) {
  checkForExceptions("claimFloatCustom");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.claimFloatCustomMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var marketIndexes = _m[0];
                                  return {
                                          marketIndexes: marketIndexes
                                        };
                                }));
                  })));
}

function mockStakeFromUserToReturn$1(param) {
  checkForExceptions("stakeFromUser");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.stakeFromUserMock.will.return()));
          
        }));
  
}

function stakeFromUserCalls$1(param) {
  checkForExceptions("stakeFromUser");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.stakeFromUserMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          from: param[0],
                                          amount: param[1]
                                        };
                                }));
                  })));
}

function mock_stakeToReturn(param) {
  checkForExceptions("_stake");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._stakeMock.will.return()));
          
        }));
  
}

function _stakeCalls(param) {
  checkForExceptions("_stake");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._stakeMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          token: param[0],
                                          amount: param[1],
                                          user: param[2]
                                        };
                                }));
                  })));
}

function mock_withdrawToReturn(param) {
  checkForExceptions("_withdraw");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._withdrawMock.will.return()));
          
        }));
  
}

function _withdrawCalls(param) {
  checkForExceptions("_withdraw");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._withdrawMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          token: param[0],
                                          amount: param[1]
                                        };
                                }));
                  })));
}

function mockWithdrawToReturn$1(param) {
  checkForExceptions("withdraw");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.withdrawMock.will.return()));
          
        }));
  
}

function withdrawCalls$1(param) {
  checkForExceptions("withdraw");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.withdrawMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          token: param[0],
                                          amount: param[1]
                                        };
                                }));
                  })));
}

function mockWithdrawAllToReturn$1(param) {
  checkForExceptions("withdrawAll");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.withdrawAllMock.will.return()));
          
        }));
  
}

function withdrawAllCalls$1(param) {
  checkForExceptions("withdrawAll");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.withdrawAllMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var token = _m[0];
                                  return {
                                          token: token
                                        };
                                }));
                  })));
}

function mockOnlyAdminToReturn(param) {
  checkForExceptions("onlyAdmin");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.onlyAdminMock.will.return()));
          
        }));
  
}

function onlyAdminCalls(param) {
  checkForExceptions("onlyAdmin");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.onlyAdminMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  
                                }));
                  })));
}

function mockOnlyValidSyntheticToReturn(param) {
  checkForExceptions("onlyValidSynthetic");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.onlyValidSyntheticMock.will.return()));
          
        }));
  
}

function onlyValidSyntheticCalls(param) {
  checkForExceptions("onlyValidSynthetic");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.onlyValidSyntheticMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var synth = _m[0];
                                  return {
                                          synth: synth
                                        };
                                }));
                  })));
}

function mockOnlyValidMarketToReturn(param) {
  checkForExceptions("onlyValidMarket");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.onlyValidMarketMock.will.return()));
          
        }));
  
}

function onlyValidMarketCalls(param) {
  checkForExceptions("onlyValidMarket");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.onlyValidMarketMock.calls;
                    return Belt_Array.map(array, (function (_m) {
                                  var marketIndex = _m[0];
                                  return {
                                          marketIndex: marketIndex
                                        };
                                }));
                  })));
}

function mockOnlyFloatToReturn(param) {
  checkForExceptions("onlyFloat");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.onlyFloatMock.will.return()));
          
        }));
  
}

function onlyFloatCalls(param) {
  checkForExceptions("onlyFloat");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.onlyFloatMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  
                                }));
                  })));
}

var InternalMock = {
  mockContractName: mockContractName,
  internalRef: internalRef,
  functionToNotMock: functionToNotMock,
  setup: setup,
  setFunctionForUnitTesting: setFunctionForUnitTesting,
  setupFunctionForUnitTesting: setupFunctionForUnitTesting,
  MockingAFunctionThatYouShouldntBe: MockingAFunctionThatYouShouldntBe,
  HaventSetupInternalMockingForStaker: HaventSetupInternalMockingForStaker,
  checkForExceptions: checkForExceptions,
  mockInitializeToReturn: mockInitializeToReturn$1,
  initializeCalls: initializeCalls$1,
  mockChangeAdminToReturn: mockChangeAdminToReturn$1,
  changeAdminCalls: changeAdminCalls$1,
  mock_changeFloatPercentageToReturn: mock_changeFloatPercentageToReturn,
  _changeFloatPercentageCalls: _changeFloatPercentageCalls,
  mockChangeFloatPercentageToReturn: mockChangeFloatPercentageToReturn$1,
  changeFloatPercentageCalls: changeFloatPercentageCalls$1,
  mock_changeUnstakeFeeToReturn: mock_changeUnstakeFeeToReturn,
  _changeUnstakeFeeCalls: _changeUnstakeFeeCalls,
  mockChangeUnstakeFeeToReturn: mockChangeUnstakeFeeToReturn$1,
  changeUnstakeFeeCalls: changeUnstakeFeeCalls$1,
  mockChangeMarketLaunchIncentiveParametersToReturn: mockChangeMarketLaunchIncentiveParametersToReturn$1,
  changeMarketLaunchIncentiveParametersCalls: changeMarketLaunchIncentiveParametersCalls$1,
  mock_changeMarketLaunchIncentiveParametersToReturn: mock_changeMarketLaunchIncentiveParametersToReturn,
  _changeMarketLaunchIncentiveParametersCalls: _changeMarketLaunchIncentiveParametersCalls,
  mock_changBalanceIncentiveExponentToReturn: mock_changBalanceIncentiveExponentToReturn,
  _changBalanceIncentiveExponentCalls: _changBalanceIncentiveExponentCalls,
  mockChangBalanceIncentiveExponentToReturn: mockChangBalanceIncentiveExponentToReturn$1,
  changBalanceIncentiveExponentCalls: changBalanceIncentiveExponentCalls$1,
  mock_changBalanceIncentiveEquilibriumOffsetToReturn: mock_changBalanceIncentiveEquilibriumOffsetToReturn,
  _changBalanceIncentiveEquilibriumOffsetCalls: _changBalanceIncentiveEquilibriumOffsetCalls,
  mockChangBalanceIncentiveEquilibriumOffsetToReturn: mockChangBalanceIncentiveEquilibriumOffsetToReturn$1,
  changBalanceIncentiveEquilibriumOffsetCalls: changBalanceIncentiveEquilibriumOffsetCalls$1,
  mockAddNewStakingFundToReturn: mockAddNewStakingFundToReturn$1,
  addNewStakingFundCalls: addNewStakingFundCalls$1,
  mockGetMarketLaunchIncentiveParametersToReturn: mockGetMarketLaunchIncentiveParametersToReturn,
  getMarketLaunchIncentiveParametersCalls: getMarketLaunchIncentiveParametersCalls,
  mockGetKValueToReturn: mockGetKValueToReturn,
  getKValueCalls: getKValueCalls,
  mockGetRequiredAmountOfBitShiftForSafeExponentiationToReturn: mockGetRequiredAmountOfBitShiftForSafeExponentiationToReturn,
  getRequiredAmountOfBitShiftForSafeExponentiationCalls: getRequiredAmountOfBitShiftForSafeExponentiationCalls,
  mockCalculateFloatPerSecondToReturn: mockCalculateFloatPerSecondToReturn,
  calculateFloatPerSecondCalls: calculateFloatPerSecondCalls,
  mockCalculateTimeDeltaToReturn: mockCalculateTimeDeltaToReturn,
  calculateTimeDeltaCalls: calculateTimeDeltaCalls,
  mockCalculateNewCumulativeRateToReturn: mockCalculateNewCumulativeRateToReturn,
  calculateNewCumulativeRateCalls: calculateNewCumulativeRateCalls,
  mockSetRewardObjectsToReturn: mockSetRewardObjectsToReturn,
  setRewardObjectsCalls: setRewardObjectsCalls,
  mockAddNewStateForFloatRewardsToReturn: mockAddNewStateForFloatRewardsToReturn$1,
  addNewStateForFloatRewardsCalls: addNewStateForFloatRewardsCalls$1,
  mockCalculateAccumulatedFloatHelperToReturn: mockCalculateAccumulatedFloatHelperToReturn,
  calculateAccumulatedFloatHelperCalls: calculateAccumulatedFloatHelperCalls,
  mockCalculateAccumulatedFloatToReturn: mockCalculateAccumulatedFloatToReturn,
  calculateAccumulatedFloatCalls: calculateAccumulatedFloatCalls,
  mock_mintFloatToReturn: mock_mintFloatToReturn,
  _mintFloatCalls: _mintFloatCalls,
  mockMintAccumulatedFloatToReturn: mockMintAccumulatedFloatToReturn,
  mintAccumulatedFloatCalls: mintAccumulatedFloatCalls,
  mock_claimFloatToReturn: mock_claimFloatToReturn,
  _claimFloatCalls: _claimFloatCalls,
  mockClaimFloatCustomToReturn: mockClaimFloatCustomToReturn$1,
  claimFloatCustomCalls: claimFloatCustomCalls$1,
  mockStakeFromUserToReturn: mockStakeFromUserToReturn$1,
  stakeFromUserCalls: stakeFromUserCalls$1,
  mock_stakeToReturn: mock_stakeToReturn,
  _stakeCalls: _stakeCalls,
  mock_withdrawToReturn: mock_withdrawToReturn,
  _withdrawCalls: _withdrawCalls,
  mockWithdrawToReturn: mockWithdrawToReturn$1,
  withdrawCalls: withdrawCalls$1,
  mockWithdrawAllToReturn: mockWithdrawAllToReturn$1,
  withdrawAllCalls: withdrawAllCalls$1,
  mockOnlyAdminToReturn: mockOnlyAdminToReturn,
  onlyAdminCalls: onlyAdminCalls,
  mockOnlyValidSyntheticToReturn: mockOnlyValidSyntheticToReturn,
  onlyValidSyntheticCalls: onlyValidSyntheticCalls,
  mockOnlyValidMarketToReturn: mockOnlyValidMarketToReturn,
  onlyValidMarketCalls: onlyValidMarketCalls,
  mockOnlyFloatToReturn: mockOnlyFloatToReturn,
  onlyFloatCalls: onlyFloatCalls
};

var uninitializedValue;

exports.uninitializedValue = uninitializedValue;
exports.mockFLOAT_ISSUANCE_FIXED_DECIMALToReturn = mockFLOAT_ISSUANCE_FIXED_DECIMALToReturn;
exports.fLOAT_ISSUANCE_FIXED_DECIMALCalls = fLOAT_ISSUANCE_FIXED_DECIMALCalls;
exports.mockAdminToReturn = mockAdminToReturn;
exports.adminCalls = adminCalls;
exports.mockBalanceIncentiveCurveEquilibriumOffsetToReturn = mockBalanceIncentiveCurveEquilibriumOffsetToReturn;
exports.balanceIncentiveCurveEquilibriumOffsetCalls = balanceIncentiveCurveEquilibriumOffsetCalls;
exports.mockBalanceIncentiveCurveExponentToReturn = mockBalanceIncentiveCurveExponentToReturn;
exports.balanceIncentiveCurveExponentCalls = balanceIncentiveCurveExponentCalls;
exports.mockFloatCapitalToReturn = mockFloatCapitalToReturn;
exports.floatCapitalCalls = floatCapitalCalls;
exports.mockFloatPercentageToReturn = mockFloatPercentageToReturn;
exports.floatPercentageCalls = floatPercentageCalls;
exports.mockFloatTokenToReturn = mockFloatTokenToReturn;
exports.floatTokenCalls = floatTokenCalls;
exports.mockLatestRewardIndexToReturn = mockLatestRewardIndexToReturn;
exports.latestRewardIndexCalls = latestRewardIndexCalls;
exports.mockLongShortCoreContractToReturn = mockLongShortCoreContractToReturn;
exports.longShortCoreContractCalls = longShortCoreContractCalls;
exports.mockMarketIndexOfTokenToReturn = mockMarketIndexOfTokenToReturn;
exports.marketIndexOfTokenCalls = marketIndexOfTokenCalls;
exports.mockMarketLaunchIncentiveMultipliersToReturn = mockMarketLaunchIncentiveMultipliersToReturn;
exports.marketLaunchIncentiveMultipliersCalls = marketLaunchIncentiveMultipliersCalls;
exports.mockMarketLaunchIncentivePeriodToReturn = mockMarketLaunchIncentivePeriodToReturn;
exports.marketLaunchIncentivePeriodCalls = marketLaunchIncentivePeriodCalls;
exports.mockMarketUnstakeFeeBasisPointsToReturn = mockMarketUnstakeFeeBasisPointsToReturn;
exports.marketUnstakeFeeBasisPointsCalls = marketUnstakeFeeBasisPointsCalls;
exports.mockSyntheticRewardParamsToReturn = mockSyntheticRewardParamsToReturn;
exports.syntheticRewardParamsCalls = syntheticRewardParamsCalls;
exports.mockSyntheticTokensToReturn = mockSyntheticTokensToReturn;
exports.syntheticTokensCalls = syntheticTokensCalls;
exports.mockUserAmountStakedToReturn = mockUserAmountStakedToReturn;
exports.userAmountStakedCalls = userAmountStakedCalls;
exports.mockUserIndexOfLastClaimedRewardToReturn = mockUserIndexOfLastClaimedRewardToReturn;
exports.userIndexOfLastClaimedRewardCalls = userIndexOfLastClaimedRewardCalls;
exports.mockInitializeToReturn = mockInitializeToReturn;
exports.initializeCalls = initializeCalls;
exports.mockChangeAdminToReturn = mockChangeAdminToReturn;
exports.changeAdminCalls = changeAdminCalls;
exports.mockChangeFloatPercentageToReturn = mockChangeFloatPercentageToReturn;
exports.changeFloatPercentageCalls = changeFloatPercentageCalls;
exports.mockChangeUnstakeFeeToReturn = mockChangeUnstakeFeeToReturn;
exports.changeUnstakeFeeCalls = changeUnstakeFeeCalls;
exports.mockChangeMarketLaunchIncentiveParametersToReturn = mockChangeMarketLaunchIncentiveParametersToReturn;
exports.changeMarketLaunchIncentiveParametersCalls = changeMarketLaunchIncentiveParametersCalls;
exports.mockChangBalanceIncentiveExponentToReturn = mockChangBalanceIncentiveExponentToReturn;
exports.changBalanceIncentiveExponentCalls = changBalanceIncentiveExponentCalls;
exports.mockChangBalanceIncentiveEquilibriumOffsetToReturn = mockChangBalanceIncentiveEquilibriumOffsetToReturn;
exports.changBalanceIncentiveEquilibriumOffsetCalls = changBalanceIncentiveEquilibriumOffsetCalls;
exports.mockAddNewStakingFundToReturn = mockAddNewStakingFundToReturn;
exports.addNewStakingFundCalls = addNewStakingFundCalls;
exports.mockAddNewStateForFloatRewardsToReturn = mockAddNewStateForFloatRewardsToReturn;
exports.addNewStateForFloatRewardsCalls = addNewStateForFloatRewardsCalls;
exports.mockClaimFloatCustomToReturn = mockClaimFloatCustomToReturn;
exports.claimFloatCustomCalls = claimFloatCustomCalls;
exports.mockStakeFromUserToReturn = mockStakeFromUserToReturn;
exports.stakeFromUserCalls = stakeFromUserCalls;
exports.mockWithdrawToReturn = mockWithdrawToReturn;
exports.withdrawCalls = withdrawCalls;
exports.mockWithdrawAllToReturn = mockWithdrawAllToReturn;
exports.withdrawAllCalls = withdrawAllCalls;
exports.InternalMock = InternalMock;
/* @eth-optimism/smock Not a pure module */
