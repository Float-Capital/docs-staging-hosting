// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("chai");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Smock = require("@defi-wonderland/smock");

const { expect, use } = require("chai");
use(require('@defi-wonderland/smock').smock.matchers);
;

function make(param) {
  return Smock.smock.fake("Staker");
}

function aDMIN_ROLEOld(_r) {
  var array = _r.ADMIN_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function aDMIN_ROLECallCheck(contract) {
  Chai.expect(contract.aDMIN_ROLE).to.have.been.calledWith();
  
}

function dEFAULT_ADMIN_ROLEOld(_r) {
  var array = _r.DEFAULT_ADMIN_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function dEFAULT_ADMIN_ROLECallCheck(contract) {
  Chai.expect(contract.dEFAULT_ADMIN_ROLE).to.have.been.calledWith();
  
}

function dISCOUNT_ROLEOld(_r) {
  var array = _r.DISCOUNT_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function dISCOUNT_ROLECallCheck(contract) {
  Chai.expect(contract.dISCOUNT_ROLE).to.have.been.calledWith();
  
}

function fLOAT_ISSUANCE_FIXED_DECIMALOld(_r) {
  var array = _r.FLOAT_ISSUANCE_FIXED_DECIMAL.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function fLOAT_ISSUANCE_FIXED_DECIMALCallCheck(contract) {
  Chai.expect(contract.fLOAT_ISSUANCE_FIXED_DECIMAL).to.have.been.calledWith();
  
}

function uPGRADER_ROLEOld(_r) {
  var array = _r.UPGRADER_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function uPGRADER_ROLECallCheck(contract) {
  Chai.expect(contract.uPGRADER_ROLE).to.have.been.calledWith();
  
}

function accumulativeFloatPerSyntheticTokenSnapshotsOld(_r) {
  var array = _r.accumulativeFloatPerSyntheticTokenSnapshots.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function accumulativeFloatPerSyntheticTokenSnapshotsCallCheck(contract, param) {
  Chai.expect(contract.accumulativeFloatPerSyntheticTokenSnapshots).to.have.been.calledWith(param.param0, param.param1);
  
}

function addNewStakingFundOld(_r) {
  var array = _r.addNewStakingFund.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        longToken: param[1],
                        shortToken: param[2],
                        kInitialMultiplier: param[3],
                        kPeriod: param[4],
                        unstakeFee_e18: param[5],
                        balanceIncentiveCurve_exponent: param[6],
                        balanceIncentiveCurve_equilibriumOffset: param[7]
                      };
              }));
}

function addNewStakingFundCallCheck(contract, param) {
  Chai.expect(contract.addNewStakingFund).to.have.been.calledWith(param.marketIndex, param.longToken, param.shortToken, param.kInitialMultiplier, param.kPeriod, param.unstakeFee_e18, param.balanceIncentiveCurve_exponent, param.balanceIncentiveCurve_equilibriumOffset);
  
}

function balanceIncentiveCurve_equilibriumOffsetOld(_r) {
  var array = _r.balanceIncentiveCurve_equilibriumOffset.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function balanceIncentiveCurve_equilibriumOffsetCallCheck(contract, param) {
  Chai.expect(contract.balanceIncentiveCurve_equilibriumOffset).to.have.been.calledWith(param.param0);
  
}

function balanceIncentiveCurve_exponentOld(_r) {
  var array = _r.balanceIncentiveCurve_exponent.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function balanceIncentiveCurve_exponentCallCheck(contract, param) {
  Chai.expect(contract.balanceIncentiveCurve_exponent).to.have.been.calledWith(param.param0);
  
}

function changeBalanceIncentiveParametersOld(_r) {
  var array = _r.changeBalanceIncentiveParameters.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        balanceIncentiveCurve_exponent: param[1],
                        balanceIncentiveCurve_equilibriumOffset: param[2],
                        safeExponentBitShifting: param[3]
                      };
              }));
}

function changeBalanceIncentiveParametersCallCheck(contract, param) {
  Chai.expect(contract.changeBalanceIncentiveParameters).to.have.been.calledWith(param.marketIndex, param.balanceIncentiveCurve_exponent, param.balanceIncentiveCurve_equilibriumOffset, param.safeExponentBitShifting);
  
}

function changeFloatPercentageOld(_r) {
  var array = _r.changeFloatPercentage.calls;
  return Belt_Array.map(array, (function (_m) {
                var newFloatPercentage = _m[0];
                return {
                        newFloatPercentage: newFloatPercentage
                      };
              }));
}

function changeFloatPercentageCallCheck(contract, param) {
  Chai.expect(contract.changeFloatPercentage).to.have.been.calledWith(param.newFloatPercentage);
  
}

function changeUnstakeFeeOld(_r) {
  var array = _r.changeUnstakeFee.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        newMarketUnstakeFee_e18: param[1]
                      };
              }));
}

function changeUnstakeFeeCallCheck(contract, param) {
  Chai.expect(contract.changeUnstakeFee).to.have.been.calledWith(param.marketIndex, param.newMarketUnstakeFee_e18);
  
}

function claimFloatCustomOld(_r) {
  var array = _r.claimFloatCustom.calls;
  return Belt_Array.map(array, (function (_m) {
                var marketIndexes = _m[0];
                return {
                        marketIndexes: marketIndexes
                      };
              }));
}

function claimFloatCustomCallCheck(contract, param) {
  Chai.expect(contract.claimFloatCustom).to.have.been.calledWith(param.marketIndexes);
  
}

function claimFloatCustomForOld(_r) {
  var array = _r.claimFloatCustomFor.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndexes: param[0],
                        user: param[1]
                      };
              }));
}

function claimFloatCustomForCallCheck(contract, param) {
  Chai.expect(contract.claimFloatCustomFor).to.have.been.calledWith(param.marketIndexes, param.user);
  
}

function floatCapitalOld(_r) {
  var array = _r.floatCapital.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function floatCapitalCallCheck(contract) {
  Chai.expect(contract.floatCapital).to.have.been.calledWith();
  
}

function floatPercentageOld(_r) {
  var array = _r.floatPercentage.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function floatPercentageCallCheck(contract) {
  Chai.expect(contract.floatPercentage).to.have.been.calledWith();
  
}

function floatTokenOld(_r) {
  var array = _r.floatToken.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function floatTokenCallCheck(contract) {
  Chai.expect(contract.floatToken).to.have.been.calledWith();
  
}

function floatTreasuryOld(_r) {
  var array = _r.floatTreasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function floatTreasuryCallCheck(contract) {
  Chai.expect(contract.floatTreasury).to.have.been.calledWith();
  
}

function getRoleAdminOld(_r) {
  var array = _r.getRoleAdmin.calls;
  return Belt_Array.map(array, (function (_m) {
                var role = _m[0];
                return {
                        role: role
                      };
              }));
}

function getRoleAdminCallCheck(contract, param) {
  Chai.expect(contract.getRoleAdmin).to.have.been.calledWith(param.role);
  
}

function grantRoleOld(_r) {
  var array = _r.grantRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function grantRoleCallCheck(contract, param) {
  Chai.expect(contract.grantRole).to.have.been.calledWith(param.role, param.account);
  
}

function hasRoleOld(_r) {
  var array = _r.hasRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function hasRoleCallCheck(contract, param) {
  Chai.expect(contract.hasRole).to.have.been.calledWith(param.role, param.account);
  
}

function initializeOld(_r) {
  var array = _r.initialize.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        admin: param[0],
                        longShort: param[1],
                        floatToken: param[2],
                        floatTreasury: param[3],
                        floatCapital: param[4],
                        discountSigner: param[5],
                        floatPercentage: param[6]
                      };
              }));
}

function initializeCallCheck(contract, param) {
  Chai.expect(contract.initialize).to.have.been.calledWith(param.admin, param.longShort, param.floatToken, param.floatTreasury, param.floatCapital, param.discountSigner, param.floatPercentage);
  
}

function latestRewardIndexOld(_r) {
  var array = _r.latestRewardIndex.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function latestRewardIndexCallCheck(contract, param) {
  Chai.expect(contract.latestRewardIndex).to.have.been.calledWith(param.param0);
  
}

function longShortOld(_r) {
  var array = _r.longShort.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function longShortCallCheck(contract) {
  Chai.expect(contract.longShort).to.have.been.calledWith();
  
}

function marketIndexOfTokenOld(_r) {
  var array = _r.marketIndexOfToken.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function marketIndexOfTokenCallCheck(contract, param) {
  Chai.expect(contract.marketIndexOfToken).to.have.been.calledWith(param.param0);
  
}

function marketLaunchIncentive_multipliersOld(_r) {
  var array = _r.marketLaunchIncentive_multipliers.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function marketLaunchIncentive_multipliersCallCheck(contract, param) {
  Chai.expect(contract.marketLaunchIncentive_multipliers).to.have.been.calledWith(param.param0);
  
}

function marketLaunchIncentive_periodOld(_r) {
  var array = _r.marketLaunchIncentive_period.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function marketLaunchIncentive_periodCallCheck(contract, param) {
  Chai.expect(contract.marketLaunchIncentive_period).to.have.been.calledWith(param.param0);
  
}

function marketUnstakeFee_e18Old(_r) {
  var array = (_r.marketUnstakeFee_e18.calls);
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function marketUnstakeFee_e18CallCheck(contract, param) {
  Chai.expect(contract.marketUnstakeFee_e18).to.have.been.calledWith(param.param0);
  
}

function pushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsOld(_r) {
  var array = _r.pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        marketUpdateIndex: param[1],
                        longPrice: param[2],
                        shortPrice: param[3],
                        longValue: param[4],
                        shortValue: param[5]
                      };
              }));
}

function pushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsCallCheck(contract, param) {
  Chai.expect(contract.pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations).to.have.been.calledWith(param.marketIndex, param.marketUpdateIndex, param.longPrice, param.shortPrice, param.longValue, param.shortValue);
  
}

function renounceRoleOld(_r) {
  var array = _r.renounceRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function renounceRoleCallCheck(contract, param) {
  Chai.expect(contract.renounceRole).to.have.been.calledWith(param.role, param.account);
  
}

function revokeRoleOld(_r) {
  var array = _r.revokeRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function revokeRoleCallCheck(contract, param) {
  Chai.expect(contract.revokeRole).to.have.been.calledWith(param.role, param.account);
  
}

function safeExponentBitShiftingOld(_r) {
  var array = _r.safeExponentBitShifting.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function safeExponentBitShiftingCallCheck(contract, param) {
  Chai.expect(contract.safeExponentBitShifting).to.have.been.calledWith(param.param0);
  
}

function shiftTokensOld(_r) {
  var array = _r.shiftTokens.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        amountSyntheticTokensToShift: param[0],
                        marketIndex: param[1],
                        isShiftFromLong: param[2]
                      };
              }));
}

function shiftTokensCallCheck(contract, param) {
  Chai.expect(contract.shiftTokens).to.have.been.calledWith(param.amountSyntheticTokensToShift, param.marketIndex, param.isShiftFromLong);
  
}

function stakeFromUserOld(_r) {
  var array = _r.stakeFromUser.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        from: param[0],
                        amount: param[1]
                      };
              }));
}

function stakeFromUserCallCheck(contract, param) {
  Chai.expect(contract.stakeFromUser).to.have.been.calledWith(param.from, param.amount);
  
}

function supportsInterfaceOld(_r) {
  var array = _r.supportsInterface.calls;
  return Belt_Array.map(array, (function (_m) {
                var interfaceId = _m[0];
                return {
                        interfaceId: interfaceId
                      };
              }));
}

function supportsInterfaceCallCheck(contract, param) {
  Chai.expect(contract.supportsInterface).to.have.been.calledWith(param.interfaceId);
  
}

function syntheticTokensOld(_r) {
  var array = _r.syntheticTokens.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function syntheticTokensCallCheck(contract, param) {
  Chai.expect(contract.syntheticTokens).to.have.been.calledWith(param.param0, param.param1);
  
}

function upgradeToOld(_r) {
  var array = _r.upgradeTo.calls;
  return Belt_Array.map(array, (function (_m) {
                var newImplementation = _m[0];
                return {
                        newImplementation: newImplementation
                      };
              }));
}

function upgradeToCallCheck(contract, param) {
  Chai.expect(contract.upgradeTo).to.have.been.calledWith(param.newImplementation);
  
}

function upgradeToAndCallOld(_r) {
  var array = _r.upgradeToAndCall.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        newImplementation: param[0],
                        data: param[1]
                      };
              }));
}

function upgradeToAndCallCallCheck(contract, param) {
  Chai.expect(contract.upgradeToAndCall).to.have.been.calledWith(param.newImplementation, param.data);
  
}

function userAmountStakedOld(_r) {
  var array = _r.userAmountStaked.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function userAmountStakedCallCheck(contract, param) {
  Chai.expect(contract.userAmountStaked).to.have.been.calledWith(param.param0, param.param1);
  
}

function userIndexOfLastClaimedRewardOld(_r) {
  var array = _r.userIndexOfLastClaimedReward.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function userIndexOfLastClaimedRewardCallCheck(contract, param) {
  Chai.expect(contract.userIndexOfLastClaimedReward).to.have.been.calledWith(param.param0, param.param1);
  
}

function userNextPrice_amountStakedSyntheticToken_toShiftAwayFromOld(_r) {
  var array = _r.userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1],
                        param2: param[2]
                      };
              }));
}

function userNextPrice_amountStakedSyntheticToken_toShiftAwayFromCallCheck(contract, param) {
  Chai.expect(contract.userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom).to.have.been.calledWith(param.param0, param.param1, param.param2);
  
}

function userNextPrice_stakedSyntheticTokenShiftIndexOld(_r) {
  var array = _r.userNextPrice_stakedSyntheticTokenShiftIndex.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function userNextPrice_stakedSyntheticTokenShiftIndexCallCheck(contract, param) {
  Chai.expect(contract.userNextPrice_stakedSyntheticTokenShiftIndex).to.have.been.calledWith(param.param0, param.param1);
  
}

function userNonceOld(_r) {
  var array = _r.userNonce.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function userNonceCallCheck(contract, param) {
  Chai.expect(contract.userNonce).to.have.been.calledWith(param.param0);
  
}

function withdrawOld(_r) {
  var array = _r.withdraw.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        isWithdrawFromLong: param[1],
                        amount: param[2]
                      };
              }));
}

function withdrawCallCheck(contract, param) {
  Chai.expect(contract.withdraw).to.have.been.calledWith(param.marketIndex, param.isWithdrawFromLong, param.amount);
  
}

function withdrawAllOld(_r) {
  var array = _r.withdrawAll.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        isWithdrawFromLong: param[1]
                      };
              }));
}

function withdrawAllCallCheck(contract, param) {
  Chai.expect(contract.withdrawAll).to.have.been.calledWith(param.marketIndex, param.isWithdrawFromLong);
  
}

function withdrawWithVoucherOld(_r) {
  var array = _r.withdrawWithVoucher.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        isWithdrawFromLong: param[1],
                        withdrawAmount: param[2],
                        expiry: param[3],
                        nonce: param[4],
                        discountWithdrawFee: param[5],
                        v: param[6],
                        r: param[7],
                        s: param[8]
                      };
              }));
}

function withdrawWithVoucherCallCheck(contract, param) {
  Chai.expect(contract.withdrawWithVoucher).to.have.been.calledWith(param.marketIndex, param.isWithdrawFromLong, param.withdrawAmount, param.expiry, param.nonce, param.discountWithdrawFee, param.v, param.r, param.s);
  
}

var mockContractName = "StakerForInternalMocking";

var internalRef = {
  contents: undefined
};

var functionToNotMock = {
  contents: ""
};

function setup(contract) {
  return Smock.smock.fake(mockContractName).then(function (b) {
              internalRef.contents = b;
              return contract.setMocker(b.address);
            });
}

function setFunctionForUnitTesting(contract, functionName) {
  functionToNotMock.contents = functionName;
  return contract.setFunctionToNotMock(functionName);
}

function setupFunctionForUnitTesting(contract, functionName) {
  return Smock.smock.fake(mockContractName).then(function (b) {
              internalRef.contents = b;
              return Promise.all([
                          contract.setMocker(b.address),
                          contract.setFunctionToNotMock(functionName)
                        ]);
            });
}

var MockingAFunctionThatYouShouldntBe = /* @__PURE__ */Caml_exceptions.create("StakerSmocked.InternalMock.MockingAFunctionThatYouShouldntBe");

var HaventSetupInternalMockingForStaker = /* @__PURE__ */Caml_exceptions.create("StakerSmocked.InternalMock.HaventSetupInternalMockingForStaker");

function checkForExceptions(functionName) {
  if (functionToNotMock.contents === functionName) {
    throw {
          RE_EXN_ID: MockingAFunctionThatYouShouldntBe,
          Error: new Error()
        };
  }
  if (internalRef.contents !== undefined) {
    return ;
  }
  throw {
        RE_EXN_ID: HaventSetupInternalMockingForStaker,
        Error: new Error()
      };
}

function onlyAdminModifierLogicFunction(param) {
  checkForExceptions("onlyAdminModifierLogic");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract.onlyAdminModifierLogicMock;
              }));
}

function onlyAdminModifierLogicCallCheck(param) {
  Chai.expect(onlyAdminModifierLogicFunction(undefined)).to.have.been.calledWith();
  
}

function mockOnlyAdminModifierLogicToRevert(errorString) {
  checkForExceptions("onlyAdminModifierLogic");
  Belt_Option.map(internalRef.contents, (function (param) {
          param.onlyAdminModifierLogicMock.reverts(errorString);
          
        }));
  
}

function mockOnlyAdminModifierLogicToRevertNoReason(param) {
  checkForExceptions("onlyAdminModifierLogic");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim.onlyAdminModifierLogicMock.reverts();
          
        }));
  
}

function onlyValidSyntheticModifierLogicFunction(param) {
  checkForExceptions("onlyValidSyntheticModifierLogic");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract.onlyValidSyntheticModifierLogicMock;
              }));
}

function onlyValidSyntheticModifierLogicCallCheck(param) {
  Chai.expect(onlyValidSyntheticModifierLogicFunction(undefined)).to.have.been.calledWith(param.synth);
  
}

function mockOnlyValidSyntheticModifierLogicToRevert(errorString) {
  checkForExceptions("onlyValidSyntheticModifierLogic");
  Belt_Option.map(internalRef.contents, (function (param) {
          param.onlyValidSyntheticModifierLogicMock.reverts(errorString);
          
        }));
  
}

function mockOnlyValidSyntheticModifierLogicToRevertNoReason(param) {
  checkForExceptions("onlyValidSyntheticModifierLogic");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim.onlyValidSyntheticModifierLogicMock.reverts();
          
        }));
  
}

function onlyLongShortModifierLogicFunction(param) {
  checkForExceptions("onlyLongShortModifierLogic");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract.onlyLongShortModifierLogicMock;
              }));
}

function onlyLongShortModifierLogicCallCheck(param) {
  Chai.expect(onlyLongShortModifierLogicFunction(undefined)).to.have.been.calledWith();
  
}

function mockOnlyLongShortModifierLogicToRevert(errorString) {
  checkForExceptions("onlyLongShortModifierLogic");
  Belt_Option.map(internalRef.contents, (function (param) {
          param.onlyLongShortModifierLogicMock.reverts(errorString);
          
        }));
  
}

function mockOnlyLongShortModifierLogicToRevertNoReason(param) {
  checkForExceptions("onlyLongShortModifierLogic");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim.onlyLongShortModifierLogicMock.reverts();
          
        }));
  
}

function _updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsFunction(param) {
  checkForExceptions("_updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShifts");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsMock;
              }));
}

function _updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsCallCheck(param) {
  Chai.expect(_updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.user);
  
}

function mock_updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsToRevert(errorString) {
  checkForExceptions("_updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShifts");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsMock.reverts(errorString);
          
        }));
  
}

function mock_updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsToRevertNoReason(param) {
  checkForExceptions("_updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShifts");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsMock.reverts();
          
        }));
  
}

function initializeFunction(param) {
  checkForExceptions("initialize");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract.initializeMock;
              }));
}

function initializeCallCheck$1(param) {
  Chai.expect(initializeFunction(undefined)).to.have.been.calledWith(param.admin, param.longShort, param.floatToken, param.floatTreasury, param.floatCapital, param.discountSigner, param.floatPercentage);
  
}

function mockInitializeToRevert(errorString) {
  checkForExceptions("initialize");
  Belt_Option.map(internalRef.contents, (function (param) {
          param.initializeMock.reverts(errorString);
          
        }));
  
}

function mockInitializeToRevertNoReason(param) {
  checkForExceptions("initialize");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim.initializeMock.reverts();
          
        }));
  
}

function _changeFloatPercentageFunction(param) {
  checkForExceptions("_changeFloatPercentage");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._changeFloatPercentageMock;
              }));
}

function _changeFloatPercentageCallCheck(param) {
  Chai.expect(_changeFloatPercentageFunction(undefined)).to.have.been.calledWith(param.newFloatPercentage);
  
}

function mock_changeFloatPercentageToRevert(errorString) {
  checkForExceptions("_changeFloatPercentage");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._changeFloatPercentageMock.reverts(errorString);
          
        }));
  
}

function mock_changeFloatPercentageToRevertNoReason(param) {
  checkForExceptions("_changeFloatPercentage");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._changeFloatPercentageMock.reverts();
          
        }));
  
}

function _changeUnstakeFeeFunction(param) {
  checkForExceptions("_changeUnstakeFee");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._changeUnstakeFeeMock;
              }));
}

function _changeUnstakeFeeCallCheck(param) {
  Chai.expect(_changeUnstakeFeeFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.newMarketUnstakeFee_e18);
  
}

function mock_changeUnstakeFeeToRevert(errorString) {
  checkForExceptions("_changeUnstakeFee");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._changeUnstakeFeeMock.reverts(errorString);
          
        }));
  
}

function mock_changeUnstakeFeeToRevertNoReason(param) {
  checkForExceptions("_changeUnstakeFee");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._changeUnstakeFeeMock.reverts();
          
        }));
  
}

function _changeBalanceIncentiveParametersFunction(param) {
  checkForExceptions("_changeBalanceIncentiveParameters");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._changeBalanceIncentiveParametersMock;
              }));
}

function _changeBalanceIncentiveParametersCallCheck(param) {
  Chai.expect(_changeBalanceIncentiveParametersFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.balanceIncentiveCurve_exponent, param.balanceIncentiveCurve_equilibriumOffset, param.safeExponentBitShifting);
  
}

function mock_changeBalanceIncentiveParametersToRevert(errorString) {
  checkForExceptions("_changeBalanceIncentiveParameters");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._changeBalanceIncentiveParametersMock.reverts(errorString);
          
        }));
  
}

function mock_changeBalanceIncentiveParametersToRevertNoReason(param) {
  checkForExceptions("_changeBalanceIncentiveParameters");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._changeBalanceIncentiveParametersMock.reverts();
          
        }));
  
}

function mock_getMarketLaunchIncentiveParametersToReturn(_param0, _param1) {
  checkForExceptions("_getMarketLaunchIncentiveParameters");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._getMarketLaunchIncentiveParametersMock.returns([
                _param0,
                _param1
              ]);
          
        }));
  
}

function _getMarketLaunchIncentiveParametersFunction(param) {
  checkForExceptions("_getMarketLaunchIncentiveParameters");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._getMarketLaunchIncentiveParametersMock;
              }));
}

function _getMarketLaunchIncentiveParametersCallCheck(param) {
  Chai.expect(_getMarketLaunchIncentiveParametersFunction(undefined)).to.have.been.calledWith(param.marketIndex);
  
}

function mock_getMarketLaunchIncentiveParametersToRevert(errorString) {
  checkForExceptions("_getMarketLaunchIncentiveParameters");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._getMarketLaunchIncentiveParametersMock.reverts(errorString);
          
        }));
  
}

function mock_getMarketLaunchIncentiveParametersToRevertNoReason(param) {
  checkForExceptions("_getMarketLaunchIncentiveParameters");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._getMarketLaunchIncentiveParametersMock.reverts();
          
        }));
  
}

function mock_getKValueToReturn(_param0) {
  checkForExceptions("_getKValue");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._getKValueMock.returns(_param0);
          
        }));
  
}

function _getKValueFunction(param) {
  checkForExceptions("_getKValue");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._getKValueMock;
              }));
}

function _getKValueCallCheck(param) {
  Chai.expect(_getKValueFunction(undefined)).to.have.been.calledWith(param.marketIndex);
  
}

function mock_getKValueToRevert(errorString) {
  checkForExceptions("_getKValue");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._getKValueMock.reverts(errorString);
          
        }));
  
}

function mock_getKValueToRevertNoReason(param) {
  checkForExceptions("_getKValue");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._getKValueMock.reverts();
          
        }));
  
}

function mock_calculateFloatPerSecondToReturn(_param0, _param1) {
  checkForExceptions("_calculateFloatPerSecond");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._calculateFloatPerSecondMock.returns([
                _param0,
                _param1
              ]);
          
        }));
  
}

function _calculateFloatPerSecondFunction(param) {
  checkForExceptions("_calculateFloatPerSecond");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._calculateFloatPerSecondMock;
              }));
}

function _calculateFloatPerSecondCallCheck(param) {
  Chai.expect(_calculateFloatPerSecondFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.longPrice, param.shortPrice, param.longValue, param.shortValue);
  
}

function mock_calculateFloatPerSecondToRevert(errorString) {
  checkForExceptions("_calculateFloatPerSecond");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._calculateFloatPerSecondMock.reverts(errorString);
          
        }));
  
}

function mock_calculateFloatPerSecondToRevertNoReason(param) {
  checkForExceptions("_calculateFloatPerSecond");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._calculateFloatPerSecondMock.reverts();
          
        }));
  
}

function mock_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotToReturn(_param0) {
  checkForExceptions("_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshot");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotMock.returns(_param0);
          
        }));
  
}

function _calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotFunction(param) {
  checkForExceptions("_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshot");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotMock;
              }));
}

function _calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotCallCheck(param) {
  Chai.expect(_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.previousMarketUpdateIndex);
  
}

function mock_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotToRevert(errorString) {
  checkForExceptions("_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshot");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotMock.reverts(errorString);
          
        }));
  
}

function mock_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotToRevertNoReason(param) {
  checkForExceptions("_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshot");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotMock.reverts();
          
        }));
  
}

function mock_calculateNewCumulativeIssuancePerStakedSynthToReturn(_param0, _param1) {
  checkForExceptions("_calculateNewCumulativeIssuancePerStakedSynth");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._calculateNewCumulativeIssuancePerStakedSynthMock.returns([
                _param0,
                _param1
              ]);
          
        }));
  
}

function _calculateNewCumulativeIssuancePerStakedSynthFunction(param) {
  checkForExceptions("_calculateNewCumulativeIssuancePerStakedSynth");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._calculateNewCumulativeIssuancePerStakedSynthMock;
              }));
}

function _calculateNewCumulativeIssuancePerStakedSynthCallCheck(param) {
  Chai.expect(_calculateNewCumulativeIssuancePerStakedSynthFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.previousMarketUpdateIndex, param.longPrice, param.shortPrice, param.longValue, param.shortValue);
  
}

function mock_calculateNewCumulativeIssuancePerStakedSynthToRevert(errorString) {
  checkForExceptions("_calculateNewCumulativeIssuancePerStakedSynth");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._calculateNewCumulativeIssuancePerStakedSynthMock.reverts(errorString);
          
        }));
  
}

function mock_calculateNewCumulativeIssuancePerStakedSynthToRevertNoReason(param) {
  checkForExceptions("_calculateNewCumulativeIssuancePerStakedSynth");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._calculateNewCumulativeIssuancePerStakedSynthMock.reverts();
          
        }));
  
}

function mock_calculateAccumulatedFloatInRangeToReturn(_param0) {
  checkForExceptions("_calculateAccumulatedFloatInRange");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._calculateAccumulatedFloatInRangeMock.returns(_param0);
          
        }));
  
}

function _calculateAccumulatedFloatInRangeFunction(param) {
  checkForExceptions("_calculateAccumulatedFloatInRange");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._calculateAccumulatedFloatInRangeMock;
              }));
}

function _calculateAccumulatedFloatInRangeCallCheck(param) {
  Chai.expect(_calculateAccumulatedFloatInRangeFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.amountStakedLong, param.amountStakedShort, param.rewardIndexFrom, param.rewardIndexTo);
  
}

function mock_calculateAccumulatedFloatInRangeToRevert(errorString) {
  checkForExceptions("_calculateAccumulatedFloatInRange");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._calculateAccumulatedFloatInRangeMock.reverts(errorString);
          
        }));
  
}

function mock_calculateAccumulatedFloatInRangeToRevertNoReason(param) {
  checkForExceptions("_calculateAccumulatedFloatInRange");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._calculateAccumulatedFloatInRangeMock.reverts();
          
        }));
  
}

function mock_calculateAccumulatedFloatAndExecuteOutstandingShiftsToReturn(_param0) {
  checkForExceptions("_calculateAccumulatedFloatAndExecuteOutstandingShifts");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._calculateAccumulatedFloatAndExecuteOutstandingShiftsMock.returns(_param0);
          
        }));
  
}

function _calculateAccumulatedFloatAndExecuteOutstandingShiftsFunction(param) {
  checkForExceptions("_calculateAccumulatedFloatAndExecuteOutstandingShifts");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._calculateAccumulatedFloatAndExecuteOutstandingShiftsMock;
              }));
}

function _calculateAccumulatedFloatAndExecuteOutstandingShiftsCallCheck(param) {
  Chai.expect(_calculateAccumulatedFloatAndExecuteOutstandingShiftsFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.user);
  
}

function mock_calculateAccumulatedFloatAndExecuteOutstandingShiftsToRevert(errorString) {
  checkForExceptions("_calculateAccumulatedFloatAndExecuteOutstandingShifts");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._calculateAccumulatedFloatAndExecuteOutstandingShiftsMock.reverts(errorString);
          
        }));
  
}

function mock_calculateAccumulatedFloatAndExecuteOutstandingShiftsToRevertNoReason(param) {
  checkForExceptions("_calculateAccumulatedFloatAndExecuteOutstandingShifts");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._calculateAccumulatedFloatAndExecuteOutstandingShiftsMock.reverts();
          
        }));
  
}

function _mintFloatFunction(param) {
  checkForExceptions("_mintFloat");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._mintFloatMock;
              }));
}

function _mintFloatCallCheck(param) {
  Chai.expect(_mintFloatFunction(undefined)).to.have.been.calledWith(param.user, param.floatToMint);
  
}

function mock_mintFloatToRevert(errorString) {
  checkForExceptions("_mintFloat");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._mintFloatMock.reverts(errorString);
          
        }));
  
}

function mock_mintFloatToRevertNoReason(param) {
  checkForExceptions("_mintFloat");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._mintFloatMock.reverts();
          
        }));
  
}

function _mintAccumulatedFloatAndExecuteOutstandingShiftsFunction(param) {
  checkForExceptions("_mintAccumulatedFloatAndExecuteOutstandingShifts");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._mintAccumulatedFloatAndExecuteOutstandingShiftsMock;
              }));
}

function _mintAccumulatedFloatAndExecuteOutstandingShiftsCallCheck(param) {
  Chai.expect(_mintAccumulatedFloatAndExecuteOutstandingShiftsFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.user);
  
}

function mock_mintAccumulatedFloatAndExecuteOutstandingShiftsToRevert(errorString) {
  checkForExceptions("_mintAccumulatedFloatAndExecuteOutstandingShifts");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._mintAccumulatedFloatAndExecuteOutstandingShiftsMock.reverts(errorString);
          
        }));
  
}

function mock_mintAccumulatedFloatAndExecuteOutstandingShiftsToRevertNoReason(param) {
  checkForExceptions("_mintAccumulatedFloatAndExecuteOutstandingShifts");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._mintAccumulatedFloatAndExecuteOutstandingShiftsMock.reverts();
          
        }));
  
}

function _mintAccumulatedFloatAndExecuteOutstandingShiftsMultiFunction(param) {
  checkForExceptions("_mintAccumulatedFloatAndExecuteOutstandingShiftsMulti");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._mintAccumulatedFloatAndExecuteOutstandingShiftsMultiMock;
              }));
}

function _mintAccumulatedFloatAndExecuteOutstandingShiftsMultiCallCheck(param) {
  Chai.expect(_mintAccumulatedFloatAndExecuteOutstandingShiftsMultiFunction(undefined)).to.have.been.calledWith(param.marketIndexes, param.user);
  
}

function mock_mintAccumulatedFloatAndExecuteOutstandingShiftsMultiToRevert(errorString) {
  checkForExceptions("_mintAccumulatedFloatAndExecuteOutstandingShiftsMulti");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._mintAccumulatedFloatAndExecuteOutstandingShiftsMultiMock.reverts(errorString);
          
        }));
  
}

function mock_mintAccumulatedFloatAndExecuteOutstandingShiftsMultiToRevertNoReason(param) {
  checkForExceptions("_mintAccumulatedFloatAndExecuteOutstandingShiftsMulti");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._mintAccumulatedFloatAndExecuteOutstandingShiftsMultiMock.reverts();
          
        }));
  
}

function stakeFromUserFunction(param) {
  checkForExceptions("stakeFromUser");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract.stakeFromUserMock;
              }));
}

function stakeFromUserCallCheck$1(param) {
  Chai.expect(stakeFromUserFunction(undefined)).to.have.been.calledWith(param.from, param.amount);
  
}

function mockStakeFromUserToRevert(errorString) {
  checkForExceptions("stakeFromUser");
  Belt_Option.map(internalRef.contents, (function (param) {
          param.stakeFromUserMock.reverts(errorString);
          
        }));
  
}

function mockStakeFromUserToRevertNoReason(param) {
  checkForExceptions("stakeFromUser");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim.stakeFromUserMock.reverts();
          
        }));
  
}

function shiftTokensFunction(param) {
  checkForExceptions("shiftTokens");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract.shiftTokensMock;
              }));
}

function shiftTokensCallCheck$1(param) {
  Chai.expect(shiftTokensFunction(undefined)).to.have.been.calledWith(param.amountSyntheticTokensToShift, param.marketIndex, param.isShiftFromLong);
  
}

function mockShiftTokensToRevert(errorString) {
  checkForExceptions("shiftTokens");
  Belt_Option.map(internalRef.contents, (function (param) {
          param.shiftTokensMock.reverts(errorString);
          
        }));
  
}

function mockShiftTokensToRevertNoReason(param) {
  checkForExceptions("shiftTokens");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim.shiftTokensMock.reverts();
          
        }));
  
}

function _withdrawFunction(param) {
  checkForExceptions("_withdraw");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._withdrawMock;
              }));
}

function _withdrawCallCheck(param) {
  Chai.expect(_withdrawFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.token, param.amount);
  
}

function mock_withdrawToRevert(errorString) {
  checkForExceptions("_withdraw");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._withdrawMock.reverts(errorString);
          
        }));
  
}

function mock_withdrawToRevertNoReason(param) {
  checkForExceptions("_withdraw");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._withdrawMock.reverts();
          
        }));
  
}

var InternalMock = {
  mockContractName: mockContractName,
  internalRef: internalRef,
  functionToNotMock: functionToNotMock,
  setup: setup,
  setFunctionForUnitTesting: setFunctionForUnitTesting,
  setupFunctionForUnitTesting: setupFunctionForUnitTesting,
  MockingAFunctionThatYouShouldntBe: MockingAFunctionThatYouShouldntBe,
  HaventSetupInternalMockingForStaker: HaventSetupInternalMockingForStaker,
  checkForExceptions: checkForExceptions,
  onlyAdminModifierLogicFunction: onlyAdminModifierLogicFunction,
  onlyAdminModifierLogicCallCheck: onlyAdminModifierLogicCallCheck,
  mockOnlyAdminModifierLogicToRevert: mockOnlyAdminModifierLogicToRevert,
  mockOnlyAdminModifierLogicToRevertNoReason: mockOnlyAdminModifierLogicToRevertNoReason,
  onlyValidSyntheticModifierLogicFunction: onlyValidSyntheticModifierLogicFunction,
  onlyValidSyntheticModifierLogicCallCheck: onlyValidSyntheticModifierLogicCallCheck,
  mockOnlyValidSyntheticModifierLogicToRevert: mockOnlyValidSyntheticModifierLogicToRevert,
  mockOnlyValidSyntheticModifierLogicToRevertNoReason: mockOnlyValidSyntheticModifierLogicToRevertNoReason,
  onlyLongShortModifierLogicFunction: onlyLongShortModifierLogicFunction,
  onlyLongShortModifierLogicCallCheck: onlyLongShortModifierLogicCallCheck,
  mockOnlyLongShortModifierLogicToRevert: mockOnlyLongShortModifierLogicToRevert,
  mockOnlyLongShortModifierLogicToRevertNoReason: mockOnlyLongShortModifierLogicToRevertNoReason,
  _updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsFunction: _updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsFunction,
  _updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsCallCheck: _updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsCallCheck,
  mock_updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsToRevert: mock_updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsToRevert,
  mock_updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsToRevertNoReason: mock_updateUsersStakedPosition_mintAccumulatedFloatAndExecuteOutstandingShiftsToRevertNoReason,
  initializeFunction: initializeFunction,
  initializeCallCheck: initializeCallCheck$1,
  mockInitializeToRevert: mockInitializeToRevert,
  mockInitializeToRevertNoReason: mockInitializeToRevertNoReason,
  _changeFloatPercentageFunction: _changeFloatPercentageFunction,
  _changeFloatPercentageCallCheck: _changeFloatPercentageCallCheck,
  mock_changeFloatPercentageToRevert: mock_changeFloatPercentageToRevert,
  mock_changeFloatPercentageToRevertNoReason: mock_changeFloatPercentageToRevertNoReason,
  _changeUnstakeFeeFunction: _changeUnstakeFeeFunction,
  _changeUnstakeFeeCallCheck: _changeUnstakeFeeCallCheck,
  mock_changeUnstakeFeeToRevert: mock_changeUnstakeFeeToRevert,
  mock_changeUnstakeFeeToRevertNoReason: mock_changeUnstakeFeeToRevertNoReason,
  _changeBalanceIncentiveParametersFunction: _changeBalanceIncentiveParametersFunction,
  _changeBalanceIncentiveParametersCallCheck: _changeBalanceIncentiveParametersCallCheck,
  mock_changeBalanceIncentiveParametersToRevert: mock_changeBalanceIncentiveParametersToRevert,
  mock_changeBalanceIncentiveParametersToRevertNoReason: mock_changeBalanceIncentiveParametersToRevertNoReason,
  mock_getMarketLaunchIncentiveParametersToReturn: mock_getMarketLaunchIncentiveParametersToReturn,
  _getMarketLaunchIncentiveParametersFunction: _getMarketLaunchIncentiveParametersFunction,
  _getMarketLaunchIncentiveParametersCallCheck: _getMarketLaunchIncentiveParametersCallCheck,
  mock_getMarketLaunchIncentiveParametersToRevert: mock_getMarketLaunchIncentiveParametersToRevert,
  mock_getMarketLaunchIncentiveParametersToRevertNoReason: mock_getMarketLaunchIncentiveParametersToRevertNoReason,
  mock_getKValueToReturn: mock_getKValueToReturn,
  _getKValueFunction: _getKValueFunction,
  _getKValueCallCheck: _getKValueCallCheck,
  mock_getKValueToRevert: mock_getKValueToRevert,
  mock_getKValueToRevertNoReason: mock_getKValueToRevertNoReason,
  mock_calculateFloatPerSecondToReturn: mock_calculateFloatPerSecondToReturn,
  _calculateFloatPerSecondFunction: _calculateFloatPerSecondFunction,
  _calculateFloatPerSecondCallCheck: _calculateFloatPerSecondCallCheck,
  mock_calculateFloatPerSecondToRevert: mock_calculateFloatPerSecondToRevert,
  mock_calculateFloatPerSecondToRevertNoReason: mock_calculateFloatPerSecondToRevertNoReason,
  mock_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotToReturn: mock_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotToReturn,
  _calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotFunction: _calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotFunction,
  _calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotCallCheck: _calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotCallCheck,
  mock_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotToRevert: mock_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotToRevert,
  mock_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotToRevertNoReason: mock_calculateTimeDeltaFromLastAccumulativeIssuancePerStakedSynthSnapshotToRevertNoReason,
  mock_calculateNewCumulativeIssuancePerStakedSynthToReturn: mock_calculateNewCumulativeIssuancePerStakedSynthToReturn,
  _calculateNewCumulativeIssuancePerStakedSynthFunction: _calculateNewCumulativeIssuancePerStakedSynthFunction,
  _calculateNewCumulativeIssuancePerStakedSynthCallCheck: _calculateNewCumulativeIssuancePerStakedSynthCallCheck,
  mock_calculateNewCumulativeIssuancePerStakedSynthToRevert: mock_calculateNewCumulativeIssuancePerStakedSynthToRevert,
  mock_calculateNewCumulativeIssuancePerStakedSynthToRevertNoReason: mock_calculateNewCumulativeIssuancePerStakedSynthToRevertNoReason,
  mock_calculateAccumulatedFloatInRangeToReturn: mock_calculateAccumulatedFloatInRangeToReturn,
  _calculateAccumulatedFloatInRangeFunction: _calculateAccumulatedFloatInRangeFunction,
  _calculateAccumulatedFloatInRangeCallCheck: _calculateAccumulatedFloatInRangeCallCheck,
  mock_calculateAccumulatedFloatInRangeToRevert: mock_calculateAccumulatedFloatInRangeToRevert,
  mock_calculateAccumulatedFloatInRangeToRevertNoReason: mock_calculateAccumulatedFloatInRangeToRevertNoReason,
  mock_calculateAccumulatedFloatAndExecuteOutstandingShiftsToReturn: mock_calculateAccumulatedFloatAndExecuteOutstandingShiftsToReturn,
  _calculateAccumulatedFloatAndExecuteOutstandingShiftsFunction: _calculateAccumulatedFloatAndExecuteOutstandingShiftsFunction,
  _calculateAccumulatedFloatAndExecuteOutstandingShiftsCallCheck: _calculateAccumulatedFloatAndExecuteOutstandingShiftsCallCheck,
  mock_calculateAccumulatedFloatAndExecuteOutstandingShiftsToRevert: mock_calculateAccumulatedFloatAndExecuteOutstandingShiftsToRevert,
  mock_calculateAccumulatedFloatAndExecuteOutstandingShiftsToRevertNoReason: mock_calculateAccumulatedFloatAndExecuteOutstandingShiftsToRevertNoReason,
  _mintFloatFunction: _mintFloatFunction,
  _mintFloatCallCheck: _mintFloatCallCheck,
  mock_mintFloatToRevert: mock_mintFloatToRevert,
  mock_mintFloatToRevertNoReason: mock_mintFloatToRevertNoReason,
  _mintAccumulatedFloatAndExecuteOutstandingShiftsFunction: _mintAccumulatedFloatAndExecuteOutstandingShiftsFunction,
  _mintAccumulatedFloatAndExecuteOutstandingShiftsCallCheck: _mintAccumulatedFloatAndExecuteOutstandingShiftsCallCheck,
  mock_mintAccumulatedFloatAndExecuteOutstandingShiftsToRevert: mock_mintAccumulatedFloatAndExecuteOutstandingShiftsToRevert,
  mock_mintAccumulatedFloatAndExecuteOutstandingShiftsToRevertNoReason: mock_mintAccumulatedFloatAndExecuteOutstandingShiftsToRevertNoReason,
  _mintAccumulatedFloatAndExecuteOutstandingShiftsMultiFunction: _mintAccumulatedFloatAndExecuteOutstandingShiftsMultiFunction,
  _mintAccumulatedFloatAndExecuteOutstandingShiftsMultiCallCheck: _mintAccumulatedFloatAndExecuteOutstandingShiftsMultiCallCheck,
  mock_mintAccumulatedFloatAndExecuteOutstandingShiftsMultiToRevert: mock_mintAccumulatedFloatAndExecuteOutstandingShiftsMultiToRevert,
  mock_mintAccumulatedFloatAndExecuteOutstandingShiftsMultiToRevertNoReason: mock_mintAccumulatedFloatAndExecuteOutstandingShiftsMultiToRevertNoReason,
  stakeFromUserFunction: stakeFromUserFunction,
  stakeFromUserCallCheck: stakeFromUserCallCheck$1,
  mockStakeFromUserToRevert: mockStakeFromUserToRevert,
  mockStakeFromUserToRevertNoReason: mockStakeFromUserToRevertNoReason,
  shiftTokensFunction: shiftTokensFunction,
  shiftTokensCallCheck: shiftTokensCallCheck$1,
  mockShiftTokensToRevert: mockShiftTokensToRevert,
  mockShiftTokensToRevertNoReason: mockShiftTokensToRevertNoReason,
  _withdrawFunction: _withdrawFunction,
  _withdrawCallCheck: _withdrawCallCheck,
  mock_withdrawToRevert: mock_withdrawToRevert,
  mock_withdrawToRevertNoReason: mock_withdrawToRevertNoReason
};

var uninitializedValue;

exports.make = make;
exports.uninitializedValue = uninitializedValue;
exports.aDMIN_ROLEOld = aDMIN_ROLEOld;
exports.aDMIN_ROLECallCheck = aDMIN_ROLECallCheck;
exports.dEFAULT_ADMIN_ROLEOld = dEFAULT_ADMIN_ROLEOld;
exports.dEFAULT_ADMIN_ROLECallCheck = dEFAULT_ADMIN_ROLECallCheck;
exports.dISCOUNT_ROLEOld = dISCOUNT_ROLEOld;
exports.dISCOUNT_ROLECallCheck = dISCOUNT_ROLECallCheck;
exports.fLOAT_ISSUANCE_FIXED_DECIMALOld = fLOAT_ISSUANCE_FIXED_DECIMALOld;
exports.fLOAT_ISSUANCE_FIXED_DECIMALCallCheck = fLOAT_ISSUANCE_FIXED_DECIMALCallCheck;
exports.uPGRADER_ROLEOld = uPGRADER_ROLEOld;
exports.uPGRADER_ROLECallCheck = uPGRADER_ROLECallCheck;
exports.accumulativeFloatPerSyntheticTokenSnapshotsOld = accumulativeFloatPerSyntheticTokenSnapshotsOld;
exports.accumulativeFloatPerSyntheticTokenSnapshotsCallCheck = accumulativeFloatPerSyntheticTokenSnapshotsCallCheck;
exports.addNewStakingFundOld = addNewStakingFundOld;
exports.addNewStakingFundCallCheck = addNewStakingFundCallCheck;
exports.balanceIncentiveCurve_equilibriumOffsetOld = balanceIncentiveCurve_equilibriumOffsetOld;
exports.balanceIncentiveCurve_equilibriumOffsetCallCheck = balanceIncentiveCurve_equilibriumOffsetCallCheck;
exports.balanceIncentiveCurve_exponentOld = balanceIncentiveCurve_exponentOld;
exports.balanceIncentiveCurve_exponentCallCheck = balanceIncentiveCurve_exponentCallCheck;
exports.changeBalanceIncentiveParametersOld = changeBalanceIncentiveParametersOld;
exports.changeBalanceIncentiveParametersCallCheck = changeBalanceIncentiveParametersCallCheck;
exports.changeFloatPercentageOld = changeFloatPercentageOld;
exports.changeFloatPercentageCallCheck = changeFloatPercentageCallCheck;
exports.changeUnstakeFeeOld = changeUnstakeFeeOld;
exports.changeUnstakeFeeCallCheck = changeUnstakeFeeCallCheck;
exports.claimFloatCustomOld = claimFloatCustomOld;
exports.claimFloatCustomCallCheck = claimFloatCustomCallCheck;
exports.claimFloatCustomForOld = claimFloatCustomForOld;
exports.claimFloatCustomForCallCheck = claimFloatCustomForCallCheck;
exports.floatCapitalOld = floatCapitalOld;
exports.floatCapitalCallCheck = floatCapitalCallCheck;
exports.floatPercentageOld = floatPercentageOld;
exports.floatPercentageCallCheck = floatPercentageCallCheck;
exports.floatTokenOld = floatTokenOld;
exports.floatTokenCallCheck = floatTokenCallCheck;
exports.floatTreasuryOld = floatTreasuryOld;
exports.floatTreasuryCallCheck = floatTreasuryCallCheck;
exports.getRoleAdminOld = getRoleAdminOld;
exports.getRoleAdminCallCheck = getRoleAdminCallCheck;
exports.grantRoleOld = grantRoleOld;
exports.grantRoleCallCheck = grantRoleCallCheck;
exports.hasRoleOld = hasRoleOld;
exports.hasRoleCallCheck = hasRoleCallCheck;
exports.initializeOld = initializeOld;
exports.initializeCallCheck = initializeCallCheck;
exports.latestRewardIndexOld = latestRewardIndexOld;
exports.latestRewardIndexCallCheck = latestRewardIndexCallCheck;
exports.longShortOld = longShortOld;
exports.longShortCallCheck = longShortCallCheck;
exports.marketIndexOfTokenOld = marketIndexOfTokenOld;
exports.marketIndexOfTokenCallCheck = marketIndexOfTokenCallCheck;
exports.marketLaunchIncentive_multipliersOld = marketLaunchIncentive_multipliersOld;
exports.marketLaunchIncentive_multipliersCallCheck = marketLaunchIncentive_multipliersCallCheck;
exports.marketLaunchIncentive_periodOld = marketLaunchIncentive_periodOld;
exports.marketLaunchIncentive_periodCallCheck = marketLaunchIncentive_periodCallCheck;
exports.marketUnstakeFee_e18Old = marketUnstakeFee_e18Old;
exports.marketUnstakeFee_e18CallCheck = marketUnstakeFee_e18CallCheck;
exports.pushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsOld = pushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsOld;
exports.pushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsCallCheck = pushUpdatedMarketPricesToUpdateFloatIssuanceCalculationsCallCheck;
exports.renounceRoleOld = renounceRoleOld;
exports.renounceRoleCallCheck = renounceRoleCallCheck;
exports.revokeRoleOld = revokeRoleOld;
exports.revokeRoleCallCheck = revokeRoleCallCheck;
exports.safeExponentBitShiftingOld = safeExponentBitShiftingOld;
exports.safeExponentBitShiftingCallCheck = safeExponentBitShiftingCallCheck;
exports.shiftTokensOld = shiftTokensOld;
exports.shiftTokensCallCheck = shiftTokensCallCheck;
exports.stakeFromUserOld = stakeFromUserOld;
exports.stakeFromUserCallCheck = stakeFromUserCallCheck;
exports.supportsInterfaceOld = supportsInterfaceOld;
exports.supportsInterfaceCallCheck = supportsInterfaceCallCheck;
exports.syntheticTokensOld = syntheticTokensOld;
exports.syntheticTokensCallCheck = syntheticTokensCallCheck;
exports.upgradeToOld = upgradeToOld;
exports.upgradeToCallCheck = upgradeToCallCheck;
exports.upgradeToAndCallOld = upgradeToAndCallOld;
exports.upgradeToAndCallCallCheck = upgradeToAndCallCallCheck;
exports.userAmountStakedOld = userAmountStakedOld;
exports.userAmountStakedCallCheck = userAmountStakedCallCheck;
exports.userIndexOfLastClaimedRewardOld = userIndexOfLastClaimedRewardOld;
exports.userIndexOfLastClaimedRewardCallCheck = userIndexOfLastClaimedRewardCallCheck;
exports.userNextPrice_amountStakedSyntheticToken_toShiftAwayFromOld = userNextPrice_amountStakedSyntheticToken_toShiftAwayFromOld;
exports.userNextPrice_amountStakedSyntheticToken_toShiftAwayFromCallCheck = userNextPrice_amountStakedSyntheticToken_toShiftAwayFromCallCheck;
exports.userNextPrice_stakedSyntheticTokenShiftIndexOld = userNextPrice_stakedSyntheticTokenShiftIndexOld;
exports.userNextPrice_stakedSyntheticTokenShiftIndexCallCheck = userNextPrice_stakedSyntheticTokenShiftIndexCallCheck;
exports.userNonceOld = userNonceOld;
exports.userNonceCallCheck = userNonceCallCheck;
exports.withdrawOld = withdrawOld;
exports.withdrawCallCheck = withdrawCallCheck;
exports.withdrawAllOld = withdrawAllOld;
exports.withdrawAllCallCheck = withdrawAllCallCheck;
exports.withdrawWithVoucherOld = withdrawWithVoucherOld;
exports.withdrawWithVoucherCallCheck = withdrawWithVoucherCallCheck;
exports.InternalMock = InternalMock;
/*  Not a pure module */
