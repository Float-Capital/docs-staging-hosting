// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("chai");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Smock = require("@defi-wonderland/smock");

const { expect, use } = require("chai");
use(require('@defi-wonderland/smock').smock.matchers);
;

function make(param) {
  return Smock.smock.fake("Treasury_v0");
}

function aDMIN_ROLEOld(_r) {
  var array = _r.ADMIN_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function aDMIN_ROLECallCheck(contract) {
  Chai.expect(contract.aDMIN_ROLE).to.have.been.calledWith();
  
}

function dEFAULT_ADMIN_ROLEOld(_r) {
  var array = _r.DEFAULT_ADMIN_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function dEFAULT_ADMIN_ROLECallCheck(contract) {
  Chai.expect(contract.dEFAULT_ADMIN_ROLE).to.have.been.calledWith();
  
}

function uPGRADER_ROLEOld(_r) {
  var array = _r.UPGRADER_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function uPGRADER_ROLECallCheck(contract) {
  Chai.expect(contract.uPGRADER_ROLE).to.have.been.calledWith();
  
}

function floatTokenOld(_r) {
  var array = _r.floatToken.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function floatTokenCallCheck(contract) {
  Chai.expect(contract.floatToken).to.have.been.calledWith();
  
}

function getRoleAdminOld(_r) {
  var array = _r.getRoleAdmin.calls;
  return Belt_Array.map(array, (function (_m) {
                var role = _m[0];
                return {
                        role: role
                      };
              }));
}

function getRoleAdminCallCheck(contract, param) {
  Chai.expect(contract.getRoleAdmin).to.have.been.calledWith(param.role);
  
}

function grantRoleOld(_r) {
  var array = _r.grantRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function grantRoleCallCheck(contract, param) {
  Chai.expect(contract.grantRole).to.have.been.calledWith(param.role, param.account);
  
}

function hasRoleOld(_r) {
  var array = _r.hasRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function hasRoleCallCheck(contract, param) {
  Chai.expect(contract.hasRole).to.have.been.calledWith(param.role, param.account);
  
}

function initializeOld(_r) {
  var array = _r.initialize.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        admin: param[0],
                        paymentToken: param[1],
                        floatToken: param[2]
                      };
              }));
}

function initializeCallCheck(contract, param) {
  Chai.expect(contract.initialize).to.have.been.calledWith(param.admin, param.paymentToken, param.floatToken);
  
}

function paymentTokenOld(_r) {
  var array = _r.paymentToken.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function paymentTokenCallCheck(contract) {
  Chai.expect(contract.paymentToken).to.have.been.calledWith();
  
}

function renounceRoleOld(_r) {
  var array = _r.renounceRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function renounceRoleCallCheck(contract, param) {
  Chai.expect(contract.renounceRole).to.have.been.calledWith(param.role, param.account);
  
}

function revokeRoleOld(_r) {
  var array = _r.revokeRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function revokeRoleCallCheck(contract, param) {
  Chai.expect(contract.revokeRole).to.have.been.calledWith(param.role, param.account);
  
}

function supportsInterfaceOld(_r) {
  var array = _r.supportsInterface.calls;
  return Belt_Array.map(array, (function (_m) {
                var interfaceId = _m[0];
                return {
                        interfaceId: interfaceId
                      };
              }));
}

function supportsInterfaceCallCheck(contract, param) {
  Chai.expect(contract.supportsInterface).to.have.been.calledWith(param.interfaceId);
  
}

function upgradeToOld(_r) {
  var array = _r.upgradeTo.calls;
  return Belt_Array.map(array, (function (_m) {
                var newImplementation = _m[0];
                return {
                        newImplementation: newImplementation
                      };
              }));
}

function upgradeToCallCheck(contract, param) {
  Chai.expect(contract.upgradeTo).to.have.been.calledWith(param.newImplementation);
  
}

function upgradeToAndCallOld(_r) {
  var array = _r.upgradeToAndCall.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        newImplementation: param[0],
                        data: param[1]
                      };
              }));
}

function upgradeToAndCallCallCheck(contract, param) {
  Chai.expect(contract.upgradeToAndCall).to.have.been.calledWith(param.newImplementation, param.data);
  
}

var uninitializedValue;

exports.make = make;
exports.uninitializedValue = uninitializedValue;
exports.aDMIN_ROLEOld = aDMIN_ROLEOld;
exports.aDMIN_ROLECallCheck = aDMIN_ROLECallCheck;
exports.dEFAULT_ADMIN_ROLEOld = dEFAULT_ADMIN_ROLEOld;
exports.dEFAULT_ADMIN_ROLECallCheck = dEFAULT_ADMIN_ROLECallCheck;
exports.uPGRADER_ROLEOld = uPGRADER_ROLEOld;
exports.uPGRADER_ROLECallCheck = uPGRADER_ROLECallCheck;
exports.floatTokenOld = floatTokenOld;
exports.floatTokenCallCheck = floatTokenCallCheck;
exports.getRoleAdminOld = getRoleAdminOld;
exports.getRoleAdminCallCheck = getRoleAdminCallCheck;
exports.grantRoleOld = grantRoleOld;
exports.grantRoleCallCheck = grantRoleCallCheck;
exports.hasRoleOld = hasRoleOld;
exports.hasRoleCallCheck = hasRoleCallCheck;
exports.initializeOld = initializeOld;
exports.initializeCallCheck = initializeCallCheck;
exports.paymentTokenOld = paymentTokenOld;
exports.paymentTokenCallCheck = paymentTokenCallCheck;
exports.renounceRoleOld = renounceRoleOld;
exports.renounceRoleCallCheck = renounceRoleCallCheck;
exports.revokeRoleOld = revokeRoleOld;
exports.revokeRoleCallCheck = revokeRoleCallCheck;
exports.supportsInterfaceOld = supportsInterfaceOld;
exports.supportsInterfaceCallCheck = supportsInterfaceCallCheck;
exports.upgradeToOld = upgradeToOld;
exports.upgradeToCallCheck = upgradeToCallCheck;
exports.upgradeToAndCallOld = upgradeToAndCallOld;
exports.upgradeToAndCallCallCheck = upgradeToAndCallCallCheck;
/*  Not a pure module */
