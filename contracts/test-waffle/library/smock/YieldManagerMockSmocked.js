// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");

function mockTEN_TO_THE_18ToReturn(_r, _param0) {
  ((_r.smocked.TEN_TO_THE_18.will.return.with([_param0])));
  
}

function tEN_TO_THE_18Calls(_r) {
  var array = (_r.smocked.TEN_TO_THE_18.calls);
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockAdminToReturn(_r, _param0) {
  ((_r.smocked.admin.will.return.with([_param0])));
  
}

function adminCalls(_r) {
  var array = _r.smocked.admin.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockLastSettledToReturn(_r, _param0) {
  ((_r.smocked.lastSettled.will.return.with([_param0])));
  
}

function lastSettledCalls(_r) {
  var array = _r.smocked.lastSettled.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockLongShortToReturn(_r, _param0) {
  ((_r.smocked.longShort.will.return.with([_param0])));
  
}

function longShortCalls(_r) {
  var array = _r.smocked.longShort.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockTokenToReturn(_r, _param0) {
  ((_r.smocked.token.will.return.with([_param0])));
  
}

function tokenCalls(_r) {
  var array = _r.smocked.token.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockTokenOtherRewardERC20ToReturn(_r, _param0) {
  ((_r.smocked.tokenOtherRewardERC20.will.return.with([_param0])));
  
}

function tokenOtherRewardERC20Calls(_r) {
  var array = (_r.smocked.tokenOtherRewardERC20.calls);
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockTotalHeldToReturn(_r, _param0) {
  ((_r.smocked.totalHeld.will.return.with([_param0])));
  
}

function totalHeldCalls(_r) {
  var array = _r.smocked.totalHeld.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockTotalReservedForTreasuryToReturn(_r, _param0) {
  ((_r.smocked.totalReservedForTreasury.will.return.with([_param0])));
  
}

function totalReservedForTreasuryCalls(_r) {
  var array = _r.smocked.totalReservedForTreasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockTreasuryToReturn(_r, _param0) {
  ((_r.smocked.treasury.will.return.with([_param0])));
  
}

function treasuryCalls(_r) {
  var array = _r.smocked.treasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockYieldRateToReturn(_r, _param0) {
  ((_r.smocked.yieldRate.will.return.with([_param0])));
  
}

function yieldRateCalls(_r) {
  var array = _r.smocked.yieldRate.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockSettleToReturn(_r) {
  ((_r.smocked.settle.will.return()));
  
}

function settleCalls(_r) {
  var array = _r.smocked.settle.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockSettleWithYieldPercentToReturn(_r) {
  ((_r.smocked.settleWithYieldPercent.will.return()));
  
}

function settleWithYieldPercentCalls(_r) {
  var array = _r.smocked.settleWithYieldPercent.calls;
  return Belt_Array.map(array, (function (_m) {
                var yieldPercent = _m[0];
                return {
                        yieldPercent: yieldPercent
                      };
              }));
}

function mockSettleWithYieldAbsoluteToReturn(_r) {
  ((_r.smocked.settleWithYieldAbsolute.will.return()));
  
}

function settleWithYieldAbsoluteCalls(_r) {
  var array = _r.smocked.settleWithYieldAbsolute.calls;
  return Belt_Array.map(array, (function (_m) {
                var totalYield = _m[0];
                return {
                        totalYield: totalYield
                      };
              }));
}

function mockMockHoldingAdditionalRewardYieldToReturn(_r) {
  ((_r.smocked.mockHoldingAdditionalRewardYield.will.return()));
  
}

function mockHoldingAdditionalRewardYieldCalls(_r) {
  var array = _r.smocked.mockHoldingAdditionalRewardYield.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockSetYieldRateToReturn(_r) {
  ((_r.smocked.setYieldRate.will.return()));
  
}

function setYieldRateCalls(_r) {
  var array = _r.smocked.setYieldRate.calls;
  return Belt_Array.map(array, (function (_m) {
                var yieldRate = _m[0];
                return {
                        yieldRate: yieldRate
                      };
              }));
}

function mockDepositPaymentTokenToReturn(_r) {
  ((_r.smocked.depositPaymentToken.will.return()));
  
}

function depositPaymentTokenCalls(_r) {
  var array = _r.smocked.depositPaymentToken.calls;
  return Belt_Array.map(array, (function (_m) {
                var amount = _m[0];
                return {
                        amount: amount
                      };
              }));
}

function mockWithdrawPaymentTokenToReturn(_r) {
  ((_r.smocked.withdrawPaymentToken.will.return()));
  
}

function withdrawPaymentTokenCalls(_r) {
  var array = _r.smocked.withdrawPaymentToken.calls;
  return Belt_Array.map(array, (function (_m) {
                var amount = _m[0];
                return {
                        amount: amount
                      };
              }));
}

function mockWithdrawErc20TokenToTreasuryToReturn(_r) {
  ((_r.smocked.withdrawErc20TokenToTreasury.will.return()));
  
}

function withdrawErc20TokenToTreasuryCalls(_r) {
  var array = (_r.smocked.withdrawErc20TokenToTreasury.calls);
  return Belt_Array.map(array, (function (_m) {
                var erc20Token = _m[0];
                return {
                        erc20Token: erc20Token
                      };
              }));
}

function mockClaimYieldAndGetMarketAmountToReturn(_r, _param0) {
  ((_r.smocked.claimYieldAndGetMarketAmount.will.return.with([_param0])));
  
}

function claimYieldAndGetMarketAmountCalls(_r) {
  var array = _r.smocked.claimYieldAndGetMarketAmount.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        totalValueRealizedForMarket: param[0],
                        treasuryPercentE18: param[1]
                      };
              }));
}

function mockWithdrawTreasuryFundsToReturn(_r) {
  ((_r.smocked.withdrawTreasuryFunds.will.return()));
  
}

function withdrawTreasuryFundsCalls(_r) {
  var array = _r.smocked.withdrawTreasuryFunds.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

var uninitializedValue;

exports.uninitializedValue = uninitializedValue;
exports.mockTEN_TO_THE_18ToReturn = mockTEN_TO_THE_18ToReturn;
exports.tEN_TO_THE_18Calls = tEN_TO_THE_18Calls;
exports.mockAdminToReturn = mockAdminToReturn;
exports.adminCalls = adminCalls;
exports.mockLastSettledToReturn = mockLastSettledToReturn;
exports.lastSettledCalls = lastSettledCalls;
exports.mockLongShortToReturn = mockLongShortToReturn;
exports.longShortCalls = longShortCalls;
exports.mockTokenToReturn = mockTokenToReturn;
exports.tokenCalls = tokenCalls;
exports.mockTokenOtherRewardERC20ToReturn = mockTokenOtherRewardERC20ToReturn;
exports.tokenOtherRewardERC20Calls = tokenOtherRewardERC20Calls;
exports.mockTotalHeldToReturn = mockTotalHeldToReturn;
exports.totalHeldCalls = totalHeldCalls;
exports.mockTotalReservedForTreasuryToReturn = mockTotalReservedForTreasuryToReturn;
exports.totalReservedForTreasuryCalls = totalReservedForTreasuryCalls;
exports.mockTreasuryToReturn = mockTreasuryToReturn;
exports.treasuryCalls = treasuryCalls;
exports.mockYieldRateToReturn = mockYieldRateToReturn;
exports.yieldRateCalls = yieldRateCalls;
exports.mockSettleToReturn = mockSettleToReturn;
exports.settleCalls = settleCalls;
exports.mockSettleWithYieldPercentToReturn = mockSettleWithYieldPercentToReturn;
exports.settleWithYieldPercentCalls = settleWithYieldPercentCalls;
exports.mockSettleWithYieldAbsoluteToReturn = mockSettleWithYieldAbsoluteToReturn;
exports.settleWithYieldAbsoluteCalls = settleWithYieldAbsoluteCalls;
exports.mockMockHoldingAdditionalRewardYieldToReturn = mockMockHoldingAdditionalRewardYieldToReturn;
exports.mockHoldingAdditionalRewardYieldCalls = mockHoldingAdditionalRewardYieldCalls;
exports.mockSetYieldRateToReturn = mockSetYieldRateToReturn;
exports.setYieldRateCalls = setYieldRateCalls;
exports.mockDepositPaymentTokenToReturn = mockDepositPaymentTokenToReturn;
exports.depositPaymentTokenCalls = depositPaymentTokenCalls;
exports.mockWithdrawPaymentTokenToReturn = mockWithdrawPaymentTokenToReturn;
exports.withdrawPaymentTokenCalls = withdrawPaymentTokenCalls;
exports.mockWithdrawErc20TokenToTreasuryToReturn = mockWithdrawErc20TokenToTreasuryToReturn;
exports.withdrawErc20TokenToTreasuryCalls = withdrawErc20TokenToTreasuryCalls;
exports.mockClaimYieldAndGetMarketAmountToReturn = mockClaimYieldAndGetMarketAmountToReturn;
exports.claimYieldAndGetMarketAmountCalls = claimYieldAndGetMarketAmountCalls;
exports.mockWithdrawTreasuryFundsToReturn = mockWithdrawTreasuryFundsToReturn;
exports.withdrawTreasuryFundsCalls = withdrawTreasuryFundsCalls;
/* No side effect */
