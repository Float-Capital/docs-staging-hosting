// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("chai");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Smock = require("@defi-wonderland/smock");

const { expect, use } = require("chai");
use(require('@defi-wonderland/smock').smock.matchers);
;

function make(param) {
  return Smock.smock.fake("YieldManagerMock");
}

function tEN_TO_THE_18Old(_r) {
  var array = (_r.TEN_TO_THE_18.calls);
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function tEN_TO_THE_18CallCheck(contract) {
  Chai.expect(contract.tEN_TO_THE_18).to.have.been.calledWith();
  
}

function adminOld(_r) {
  var array = _r.admin.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function adminCallCheck(contract) {
  Chai.expect(contract.admin).to.have.been.calledWith();
  
}

function depositPaymentTokenOld(_r) {
  var array = _r.depositPaymentToken.calls;
  return Belt_Array.map(array, (function (_m) {
                var amount = _m[0];
                return {
                        amount: amount
                      };
              }));
}

function depositPaymentTokenCallCheck(contract, param) {
  Chai.expect(contract.depositPaymentToken).to.have.been.calledWith(param.amount);
  
}

function distributeYieldForTreasuryAndReturnMarketAllocationOld(_r) {
  var array = _r.distributeYieldForTreasuryAndReturnMarketAllocation.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        totalValueRealizedForMarket: param[0],
                        treasuryYieldPercent_e18: param[1]
                      };
              }));
}

function distributeYieldForTreasuryAndReturnMarketAllocationCallCheck(contract, param) {
  Chai.expect(contract.distributeYieldForTreasuryAndReturnMarketAllocation).to.have.been.calledWith(param.totalValueRealizedForMarket, param.treasuryYieldPercent_e18);
  
}

function initializeForMarketOld(_r) {
  var array = _r.initializeForMarket.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function initializeForMarketCallCheck(contract) {
  Chai.expect(contract.initializeForMarket).to.have.been.calledWith();
  
}

function isInitializedOld(_r) {
  var array = _r.isInitialized.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function isInitializedCallCheck(contract) {
  Chai.expect(contract.isInitialized).to.have.been.calledWith();
  
}

function lastSettledOld(_r) {
  var array = _r.lastSettled.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function lastSettledCallCheck(contract) {
  Chai.expect(contract.lastSettled).to.have.been.calledWith();
  
}

function longShortOld(_r) {
  var array = _r.longShort.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function longShortCallCheck(contract) {
  Chai.expect(contract.longShort).to.have.been.calledWith();
  
}

function removePaymentTokenFromMarketOld(_r) {
  var array = _r.removePaymentTokenFromMarket.calls;
  return Belt_Array.map(array, (function (_m) {
                var amount = _m[0];
                return {
                        amount: amount
                      };
              }));
}

function removePaymentTokenFromMarketCallCheck(contract, param) {
  Chai.expect(contract.removePaymentTokenFromMarket).to.have.been.calledWith(param.amount);
  
}

function setYieldRateOld(_r) {
  var array = _r.setYieldRate.calls;
  return Belt_Array.map(array, (function (_m) {
                var yieldRate = _m[0];
                return {
                        yieldRate: yieldRate
                      };
              }));
}

function setYieldRateCallCheck(contract, param) {
  Chai.expect(contract.setYieldRate).to.have.been.calledWith(param.yieldRate);
  
}

function settleOld(_r) {
  var array = _r.settle.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function settleCallCheck(contract) {
  Chai.expect(contract.settle).to.have.been.calledWith();
  
}

function settleWithYieldAbsoluteOld(_r) {
  var array = _r.settleWithYieldAbsolute.calls;
  return Belt_Array.map(array, (function (_m) {
                var totalYield = _m[0];
                return {
                        totalYield: totalYield
                      };
              }));
}

function settleWithYieldAbsoluteCallCheck(contract, param) {
  Chai.expect(contract.settleWithYieldAbsolute).to.have.been.calledWith(param.totalYield);
  
}

function settleWithYieldPercentOld(_r) {
  var array = _r.settleWithYieldPercent.calls;
  return Belt_Array.map(array, (function (_m) {
                var yieldPercent = _m[0];
                return {
                        yieldPercent: yieldPercent
                      };
              }));
}

function settleWithYieldPercentCallCheck(contract, param) {
  Chai.expect(contract.settleWithYieldPercent).to.have.been.calledWith(param.yieldPercent);
  
}

function tokenOld(_r) {
  var array = _r.token.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function tokenCallCheck(contract) {
  Chai.expect(contract.token).to.have.been.calledWith();
  
}

function tokenOtherRewardERC20Old(_r) {
  var array = (_r.tokenOtherRewardERC20.calls);
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function tokenOtherRewardERC20CallCheck(contract) {
  Chai.expect(contract.tokenOtherRewardERC20).to.have.been.calledWith();
  
}

function totalHeldOld(_r) {
  var array = _r.totalHeld.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function totalHeldCallCheck(contract) {
  Chai.expect(contract.totalHeld).to.have.been.calledWith();
  
}

function totalReservedForTreasuryOld(_r) {
  var array = _r.totalReservedForTreasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function totalReservedForTreasuryCallCheck(contract) {
  Chai.expect(contract.totalReservedForTreasury).to.have.been.calledWith();
  
}

function transferPaymentTokensToUserOld(_r) {
  var array = _r.transferPaymentTokensToUser.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        user: param[0],
                        amount: param[1]
                      };
              }));
}

function transferPaymentTokensToUserCallCheck(contract, param) {
  Chai.expect(contract.transferPaymentTokensToUser).to.have.been.calledWith(param.user, param.amount);
  
}

function treasuryOld(_r) {
  var array = _r.treasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function treasuryCallCheck(contract) {
  Chai.expect(contract.treasury).to.have.been.calledWith();
  
}

function withdrawTreasuryFundsOld(_r) {
  var array = _r.withdrawTreasuryFunds.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function withdrawTreasuryFundsCallCheck(contract) {
  Chai.expect(contract.withdrawTreasuryFunds).to.have.been.calledWith();
  
}

function yieldRateOld(_r) {
  var array = _r.yieldRate.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function yieldRateCallCheck(contract) {
  Chai.expect(contract.yieldRate).to.have.been.calledWith();
  
}

var uninitializedValue;

exports.make = make;
exports.uninitializedValue = uninitializedValue;
exports.tEN_TO_THE_18Old = tEN_TO_THE_18Old;
exports.tEN_TO_THE_18CallCheck = tEN_TO_THE_18CallCheck;
exports.adminOld = adminOld;
exports.adminCallCheck = adminCallCheck;
exports.depositPaymentTokenOld = depositPaymentTokenOld;
exports.depositPaymentTokenCallCheck = depositPaymentTokenCallCheck;
exports.distributeYieldForTreasuryAndReturnMarketAllocationOld = distributeYieldForTreasuryAndReturnMarketAllocationOld;
exports.distributeYieldForTreasuryAndReturnMarketAllocationCallCheck = distributeYieldForTreasuryAndReturnMarketAllocationCallCheck;
exports.initializeForMarketOld = initializeForMarketOld;
exports.initializeForMarketCallCheck = initializeForMarketCallCheck;
exports.isInitializedOld = isInitializedOld;
exports.isInitializedCallCheck = isInitializedCallCheck;
exports.lastSettledOld = lastSettledOld;
exports.lastSettledCallCheck = lastSettledCallCheck;
exports.longShortOld = longShortOld;
exports.longShortCallCheck = longShortCallCheck;
exports.removePaymentTokenFromMarketOld = removePaymentTokenFromMarketOld;
exports.removePaymentTokenFromMarketCallCheck = removePaymentTokenFromMarketCallCheck;
exports.setYieldRateOld = setYieldRateOld;
exports.setYieldRateCallCheck = setYieldRateCallCheck;
exports.settleOld = settleOld;
exports.settleCallCheck = settleCallCheck;
exports.settleWithYieldAbsoluteOld = settleWithYieldAbsoluteOld;
exports.settleWithYieldAbsoluteCallCheck = settleWithYieldAbsoluteCallCheck;
exports.settleWithYieldPercentOld = settleWithYieldPercentOld;
exports.settleWithYieldPercentCallCheck = settleWithYieldPercentCallCheck;
exports.tokenOld = tokenOld;
exports.tokenCallCheck = tokenCallCheck;
exports.tokenOtherRewardERC20Old = tokenOtherRewardERC20Old;
exports.tokenOtherRewardERC20CallCheck = tokenOtherRewardERC20CallCheck;
exports.totalHeldOld = totalHeldOld;
exports.totalHeldCallCheck = totalHeldCallCheck;
exports.totalReservedForTreasuryOld = totalReservedForTreasuryOld;
exports.totalReservedForTreasuryCallCheck = totalReservedForTreasuryCallCheck;
exports.transferPaymentTokensToUserOld = transferPaymentTokensToUserOld;
exports.transferPaymentTokensToUserCallCheck = transferPaymentTokensToUserCallCheck;
exports.treasuryOld = treasuryOld;
exports.treasuryCallCheck = treasuryCallCheck;
exports.withdrawTreasuryFundsOld = withdrawTreasuryFundsOld;
exports.withdrawTreasuryFundsCallCheck = withdrawTreasuryFundsCallCheck;
exports.yieldRateOld = yieldRateOld;
exports.yieldRateCallCheck = yieldRateCallCheck;
/*  Not a pure module */
