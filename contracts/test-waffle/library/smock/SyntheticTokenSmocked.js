// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("chai");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Smock = require("@defi-wonderland/smock");

const { expect, use } = require("chai");
use(require('@defi-wonderland/smock').smock.matchers);
;

function make(param) {
  return Smock.smock.fake("SyntheticToken");
}

function dEFAULT_ADMIN_ROLEOld(_r) {
  var array = _r.DEFAULT_ADMIN_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function dEFAULT_ADMIN_ROLECallCheck(contract) {
  Chai.expect(contract.dEFAULT_ADMIN_ROLE).to.have.been.calledWith();
  
}

function dOMAIN_SEPARATOROld(_r) {
  var array = _r.DOMAIN_SEPARATOR.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function dOMAIN_SEPARATORCallCheck(contract) {
  Chai.expect(contract.dOMAIN_SEPARATOR).to.have.been.calledWith();
  
}

function mINTER_ROLEOld(_r) {
  var array = _r.MINTER_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mINTER_ROLECallCheck(contract) {
  Chai.expect(contract.mINTER_ROLE).to.have.been.calledWith();
  
}

function allowanceOld(_r) {
  var array = _r.allowance.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        owner: param[0],
                        spender: param[1]
                      };
              }));
}

function allowanceCallCheck(contract, param) {
  Chai.expect(contract.allowance).to.have.been.calledWith(param.owner, param.spender);
  
}

function approveOld(_r) {
  var array = _r.approve.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        spender: param[0],
                        amount: param[1]
                      };
              }));
}

function approveCallCheck(contract, param) {
  Chai.expect(contract.approve).to.have.been.calledWith(param.spender, param.amount);
  
}

function balanceOfOld(_r) {
  var array = _r.balanceOf.calls;
  return Belt_Array.map(array, (function (_m) {
                var account = _m[0];
                return {
                        account: account
                      };
              }));
}

function balanceOfCallCheck(contract, param) {
  Chai.expect(contract.balanceOf).to.have.been.calledWith(param.account);
  
}

function burnOld(_r) {
  var array = _r.burn.calls;
  return Belt_Array.map(array, (function (_m) {
                var amount = _m[0];
                return {
                        amount: amount
                      };
              }));
}

function burnCallCheck(contract, param) {
  Chai.expect(contract.burn).to.have.been.calledWith(param.amount);
  
}

function burnFromOld(_r) {
  var array = _r.burnFrom.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        account: param[0],
                        amount: param[1]
                      };
              }));
}

function burnFromCallCheck(contract, param) {
  Chai.expect(contract.burnFrom).to.have.been.calledWith(param.account, param.amount);
  
}

function decimalsOld(_r) {
  var array = _r.decimals.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function decimalsCallCheck(contract) {
  Chai.expect(contract.decimals).to.have.been.calledWith();
  
}

function decreaseAllowanceOld(_r) {
  var array = _r.decreaseAllowance.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        spender: param[0],
                        subtractedValue: param[1]
                      };
              }));
}

function decreaseAllowanceCallCheck(contract, param) {
  Chai.expect(contract.decreaseAllowance).to.have.been.calledWith(param.spender, param.subtractedValue);
  
}

function getRoleAdminOld(_r) {
  var array = _r.getRoleAdmin.calls;
  return Belt_Array.map(array, (function (_m) {
                var role = _m[0];
                return {
                        role: role
                      };
              }));
}

function getRoleAdminCallCheck(contract, param) {
  Chai.expect(contract.getRoleAdmin).to.have.been.calledWith(param.role);
  
}

function grantRoleOld(_r) {
  var array = _r.grantRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function grantRoleCallCheck(contract, param) {
  Chai.expect(contract.grantRole).to.have.been.calledWith(param.role, param.account);
  
}

function hasRoleOld(_r) {
  var array = _r.hasRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function hasRoleCallCheck(contract, param) {
  Chai.expect(contract.hasRole).to.have.been.calledWith(param.role, param.account);
  
}

function increaseAllowanceOld(_r) {
  var array = _r.increaseAllowance.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        spender: param[0],
                        addedValue: param[1]
                      };
              }));
}

function increaseAllowanceCallCheck(contract, param) {
  Chai.expect(contract.increaseAllowance).to.have.been.calledWith(param.spender, param.addedValue);
  
}

function isLongOld(_r) {
  var array = _r.isLong.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function isLongCallCheck(contract) {
  Chai.expect(contract.isLong).to.have.been.calledWith();
  
}

function longShortOld(_r) {
  var array = _r.longShort.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function longShortCallCheck(contract) {
  Chai.expect(contract.longShort).to.have.been.calledWith();
  
}

function marketIndexOld(_r) {
  var array = _r.marketIndex.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function marketIndexCallCheck(contract) {
  Chai.expect(contract.marketIndex).to.have.been.calledWith();
  
}

function mintOld(_r) {
  var array = _r.mint.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        _to: param[0],
                        amount: param[1]
                      };
              }));
}

function mintCallCheck(contract, param) {
  Chai.expect(contract.mint).to.have.been.calledWith(param._to, param.amount);
  
}

function nameOld(_r) {
  var array = _r.name.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function nameCallCheck(contract) {
  Chai.expect(contract.name).to.have.been.calledWith();
  
}

function noncesOld(_r) {
  var array = _r.nonces.calls;
  return Belt_Array.map(array, (function (_m) {
                var owner = _m[0];
                return {
                        owner: owner
                      };
              }));
}

function noncesCallCheck(contract, param) {
  Chai.expect(contract.nonces).to.have.been.calledWith(param.owner);
  
}

function permitOld(_r) {
  var array = _r.permit.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        owner: param[0],
                        spender: param[1],
                        value: param[2],
                        deadline: param[3],
                        v: param[4],
                        r: param[5],
                        s: param[6]
                      };
              }));
}

function permitCallCheck(contract, param) {
  Chai.expect(contract.permit).to.have.been.calledWith(param.owner, param.spender, param.value, param.deadline, param.v, param.r, param.s);
  
}

function renounceRoleOld(_r) {
  var array = _r.renounceRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function renounceRoleCallCheck(contract, param) {
  Chai.expect(contract.renounceRole).to.have.been.calledWith(param.role, param.account);
  
}

function revokeRoleOld(_r) {
  var array = _r.revokeRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function revokeRoleCallCheck(contract, param) {
  Chai.expect(contract.revokeRole).to.have.been.calledWith(param.role, param.account);
  
}

function stakeOld(_r) {
  var array = _r.stake.calls;
  return Belt_Array.map(array, (function (_m) {
                var amount = _m[0];
                return {
                        amount: amount
                      };
              }));
}

function stakeCallCheck(contract, param) {
  Chai.expect(contract.stake).to.have.been.calledWith(param.amount);
  
}

function stakerOld(_r) {
  var array = _r.staker.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function stakerCallCheck(contract) {
  Chai.expect(contract.staker).to.have.been.calledWith();
  
}

function supportsInterfaceOld(_r) {
  var array = _r.supportsInterface.calls;
  return Belt_Array.map(array, (function (_m) {
                var interfaceId = _m[0];
                return {
                        interfaceId: interfaceId
                      };
              }));
}

function supportsInterfaceCallCheck(contract, param) {
  Chai.expect(contract.supportsInterface).to.have.been.calledWith(param.interfaceId);
  
}

function symbolOld(_r) {
  var array = _r.symbol.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function symbolCallCheck(contract) {
  Chai.expect(contract.symbol).to.have.been.calledWith();
  
}

function totalSupplyOld(_r) {
  var array = _r.totalSupply.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function totalSupplyCallCheck(contract) {
  Chai.expect(contract.totalSupply).to.have.been.calledWith();
  
}

function transferOld(_r) {
  var array = _r.transfer.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        recipient: param[0],
                        amount: param[1]
                      };
              }));
}

function transferCallCheck(contract, param) {
  Chai.expect(contract.transfer).to.have.been.calledWith(param.recipient, param.amount);
  
}

function transferFromOld(_r) {
  var array = _r.transferFrom.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        sender: param[0],
                        recipient: param[1],
                        amount: param[2]
                      };
              }));
}

function transferFromCallCheck(contract, param) {
  Chai.expect(contract.transferFrom).to.have.been.calledWith(param.sender, param.recipient, param.amount);
  
}

var uninitializedValue;

exports.make = make;
exports.uninitializedValue = uninitializedValue;
exports.dEFAULT_ADMIN_ROLEOld = dEFAULT_ADMIN_ROLEOld;
exports.dEFAULT_ADMIN_ROLECallCheck = dEFAULT_ADMIN_ROLECallCheck;
exports.dOMAIN_SEPARATOROld = dOMAIN_SEPARATOROld;
exports.dOMAIN_SEPARATORCallCheck = dOMAIN_SEPARATORCallCheck;
exports.mINTER_ROLEOld = mINTER_ROLEOld;
exports.mINTER_ROLECallCheck = mINTER_ROLECallCheck;
exports.allowanceOld = allowanceOld;
exports.allowanceCallCheck = allowanceCallCheck;
exports.approveOld = approveOld;
exports.approveCallCheck = approveCallCheck;
exports.balanceOfOld = balanceOfOld;
exports.balanceOfCallCheck = balanceOfCallCheck;
exports.burnOld = burnOld;
exports.burnCallCheck = burnCallCheck;
exports.burnFromOld = burnFromOld;
exports.burnFromCallCheck = burnFromCallCheck;
exports.decimalsOld = decimalsOld;
exports.decimalsCallCheck = decimalsCallCheck;
exports.decreaseAllowanceOld = decreaseAllowanceOld;
exports.decreaseAllowanceCallCheck = decreaseAllowanceCallCheck;
exports.getRoleAdminOld = getRoleAdminOld;
exports.getRoleAdminCallCheck = getRoleAdminCallCheck;
exports.grantRoleOld = grantRoleOld;
exports.grantRoleCallCheck = grantRoleCallCheck;
exports.hasRoleOld = hasRoleOld;
exports.hasRoleCallCheck = hasRoleCallCheck;
exports.increaseAllowanceOld = increaseAllowanceOld;
exports.increaseAllowanceCallCheck = increaseAllowanceCallCheck;
exports.isLongOld = isLongOld;
exports.isLongCallCheck = isLongCallCheck;
exports.longShortOld = longShortOld;
exports.longShortCallCheck = longShortCallCheck;
exports.marketIndexOld = marketIndexOld;
exports.marketIndexCallCheck = marketIndexCallCheck;
exports.mintOld = mintOld;
exports.mintCallCheck = mintCallCheck;
exports.nameOld = nameOld;
exports.nameCallCheck = nameCallCheck;
exports.noncesOld = noncesOld;
exports.noncesCallCheck = noncesCallCheck;
exports.permitOld = permitOld;
exports.permitCallCheck = permitCallCheck;
exports.renounceRoleOld = renounceRoleOld;
exports.renounceRoleCallCheck = renounceRoleCallCheck;
exports.revokeRoleOld = revokeRoleOld;
exports.revokeRoleCallCheck = revokeRoleCallCheck;
exports.stakeOld = stakeOld;
exports.stakeCallCheck = stakeCallCheck;
exports.stakerOld = stakerOld;
exports.stakerCallCheck = stakerCallCheck;
exports.supportsInterfaceOld = supportsInterfaceOld;
exports.supportsInterfaceCallCheck = supportsInterfaceCallCheck;
exports.symbolOld = symbolOld;
exports.symbolCallCheck = symbolCallCheck;
exports.totalSupplyOld = totalSupplyOld;
exports.totalSupplyCallCheck = totalSupplyCallCheck;
exports.transferOld = transferOld;
exports.transferCallCheck = transferCallCheck;
exports.transferFromOld = transferFromOld;
exports.transferFromCallCheck = transferFromCallCheck;
/*  Not a pure module */
