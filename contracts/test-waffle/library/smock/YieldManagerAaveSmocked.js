// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");

function mockTEN_TO_THE_18ToReturn(_r, _param0) {
  ((_r.smocked.TEN_TO_THE_18.will.return.with([_param0])));
  
}

function tEN_TO_THE_18Calls(_r) {
  var array = (_r.smocked.TEN_TO_THE_18.calls);
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockATokenToReturn(_r, _param0) {
  ((_r.smocked.aToken.will.return.with([_param0])));
  
}

function aTokenCalls(_r) {
  var array = _r.smocked.aToken.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockAdminToReturn(_r, _param0) {
  ((_r.smocked.admin.will.return.with([_param0])));
  
}

function adminCalls(_r) {
  var array = _r.smocked.admin.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockLendingPoolToReturn(_r, _param0) {
  ((_r.smocked.lendingPool.will.return.with([_param0])));
  
}

function lendingPoolCalls(_r) {
  var array = _r.smocked.lendingPool.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockLongShortToReturn(_r, _param0) {
  ((_r.smocked.longShort.will.return.with([_param0])));
  
}

function longShortCalls(_r) {
  var array = _r.smocked.longShort.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockPaymentTokenToReturn(_r, _param0) {
  ((_r.smocked.paymentToken.will.return.with([_param0])));
  
}

function paymentTokenCalls(_r) {
  var array = _r.smocked.paymentToken.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockTotalReservedForTreasuryToReturn(_r, _param0) {
  ((_r.smocked.totalReservedForTreasury.will.return.with([_param0])));
  
}

function totalReservedForTreasuryCalls(_r) {
  var array = _r.smocked.totalReservedForTreasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockTreasuryToReturn(_r, _param0) {
  ((_r.smocked.treasury.will.return.with([_param0])));
  
}

function treasuryCalls(_r) {
  var array = _r.smocked.treasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function mockChangeAdminToReturn(_r) {
  ((_r.smocked.changeAdmin.will.return()));
  
}

function changeAdminCalls(_r) {
  var array = _r.smocked.changeAdmin.calls;
  return Belt_Array.map(array, (function (_m) {
                var admin = _m[0];
                return {
                        admin: admin
                      };
              }));
}

function mockDepositPaymentTokenToReturn(_r) {
  ((_r.smocked.depositPaymentToken.will.return()));
  
}

function depositPaymentTokenCalls(_r) {
  var array = _r.smocked.depositPaymentToken.calls;
  return Belt_Array.map(array, (function (_m) {
                var amount = _m[0];
                return {
                        amount: amount
                      };
              }));
}

function mockWithdrawPaymentTokenToReturn(_r) {
  ((_r.smocked.withdrawPaymentToken.will.return()));
  
}

function withdrawPaymentTokenCalls(_r) {
  var array = _r.smocked.withdrawPaymentToken.calls;
  return Belt_Array.map(array, (function (_m) {
                var amount = _m[0];
                return {
                        amount: amount
                      };
              }));
}

function mockWithdrawErc20TokenToTreasuryToReturn(_r) {
  ((_r.smocked.withdrawErc20TokenToTreasury.will.return()));
  
}

function withdrawErc20TokenToTreasuryCalls(_r) {
  var array = (_r.smocked.withdrawErc20TokenToTreasury.calls);
  return Belt_Array.map(array, (function (_m) {
                var erc20Token = _m[0];
                return {
                        erc20Token: erc20Token
                      };
              }));
}

function mockClaimYieldAndGetMarketAmountToReturn(_r, _param0) {
  ((_r.smocked.claimYieldAndGetMarketAmount.will.return.with([_param0])));
  
}

function claimYieldAndGetMarketAmountCalls(_r) {
  var array = _r.smocked.claimYieldAndGetMarketAmount.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        totalValueRealizedForMarket: param[0],
                        treasuryPercentE18: param[1]
                      };
              }));
}

function mockWithdrawTreasuryFundsToReturn(_r) {
  ((_r.smocked.withdrawTreasuryFunds.will.return()));
  
}

function withdrawTreasuryFundsCalls(_r) {
  var array = _r.smocked.withdrawTreasuryFunds.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

var uninitializedValue;

exports.uninitializedValue = uninitializedValue;
exports.mockTEN_TO_THE_18ToReturn = mockTEN_TO_THE_18ToReturn;
exports.tEN_TO_THE_18Calls = tEN_TO_THE_18Calls;
exports.mockATokenToReturn = mockATokenToReturn;
exports.aTokenCalls = aTokenCalls;
exports.mockAdminToReturn = mockAdminToReturn;
exports.adminCalls = adminCalls;
exports.mockLendingPoolToReturn = mockLendingPoolToReturn;
exports.lendingPoolCalls = lendingPoolCalls;
exports.mockLongShortToReturn = mockLongShortToReturn;
exports.longShortCalls = longShortCalls;
exports.mockPaymentTokenToReturn = mockPaymentTokenToReturn;
exports.paymentTokenCalls = paymentTokenCalls;
exports.mockTotalReservedForTreasuryToReturn = mockTotalReservedForTreasuryToReturn;
exports.totalReservedForTreasuryCalls = totalReservedForTreasuryCalls;
exports.mockTreasuryToReturn = mockTreasuryToReturn;
exports.treasuryCalls = treasuryCalls;
exports.mockChangeAdminToReturn = mockChangeAdminToReturn;
exports.changeAdminCalls = changeAdminCalls;
exports.mockDepositPaymentTokenToReturn = mockDepositPaymentTokenToReturn;
exports.depositPaymentTokenCalls = depositPaymentTokenCalls;
exports.mockWithdrawPaymentTokenToReturn = mockWithdrawPaymentTokenToReturn;
exports.withdrawPaymentTokenCalls = withdrawPaymentTokenCalls;
exports.mockWithdrawErc20TokenToTreasuryToReturn = mockWithdrawErc20TokenToTreasuryToReturn;
exports.withdrawErc20TokenToTreasuryCalls = withdrawErc20TokenToTreasuryCalls;
exports.mockClaimYieldAndGetMarketAmountToReturn = mockClaimYieldAndGetMarketAmountToReturn;
exports.claimYieldAndGetMarketAmountCalls = claimYieldAndGetMarketAmountCalls;
exports.mockWithdrawTreasuryFundsToReturn = mockWithdrawTreasuryFundsToReturn;
exports.withdrawTreasuryFundsCalls = withdrawTreasuryFundsCalls;
/* No side effect */
