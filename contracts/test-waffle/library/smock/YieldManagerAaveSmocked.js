// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("chai");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Smock = require("@defi-wonderland/smock");

const { expect, use } = require("chai");
use(require('@defi-wonderland/smock').smock.matchers);
;

function make(param) {
  return Smock.smock.fake("YieldManagerAave");
}

function aDMIN_ROLEOld(_r) {
  var array = _r.ADMIN_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function aDMIN_ROLECallCheck(contract) {
  Chai.expect(contract.aDMIN_ROLE).to.have.been.calledWith();
  
}

function dEFAULT_ADMIN_ROLEOld(_r) {
  var array = _r.DEFAULT_ADMIN_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function dEFAULT_ADMIN_ROLECallCheck(contract) {
  Chai.expect(contract.dEFAULT_ADMIN_ROLE).to.have.been.calledWith();
  
}

function uPGRADER_ROLEOld(_r) {
  var array = _r.UPGRADER_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function uPGRADER_ROLECallCheck(contract) {
  Chai.expect(contract.uPGRADER_ROLE).to.have.been.calledWith();
  
}

function aTokenOld(_r) {
  var array = _r.aToken.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function aTokenCallCheck(contract) {
  Chai.expect(contract.aToken).to.have.been.calledWith();
  
}

function aaveIncentivesControllerOld(_r) {
  var array = _r.aaveIncentivesController.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function aaveIncentivesControllerCallCheck(contract) {
  Chai.expect(contract.aaveIncentivesController).to.have.been.calledWith();
  
}

function amountReservedInCaseOfInsufficientAaveLiquidityOld(_r) {
  var array = _r.amountReservedInCaseOfInsufficientAaveLiquidity.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function amountReservedInCaseOfInsufficientAaveLiquidityCallCheck(contract) {
  Chai.expect(contract.amountReservedInCaseOfInsufficientAaveLiquidity).to.have.been.calledWith();
  
}

function claimAaveRewardsToTreasuryOld(_r) {
  var array = _r.claimAaveRewardsToTreasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function claimAaveRewardsToTreasuryCallCheck(contract) {
  Chai.expect(contract.claimAaveRewardsToTreasury).to.have.been.calledWith();
  
}

function depositPaymentTokenOld(_r) {
  var array = _r.depositPaymentToken.calls;
  return Belt_Array.map(array, (function (_m) {
                var amount = _m[0];
                return {
                        amount: amount
                      };
              }));
}

function depositPaymentTokenCallCheck(contract, param) {
  Chai.expect(contract.depositPaymentToken).to.have.been.calledWith(param.amount);
  
}

function distributeYieldForTreasuryAndReturnMarketAllocationOld(_r) {
  var array = _r.distributeYieldForTreasuryAndReturnMarketAllocation.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        totalValueRealizedForMarket: param[0],
                        treasuryYieldPercent_e18: param[1]
                      };
              }));
}

function distributeYieldForTreasuryAndReturnMarketAllocationCallCheck(contract, param) {
  Chai.expect(contract.distributeYieldForTreasuryAndReturnMarketAllocation).to.have.been.calledWith(param.totalValueRealizedForMarket, param.treasuryYieldPercent_e18);
  
}

function getRoleAdminOld(_r) {
  var array = _r.getRoleAdmin.calls;
  return Belt_Array.map(array, (function (_m) {
                var role = _m[0];
                return {
                        role: role
                      };
              }));
}

function getRoleAdminCallCheck(contract, param) {
  Chai.expect(contract.getRoleAdmin).to.have.been.calledWith(param.role);
  
}

function grantRoleOld(_r) {
  var array = _r.grantRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function grantRoleCallCheck(contract, param) {
  Chai.expect(contract.grantRole).to.have.been.calledWith(param.role, param.account);
  
}

function hasRoleOld(_r) {
  var array = _r.hasRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function hasRoleCallCheck(contract, param) {
  Chai.expect(contract.hasRole).to.have.been.calledWith(param.role, param.account);
  
}

function initializeOld(_r) {
  var array = _r.initialize.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        longShort: param[0],
                        treasury: param[1],
                        paymentToken: param[2],
                        aToken: param[3],
                        lendingPoolAddressesProvider: param[4],
                        aaveIncentivesController: param[5],
                        aaveReferralCode: param[6],
                        admin: param[7]
                      };
              }));
}

function initializeCallCheck(contract, param) {
  Chai.expect(contract.initialize).to.have.been.calledWith(param.longShort, param.treasury, param.paymentToken, param.aToken, param.lendingPoolAddressesProvider, param.aaveIncentivesController, param.aaveReferralCode, param.admin);
  
}

function initializeForMarketOld(_r) {
  var array = _r.initializeForMarket.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function initializeForMarketCallCheck(contract) {
  Chai.expect(contract.initializeForMarket).to.have.been.calledWith();
  
}

function isInitializedOld(_r) {
  var array = _r.isInitialized.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function isInitializedCallCheck(contract) {
  Chai.expect(contract.isInitialized).to.have.been.calledWith();
  
}

function lendingPoolAddressesProviderOld(_r) {
  var array = _r.lendingPoolAddressesProvider.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function lendingPoolAddressesProviderCallCheck(contract) {
  Chai.expect(contract.lendingPoolAddressesProvider).to.have.been.calledWith();
  
}

function longShortOld(_r) {
  var array = _r.longShort.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function longShortCallCheck(contract) {
  Chai.expect(contract.longShort).to.have.been.calledWith();
  
}

function paymentTokenOld(_r) {
  var array = _r.paymentToken.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function paymentTokenCallCheck(contract) {
  Chai.expect(contract.paymentToken).to.have.been.calledWith();
  
}

function removePaymentTokenFromMarketOld(_r) {
  var array = _r.removePaymentTokenFromMarket.calls;
  return Belt_Array.map(array, (function (_m) {
                var amount = _m[0];
                return {
                        amount: amount
                      };
              }));
}

function removePaymentTokenFromMarketCallCheck(contract, param) {
  Chai.expect(contract.removePaymentTokenFromMarket).to.have.been.calledWith(param.amount);
  
}

function renounceRoleOld(_r) {
  var array = _r.renounceRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function renounceRoleCallCheck(contract, param) {
  Chai.expect(contract.renounceRole).to.have.been.calledWith(param.role, param.account);
  
}

function revokeRoleOld(_r) {
  var array = _r.revokeRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function revokeRoleCallCheck(contract, param) {
  Chai.expect(contract.revokeRole).to.have.been.calledWith(param.role, param.account);
  
}

function supportsInterfaceOld(_r) {
  var array = _r.supportsInterface.calls;
  return Belt_Array.map(array, (function (_m) {
                var interfaceId = _m[0];
                return {
                        interfaceId: interfaceId
                      };
              }));
}

function supportsInterfaceCallCheck(contract, param) {
  Chai.expect(contract.supportsInterface).to.have.been.calledWith(param.interfaceId);
  
}

function totalReservedForTreasuryOld(_r) {
  var array = _r.totalReservedForTreasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function totalReservedForTreasuryCallCheck(contract) {
  Chai.expect(contract.totalReservedForTreasury).to.have.been.calledWith();
  
}

function transferPaymentTokensToUserOld(_r) {
  var array = _r.transferPaymentTokensToUser.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        user: param[0],
                        amount: param[1]
                      };
              }));
}

function transferPaymentTokensToUserCallCheck(contract, param) {
  Chai.expect(contract.transferPaymentTokensToUser).to.have.been.calledWith(param.user, param.amount);
  
}

function treasuryOld(_r) {
  var array = _r.treasury.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function treasuryCallCheck(contract) {
  Chai.expect(contract.treasury).to.have.been.calledWith();
  
}

function updateLatestLendingPoolAddressOld(_r) {
  var array = _r.updateLatestLendingPoolAddress.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function updateLatestLendingPoolAddressCallCheck(contract) {
  Chai.expect(contract.updateLatestLendingPoolAddress).to.have.been.calledWith();
  
}

function upgradeToOld(_r) {
  var array = _r.upgradeTo.calls;
  return Belt_Array.map(array, (function (_m) {
                var newImplementation = _m[0];
                return {
                        newImplementation: newImplementation
                      };
              }));
}

function upgradeToCallCheck(contract, param) {
  Chai.expect(contract.upgradeTo).to.have.been.calledWith(param.newImplementation);
  
}

function upgradeToAndCallOld(_r) {
  var array = _r.upgradeToAndCall.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        newImplementation: param[0],
                        data: param[1]
                      };
              }));
}

function upgradeToAndCallCallCheck(contract, param) {
  Chai.expect(contract.upgradeToAndCall).to.have.been.calledWith(param.newImplementation, param.data);
  
}

function withdrawTreasuryFundsOld(_r) {
  var array = _r.withdrawTreasuryFunds.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function withdrawTreasuryFundsCallCheck(contract) {
  Chai.expect(contract.withdrawTreasuryFunds).to.have.been.calledWith();
  
}

var uninitializedValue;

exports.make = make;
exports.uninitializedValue = uninitializedValue;
exports.aDMIN_ROLEOld = aDMIN_ROLEOld;
exports.aDMIN_ROLECallCheck = aDMIN_ROLECallCheck;
exports.dEFAULT_ADMIN_ROLEOld = dEFAULT_ADMIN_ROLEOld;
exports.dEFAULT_ADMIN_ROLECallCheck = dEFAULT_ADMIN_ROLECallCheck;
exports.uPGRADER_ROLEOld = uPGRADER_ROLEOld;
exports.uPGRADER_ROLECallCheck = uPGRADER_ROLECallCheck;
exports.aTokenOld = aTokenOld;
exports.aTokenCallCheck = aTokenCallCheck;
exports.aaveIncentivesControllerOld = aaveIncentivesControllerOld;
exports.aaveIncentivesControllerCallCheck = aaveIncentivesControllerCallCheck;
exports.amountReservedInCaseOfInsufficientAaveLiquidityOld = amountReservedInCaseOfInsufficientAaveLiquidityOld;
exports.amountReservedInCaseOfInsufficientAaveLiquidityCallCheck = amountReservedInCaseOfInsufficientAaveLiquidityCallCheck;
exports.claimAaveRewardsToTreasuryOld = claimAaveRewardsToTreasuryOld;
exports.claimAaveRewardsToTreasuryCallCheck = claimAaveRewardsToTreasuryCallCheck;
exports.depositPaymentTokenOld = depositPaymentTokenOld;
exports.depositPaymentTokenCallCheck = depositPaymentTokenCallCheck;
exports.distributeYieldForTreasuryAndReturnMarketAllocationOld = distributeYieldForTreasuryAndReturnMarketAllocationOld;
exports.distributeYieldForTreasuryAndReturnMarketAllocationCallCheck = distributeYieldForTreasuryAndReturnMarketAllocationCallCheck;
exports.getRoleAdminOld = getRoleAdminOld;
exports.getRoleAdminCallCheck = getRoleAdminCallCheck;
exports.grantRoleOld = grantRoleOld;
exports.grantRoleCallCheck = grantRoleCallCheck;
exports.hasRoleOld = hasRoleOld;
exports.hasRoleCallCheck = hasRoleCallCheck;
exports.initializeOld = initializeOld;
exports.initializeCallCheck = initializeCallCheck;
exports.initializeForMarketOld = initializeForMarketOld;
exports.initializeForMarketCallCheck = initializeForMarketCallCheck;
exports.isInitializedOld = isInitializedOld;
exports.isInitializedCallCheck = isInitializedCallCheck;
exports.lendingPoolAddressesProviderOld = lendingPoolAddressesProviderOld;
exports.lendingPoolAddressesProviderCallCheck = lendingPoolAddressesProviderCallCheck;
exports.longShortOld = longShortOld;
exports.longShortCallCheck = longShortCallCheck;
exports.paymentTokenOld = paymentTokenOld;
exports.paymentTokenCallCheck = paymentTokenCallCheck;
exports.removePaymentTokenFromMarketOld = removePaymentTokenFromMarketOld;
exports.removePaymentTokenFromMarketCallCheck = removePaymentTokenFromMarketCallCheck;
exports.renounceRoleOld = renounceRoleOld;
exports.renounceRoleCallCheck = renounceRoleCallCheck;
exports.revokeRoleOld = revokeRoleOld;
exports.revokeRoleCallCheck = revokeRoleCallCheck;
exports.supportsInterfaceOld = supportsInterfaceOld;
exports.supportsInterfaceCallCheck = supportsInterfaceCallCheck;
exports.totalReservedForTreasuryOld = totalReservedForTreasuryOld;
exports.totalReservedForTreasuryCallCheck = totalReservedForTreasuryCallCheck;
exports.transferPaymentTokensToUserOld = transferPaymentTokensToUserOld;
exports.transferPaymentTokensToUserCallCheck = transferPaymentTokensToUserCallCheck;
exports.treasuryOld = treasuryOld;
exports.treasuryCallCheck = treasuryCallCheck;
exports.updateLatestLendingPoolAddressOld = updateLatestLendingPoolAddressOld;
exports.updateLatestLendingPoolAddressCallCheck = updateLatestLendingPoolAddressCallCheck;
exports.upgradeToOld = upgradeToOld;
exports.upgradeToCallCheck = upgradeToCallCheck;
exports.upgradeToAndCallOld = upgradeToAndCallOld;
exports.upgradeToAndCallCallCheck = upgradeToAndCallCallCheck;
exports.withdrawTreasuryFundsOld = withdrawTreasuryFundsOld;
exports.withdrawTreasuryFundsCallCheck = withdrawTreasuryFundsCallCheck;
/*  Not a pure module */
