// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var ContractHelpers = require("../ContractHelpers.js");
var Smock = require("@eth-optimism/smock");

var internalRef = {
  contents: undefined
};

var functionToNotMock = {
  contents: ""
};

function setup(longShort) {
  return ContractHelpers.deployContract0("LongShortForInternalMocking").then(function (a) {
                return Smock.smockit(a);
              }).then(function (b) {
              internalRef.contents = b;
              return longShort.setMocker(b.address);
            });
}

function setupFunctionForUnitTesting(longShort, functionName) {
  functionToNotMock.contents = functionName;
  return longShort.setFunctionToNotMock(functionName);
}

var MockingAFunctionThatYouShouldntBe = /* @__PURE__ */Caml_exceptions.create("LongShortSmocked.InternalMock.MockingAFunctionThatYouShouldntBe");

var HaventSetupInternalMockingForLongShort = /* @__PURE__ */Caml_exceptions.create("LongShortSmocked.InternalMock.HaventSetupInternalMockingForLongShort");

function checkForExceptions(functionName) {
  if (functionToNotMock.contents === functionName) {
    throw {
          RE_EXN_ID: MockingAFunctionThatYouShouldntBe,
          Error: new Error()
        };
  }
  if (internalRef.contents !== undefined) {
    return ;
  }
  throw {
        RE_EXN_ID: HaventSetupInternalMockingForLongShort,
        Error: new Error()
      };
}

function mock_changeFeesToReturn(param) {
  checkForExceptions("_changeFees");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked._changeFeesMock.will.return()));
          
        }));
  
}

function mockadminOnlyToReturn(param) {
  checkForExceptions("adminOnly");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.adminOnlyMock.will.return()));
          
        }));
  
}

function mockseedMarketInitiallyToReturn(param) {
  checkForExceptions("seedMarketInitially");
  Belt_Option.map(internalRef.contents, (function (_r) {
          ((_r.smocked.seedMarketInitiallyMock.will.return()));
          
        }));
  
}

function adminOnlyCalls(param) {
  checkForExceptions("adminOnly");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    return _r.smocked.adminOnlyMock.calls;
                  })));
}

function _changeFeeCalls(param) {
  checkForExceptions("_changeFees");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked._changeFeesMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          marketIndex: param[0],
                                          _baseEntryFee: param[1],
                                          _badLiquidityEntryFee: param[3],
                                          _baseExitFee: param[2],
                                          _badLiquidityExitFee: param[4]
                                        };
                                }));
                  })));
}

function seedMarketInitiallyCalls(param) {
  checkForExceptions("seedMarketInitially");
  return Belt_Option.getExn(Belt_Option.map(internalRef.contents, (function (_r) {
                    var array = _r.smocked.seedMarketInitiallyMock.calls;
                    return Belt_Array.map(array, (function (param) {
                                  return {
                                          initialMarketSeed: param[0],
                                          marketIndex: param[1]
                                        };
                                }));
                  })));
}

var InternalMock = {
  mockContractName: "LongShortForInternalMocking",
  internalRef: internalRef,
  functionToNotMock: functionToNotMock,
  setup: setup,
  setupFunctionForUnitTesting: setupFunctionForUnitTesting,
  MockingAFunctionThatYouShouldntBe: MockingAFunctionThatYouShouldntBe,
  HaventSetupInternalMockingForLongShort: HaventSetupInternalMockingForLongShort,
  checkForExceptions: checkForExceptions,
  mock_changeFeesToReturn: mock_changeFeesToReturn,
  mockadminOnlyToReturn: mockadminOnlyToReturn,
  mockseedMarketInitiallyToReturn: mockseedMarketInitiallyToReturn,
  adminOnlyCalls: adminOnlyCalls,
  _changeFeeCalls: _changeFeeCalls,
  seedMarketInitiallyCalls: seedMarketInitiallyCalls
};

exports.InternalMock = InternalMock;
/* @eth-optimism/smock Not a pure module */
