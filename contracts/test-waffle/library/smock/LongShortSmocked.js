// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("chai");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Smock = require("@defi-wonderland/smock");

const { expect, use } = require("chai");
use(require('@defi-wonderland/smock').smock.matchers);
;

function make(param) {
  return Smock.smock.fake("LongShort");
}

function aDMIN_ROLEOld(_r) {
  var array = _r.ADMIN_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function aDMIN_ROLECallCheck(contract) {
  Chai.expect(contract.aDMIN_ROLE).to.have.been.calledWith();
  
}

function dEFAULT_ADMIN_ROLEOld(_r) {
  var array = _r.DEFAULT_ADMIN_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function dEFAULT_ADMIN_ROLECallCheck(contract) {
  Chai.expect(contract.dEFAULT_ADMIN_ROLE).to.have.been.calledWith();
  
}

function pERMANENT_INITIAL_LIQUIDITY_HOLDEROld(_r) {
  var array = _r.PERMANENT_INITIAL_LIQUIDITY_HOLDER.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function pERMANENT_INITIAL_LIQUIDITY_HOLDERCallCheck(contract) {
  Chai.expect(contract.pERMANENT_INITIAL_LIQUIDITY_HOLDER).to.have.been.calledWith();
  
}

function uPGRADER_ROLEOld(_r) {
  var array = _r.UPGRADER_ROLE.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function uPGRADER_ROLECallCheck(contract) {
  Chai.expect(contract.uPGRADER_ROLE).to.have.been.calledWith();
  
}

function assetPriceOld(_r) {
  var array = _r.assetPrice.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function assetPriceCallCheck(contract, param) {
  Chai.expect(contract.assetPrice).to.have.been.calledWith(param.param0);
  
}

function batched_amountPaymentToken_depositOld(_r) {
  var array = _r.batched_amountPaymentToken_deposit.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function batched_amountPaymentToken_depositCallCheck(contract, param) {
  Chai.expect(contract.batched_amountPaymentToken_deposit).to.have.been.calledWith(param.param0, param.param1);
  
}

function batched_amountSyntheticToken_redeemOld(_r) {
  var array = _r.batched_amountSyntheticToken_redeem.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function batched_amountSyntheticToken_redeemCallCheck(contract, param) {
  Chai.expect(contract.batched_amountSyntheticToken_redeem).to.have.been.calledWith(param.param0, param.param1);
  
}

function batched_amountSyntheticToken_toShiftAwayFrom_marketSideOld(_r) {
  var array = _r.batched_amountSyntheticToken_toShiftAwayFrom_marketSide.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function batched_amountSyntheticToken_toShiftAwayFrom_marketSideCallCheck(contract, param) {
  Chai.expect(contract.batched_amountSyntheticToken_toShiftAwayFrom_marketSide).to.have.been.calledWith(param.param0, param.param1);
  
}

function changeMarketTreasurySplitGradientOld(_r) {
  var array = _r.changeMarketTreasurySplitGradient.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        marketTreasurySplitGradient_e18: param[1]
                      };
              }));
}

function changeMarketTreasurySplitGradientCallCheck(contract, param) {
  Chai.expect(contract.changeMarketTreasurySplitGradient).to.have.been.calledWith(param.marketIndex, param.marketTreasurySplitGradient_e18);
  
}

function createNewSyntheticMarketOld(_r) {
  var array = _r.createNewSyntheticMarket.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        syntheticName: param[0],
                        syntheticSymbol: param[1],
                        paymentToken: param[2],
                        oracleManager: param[3],
                        yieldManager: param[4]
                      };
              }));
}

function createNewSyntheticMarketCallCheck(contract, param) {
  Chai.expect(contract.createNewSyntheticMarket).to.have.been.calledWith(param.syntheticName, param.syntheticSymbol, param.paymentToken, param.oracleManager, param.yieldManager);
  
}

function createNewSyntheticMarketExternalSyntheticTokensOld(_r) {
  var array = _r.createNewSyntheticMarketExternalSyntheticTokens.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        syntheticName: param[0],
                        syntheticSymbol: param[1],
                        longToken: param[2],
                        shortToken: param[3],
                        paymentToken: param[4],
                        oracleManager: param[5],
                        yieldManager: param[6]
                      };
              }));
}

function createNewSyntheticMarketExternalSyntheticTokensCallCheck(contract, param) {
  Chai.expect(contract.createNewSyntheticMarketExternalSyntheticTokens).to.have.been.calledWith(param.syntheticName, param.syntheticSymbol, param.longToken, param.shortToken, param.paymentToken, param.oracleManager, param.yieldManager);
  
}

function executeOutstandingNextPriceSettlementsUserOld(_r) {
  var array = _r.executeOutstandingNextPriceSettlementsUser.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        user: param[0],
                        marketIndex: param[1]
                      };
              }));
}

function executeOutstandingNextPriceSettlementsUserCallCheck(contract, param) {
  Chai.expect(contract.executeOutstandingNextPriceSettlementsUser).to.have.been.calledWith(param.user, param.marketIndex);
  
}

function executeOutstandingNextPriceSettlementsUserMultiOld(_r) {
  var array = _r.executeOutstandingNextPriceSettlementsUserMulti.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        user: param[0],
                        marketIndexes: param[1]
                      };
              }));
}

function executeOutstandingNextPriceSettlementsUserMultiCallCheck(contract, param) {
  Chai.expect(contract.executeOutstandingNextPriceSettlementsUserMulti).to.have.been.calledWith(param.user, param.marketIndexes);
  
}

function getAmountSyntheticTokenToMintOnTargetSideOld(_r) {
  var array = _r.getAmountSyntheticTokenToMintOnTargetSide.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        amountSyntheticToken_redeemOnOriginSide: param[1],
                        isShiftFromLong: param[2],
                        priceSnapshotIndex: param[3]
                      };
              }));
}

function getAmountSyntheticTokenToMintOnTargetSideCallCheck(contract, param) {
  Chai.expect(contract.getAmountSyntheticTokenToMintOnTargetSide).to.have.been.calledWith(param.marketIndex, param.amountSyntheticToken_redeemOnOriginSide, param.isShiftFromLong, param.priceSnapshotIndex);
  
}

function getRoleAdminOld(_r) {
  var array = _r.getRoleAdmin.calls;
  return Belt_Array.map(array, (function (_m) {
                var role = _m[0];
                return {
                        role: role
                      };
              }));
}

function getRoleAdminCallCheck(contract, param) {
  Chai.expect(contract.getRoleAdmin).to.have.been.calledWith(param.role);
  
}

function getUsersConfirmedButNotSettledSynthBalanceOld(_r) {
  var array = _r.getUsersConfirmedButNotSettledSynthBalance.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        user: param[0],
                        marketIndex: param[1],
                        isLong: param[2]
                      };
              }));
}

function getUsersConfirmedButNotSettledSynthBalanceCallCheck(contract, param) {
  Chai.expect(contract.getUsersConfirmedButNotSettledSynthBalance).to.have.been.calledWith(param.user, param.marketIndex, param.isLong);
  
}

function grantRoleOld(_r) {
  var array = _r.grantRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function grantRoleCallCheck(contract, param) {
  Chai.expect(contract.grantRole).to.have.been.calledWith(param.role, param.account);
  
}

function hasRoleOld(_r) {
  var array = _r.hasRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function hasRoleCallCheck(contract, param) {
  Chai.expect(contract.hasRole).to.have.been.calledWith(param.role, param.account);
  
}

function initializeOld(_r) {
  var array = _r.initialize.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        admin: param[0],
                        tokenFactory: param[1],
                        staker: param[2]
                      };
              }));
}

function initializeCallCheck(contract, param) {
  Chai.expect(contract.initialize).to.have.been.calledWith(param.admin, param.tokenFactory, param.staker);
  
}

function initializeMarketOld(_r) {
  var array = _r.initializeMarket.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        kInitialMultiplier: param[1],
                        kPeriod: param[2],
                        unstakeFee_e18: param[3],
                        initialMarketSeedForEachMarketSide: param[4],
                        balanceIncentiveCurve_exponent: param[5],
                        balanceIncentiveCurve_equilibriumOffset: param[6],
                        marketTreasurySplitGradient_e18: param[7]
                      };
              }));
}

function initializeMarketCallCheck(contract, param) {
  Chai.expect(contract.initializeMarket).to.have.been.calledWith(param.marketIndex, param.kInitialMultiplier, param.kPeriod, param.unstakeFee_e18, param.initialMarketSeedForEachMarketSide, param.balanceIncentiveCurve_exponent, param.balanceIncentiveCurve_equilibriumOffset, param.marketTreasurySplitGradient_e18);
  
}

function latestMarketOld(_r) {
  var array = _r.latestMarket.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function latestMarketCallCheck(contract) {
  Chai.expect(contract.latestMarket).to.have.been.calledWith();
  
}

function marketExistsOld(_r) {
  var array = _r.marketExists.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function marketExistsCallCheck(contract, param) {
  Chai.expect(contract.marketExists).to.have.been.calledWith(param.param0);
  
}

function marketSideValueInPaymentTokenOld(_r) {
  var array = _r.marketSideValueInPaymentToken.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function marketSideValueInPaymentTokenCallCheck(contract, param) {
  Chai.expect(contract.marketSideValueInPaymentToken).to.have.been.calledWith(param.param0, param.param1);
  
}

function marketTreasurySplitGradient_e18Old(_r) {
  var array = (_r.marketTreasurySplitGradient_e18.calls);
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function marketTreasurySplitGradient_e18CallCheck(contract, param) {
  Chai.expect(contract.marketTreasurySplitGradient_e18).to.have.been.calledWith(param.param0);
  
}

function marketUpdateIndexOld(_r) {
  var array = _r.marketUpdateIndex.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function marketUpdateIndexCallCheck(contract, param) {
  Chai.expect(contract.marketUpdateIndex).to.have.been.calledWith(param.param0);
  
}

function mintLongNextPriceOld(_r) {
  var array = _r.mintLongNextPrice.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        amount: param[1]
                      };
              }));
}

function mintLongNextPriceCallCheck(contract, param) {
  Chai.expect(contract.mintLongNextPrice).to.have.been.calledWith(param.marketIndex, param.amount);
  
}

function mintShortNextPriceOld(_r) {
  var array = _r.mintShortNextPrice.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        amount: param[1]
                      };
              }));
}

function mintShortNextPriceCallCheck(contract, param) {
  Chai.expect(contract.mintShortNextPrice).to.have.been.calledWith(param.marketIndex, param.amount);
  
}

function oracleManagersOld(_r) {
  var array = _r.oracleManagers.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function oracleManagersCallCheck(contract, param) {
  Chai.expect(contract.oracleManagers).to.have.been.calledWith(param.param0);
  
}

function paymentTokensOld(_r) {
  var array = _r.paymentTokens.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function paymentTokensCallCheck(contract, param) {
  Chai.expect(contract.paymentTokens).to.have.been.calledWith(param.param0);
  
}

function redeemLongNextPriceOld(_r) {
  var array = _r.redeemLongNextPrice.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        tokens_redeem: param[1]
                      };
              }));
}

function redeemLongNextPriceCallCheck(contract, param) {
  Chai.expect(contract.redeemLongNextPrice).to.have.been.calledWith(param.marketIndex, param.tokens_redeem);
  
}

function redeemShortNextPriceOld(_r) {
  var array = _r.redeemShortNextPrice.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        tokens_redeem: param[1]
                      };
              }));
}

function redeemShortNextPriceCallCheck(contract, param) {
  Chai.expect(contract.redeemShortNextPrice).to.have.been.calledWith(param.marketIndex, param.tokens_redeem);
  
}

function renounceRoleOld(_r) {
  var array = _r.renounceRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function renounceRoleCallCheck(contract, param) {
  Chai.expect(contract.renounceRole).to.have.been.calledWith(param.role, param.account);
  
}

function revokeRoleOld(_r) {
  var array = _r.revokeRole.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        role: param[0],
                        account: param[1]
                      };
              }));
}

function revokeRoleCallCheck(contract, param) {
  Chai.expect(contract.revokeRole).to.have.been.calledWith(param.role, param.account);
  
}

function shiftPositionFromLongNextPriceOld(_r) {
  var array = _r.shiftPositionFromLongNextPrice.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        amountSyntheticTokensToShift: param[1]
                      };
              }));
}

function shiftPositionFromLongNextPriceCallCheck(contract, param) {
  Chai.expect(contract.shiftPositionFromLongNextPrice).to.have.been.calledWith(param.marketIndex, param.amountSyntheticTokensToShift);
  
}

function shiftPositionFromShortNextPriceOld(_r) {
  var array = _r.shiftPositionFromShortNextPrice.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        amountSyntheticTokensToShift: param[1]
                      };
              }));
}

function shiftPositionFromShortNextPriceCallCheck(contract, param) {
  Chai.expect(contract.shiftPositionFromShortNextPrice).to.have.been.calledWith(param.marketIndex, param.amountSyntheticTokensToShift);
  
}

function shiftPositionNextPriceOld(_r) {
  var array = _r.shiftPositionNextPrice.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        amountSyntheticTokensToShift: param[1],
                        isShiftFromLong: param[2]
                      };
              }));
}

function shiftPositionNextPriceCallCheck(contract, param) {
  Chai.expect(contract.shiftPositionNextPrice).to.have.been.calledWith(param.marketIndex, param.amountSyntheticTokensToShift, param.isShiftFromLong);
  
}

function stakerOld(_r) {
  var array = _r.staker.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function stakerCallCheck(contract) {
  Chai.expect(contract.staker).to.have.been.calledWith();
  
}

function supportsInterfaceOld(_r) {
  var array = _r.supportsInterface.calls;
  return Belt_Array.map(array, (function (_m) {
                var interfaceId = _m[0];
                return {
                        interfaceId: interfaceId
                      };
              }));
}

function supportsInterfaceCallCheck(contract, param) {
  Chai.expect(contract.supportsInterface).to.have.been.calledWith(param.interfaceId);
  
}

function syntheticToken_priceSnapshotOld(_r) {
  var array = _r.syntheticToken_priceSnapshot.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1],
                        param2: param[2]
                      };
              }));
}

function syntheticToken_priceSnapshotCallCheck(contract, param) {
  Chai.expect(contract.syntheticToken_priceSnapshot).to.have.been.calledWith(param.param0, param.param1, param.param2);
  
}

function syntheticTokensOld(_r) {
  var array = _r.syntheticTokens.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function syntheticTokensCallCheck(contract, param) {
  Chai.expect(contract.syntheticTokens).to.have.been.calledWith(param.param0, param.param1);
  
}

function tokenFactoryOld(_r) {
  var array = _r.tokenFactory.calls;
  return Belt_Array.map(array, (function (param) {
                
              }));
}

function tokenFactoryCallCheck(contract) {
  Chai.expect(contract.tokenFactory).to.have.been.calledWith();
  
}

function updateMarketOracleOld(_r) {
  var array = _r.updateMarketOracle.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        marketIndex: param[0],
                        newOracleManager: param[1]
                      };
              }));
}

function updateMarketOracleCallCheck(contract, param) {
  Chai.expect(contract.updateMarketOracle).to.have.been.calledWith(param.marketIndex, param.newOracleManager);
  
}

function updateSystemStateOld(_r) {
  var array = _r.updateSystemState.calls;
  return Belt_Array.map(array, (function (_m) {
                var marketIndex = _m[0];
                return {
                        marketIndex: marketIndex
                      };
              }));
}

function updateSystemStateCallCheck(contract, param) {
  Chai.expect(contract.updateSystemState).to.have.been.calledWith(param.marketIndex);
  
}

function updateSystemStateMultiOld(_r) {
  var array = _r.updateSystemStateMulti.calls;
  return Belt_Array.map(array, (function (_m) {
                var marketIndexes = _m[0];
                return {
                        marketIndexes: marketIndexes
                      };
              }));
}

function updateSystemStateMultiCallCheck(contract, param) {
  Chai.expect(contract.updateSystemStateMulti).to.have.been.calledWith(param.marketIndexes);
  
}

function upgradeToOld(_r) {
  var array = _r.upgradeTo.calls;
  return Belt_Array.map(array, (function (_m) {
                var newImplementation = _m[0];
                return {
                        newImplementation: newImplementation
                      };
              }));
}

function upgradeToCallCheck(contract, param) {
  Chai.expect(contract.upgradeTo).to.have.been.calledWith(param.newImplementation);
  
}

function upgradeToAndCallOld(_r) {
  var array = _r.upgradeToAndCall.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        newImplementation: param[0],
                        data: param[1]
                      };
              }));
}

function upgradeToAndCallCallCheck(contract, param) {
  Chai.expect(contract.upgradeToAndCall).to.have.been.calledWith(param.newImplementation, param.data);
  
}

function userNextPrice_currentUpdateIndexOld(_r) {
  var array = _r.userNextPrice_currentUpdateIndex.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1]
                      };
              }));
}

function userNextPrice_currentUpdateIndexCallCheck(contract, param) {
  Chai.expect(contract.userNextPrice_currentUpdateIndex).to.have.been.calledWith(param.param0, param.param1);
  
}

function userNextPrice_paymentToken_depositAmountOld(_r) {
  var array = _r.userNextPrice_paymentToken_depositAmount.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1],
                        param2: param[2]
                      };
              }));
}

function userNextPrice_paymentToken_depositAmountCallCheck(contract, param) {
  Chai.expect(contract.userNextPrice_paymentToken_depositAmount).to.have.been.calledWith(param.param0, param.param1, param.param2);
  
}

function userNextPrice_syntheticToken_redeemAmountOld(_r) {
  var array = _r.userNextPrice_syntheticToken_redeemAmount.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1],
                        param2: param[2]
                      };
              }));
}

function userNextPrice_syntheticToken_redeemAmountCallCheck(contract, param) {
  Chai.expect(contract.userNextPrice_syntheticToken_redeemAmount).to.have.been.calledWith(param.param0, param.param1, param.param2);
  
}

function userNextPrice_syntheticToken_toShiftAwayFrom_marketSideOld(_r) {
  var array = _r.userNextPrice_syntheticToken_toShiftAwayFrom_marketSide.calls;
  return Belt_Array.map(array, (function (param) {
                return {
                        param0: param[0],
                        param1: param[1],
                        param2: param[2]
                      };
              }));
}

function userNextPrice_syntheticToken_toShiftAwayFrom_marketSideCallCheck(contract, param) {
  Chai.expect(contract.userNextPrice_syntheticToken_toShiftAwayFrom_marketSide).to.have.been.calledWith(param.param0, param.param1, param.param2);
  
}

function yieldManagersOld(_r) {
  var array = _r.yieldManagers.calls;
  return Belt_Array.map(array, (function (_m) {
                var param0 = _m[0];
                return {
                        param0: param0
                      };
              }));
}

function yieldManagersCallCheck(contract, param) {
  Chai.expect(contract.yieldManagers).to.have.been.calledWith(param.param0);
  
}

var mockContractName = "LongShortForInternalMocking";

var internalRef = {
  contents: undefined
};

var functionToNotMock = {
  contents: ""
};

function setup(contract) {
  return Smock.smock.fake(mockContractName).then(function (b) {
              internalRef.contents = b;
              return contract.setMocker(b.address);
            });
}

function setFunctionForUnitTesting(contract, functionName) {
  functionToNotMock.contents = functionName;
  return contract.setFunctionToNotMock(functionName);
}

function setupFunctionForUnitTesting(contract, functionName) {
  return Smock.smock.fake(mockContractName).then(function (b) {
              internalRef.contents = b;
              return Promise.all([
                          contract.setMocker(b.address),
                          contract.setFunctionToNotMock(functionName)
                        ]);
            });
}

var MockingAFunctionThatYouShouldntBe = /* @__PURE__ */Caml_exceptions.create("LongShortSmocked.InternalMock.MockingAFunctionThatYouShouldntBe");

var HaventSetupInternalMockingForLongShort = /* @__PURE__ */Caml_exceptions.create("LongShortSmocked.InternalMock.HaventSetupInternalMockingForLongShort");

function checkForExceptions(functionName) {
  if (functionToNotMock.contents === functionName) {
    throw {
          RE_EXN_ID: MockingAFunctionThatYouShouldntBe,
          Error: new Error()
        };
  }
  if (internalRef.contents !== undefined) {
    return ;
  }
  throw {
        RE_EXN_ID: HaventSetupInternalMockingForLongShort,
        Error: new Error()
      };
}

function adminOnlyModifierLogicFunction(param) {
  checkForExceptions("adminOnlyModifierLogic");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract.adminOnlyModifierLogicMock;
              }));
}

function adminOnlyModifierLogicCallCheck(param) {
  Chai.expect(adminOnlyModifierLogicFunction(undefined)).to.have.been.calledWith();
  
}

function mockAdminOnlyModifierLogicToRevert(errorString) {
  checkForExceptions("adminOnlyModifierLogic");
  Belt_Option.map(internalRef.contents, (function (param) {
          param.adminOnlyModifierLogicMock.reverts(errorString);
          
        }));
  
}

function mockAdminOnlyModifierLogicToRevertNoReason(param) {
  checkForExceptions("adminOnlyModifierLogic");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim.adminOnlyModifierLogicMock.reverts();
          
        }));
  
}

function requireMarketExistsModifierLogicFunction(param) {
  checkForExceptions("requireMarketExistsModifierLogic");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract.requireMarketExistsModifierLogicMock;
              }));
}

function requireMarketExistsModifierLogicCallCheck(param) {
  Chai.expect(requireMarketExistsModifierLogicFunction(undefined)).to.have.been.calledWith(param.marketIndex);
  
}

function mockRequireMarketExistsModifierLogicToRevert(errorString) {
  checkForExceptions("requireMarketExistsModifierLogic");
  Belt_Option.map(internalRef.contents, (function (param) {
          param.requireMarketExistsModifierLogicMock.reverts(errorString);
          
        }));
  
}

function mockRequireMarketExistsModifierLogicToRevertNoReason(param) {
  checkForExceptions("requireMarketExistsModifierLogic");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim.requireMarketExistsModifierLogicMock.reverts();
          
        }));
  
}

function initializeFunction(param) {
  checkForExceptions("initialize");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract.initializeMock;
              }));
}

function initializeCallCheck$1(param) {
  Chai.expect(initializeFunction(undefined)).to.have.been.calledWith(param.admin, param.tokenFactory, param.staker);
  
}

function mockInitializeToRevert(errorString) {
  checkForExceptions("initialize");
  Belt_Option.map(internalRef.contents, (function (param) {
          param.initializeMock.reverts(errorString);
          
        }));
  
}

function mockInitializeToRevertNoReason(param) {
  checkForExceptions("initialize");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim.initializeMock.reverts();
          
        }));
  
}

function _seedMarketInitiallyFunction(param) {
  checkForExceptions("_seedMarketInitially");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._seedMarketInitiallyMock;
              }));
}

function _seedMarketInitiallyCallCheck(param) {
  Chai.expect(_seedMarketInitiallyFunction(undefined)).to.have.been.calledWith(param.initialMarketSeedForEachMarketSide, param.marketIndex);
  
}

function mock_seedMarketInitiallyToRevert(errorString) {
  checkForExceptions("_seedMarketInitially");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._seedMarketInitiallyMock.reverts(errorString);
          
        }));
  
}

function mock_seedMarketInitiallyToRevertNoReason(param) {
  checkForExceptions("_seedMarketInitially");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._seedMarketInitiallyMock.reverts();
          
        }));
  
}

function mock_getSyntheticTokenPriceToReturn(_param0) {
  checkForExceptions("_getSyntheticTokenPrice");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._getSyntheticTokenPriceMock.returns(_param0);
          
        }));
  
}

function _getSyntheticTokenPriceFunction(param) {
  checkForExceptions("_getSyntheticTokenPrice");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._getSyntheticTokenPriceMock;
              }));
}

function _getSyntheticTokenPriceCallCheck(param) {
  Chai.expect(_getSyntheticTokenPriceFunction(undefined)).to.have.been.calledWith(param.amountPaymentTokenBackingSynth, param.amountSyntheticToken);
  
}

function mock_getSyntheticTokenPriceToRevert(errorString) {
  checkForExceptions("_getSyntheticTokenPrice");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._getSyntheticTokenPriceMock.reverts(errorString);
          
        }));
  
}

function mock_getSyntheticTokenPriceToRevertNoReason(param) {
  checkForExceptions("_getSyntheticTokenPrice");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._getSyntheticTokenPriceMock.reverts();
          
        }));
  
}

function mock_getAmountPaymentTokenToReturn(_param0) {
  checkForExceptions("_getAmountPaymentToken");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._getAmountPaymentTokenMock.returns(_param0);
          
        }));
  
}

function _getAmountPaymentTokenFunction(param) {
  checkForExceptions("_getAmountPaymentToken");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._getAmountPaymentTokenMock;
              }));
}

function _getAmountPaymentTokenCallCheck(param) {
  Chai.expect(_getAmountPaymentTokenFunction(undefined)).to.have.been.calledWith(param.amountSyntheticToken, param.syntheticTokenPriceInPaymentTokens);
  
}

function mock_getAmountPaymentTokenToRevert(errorString) {
  checkForExceptions("_getAmountPaymentToken");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._getAmountPaymentTokenMock.reverts(errorString);
          
        }));
  
}

function mock_getAmountPaymentTokenToRevertNoReason(param) {
  checkForExceptions("_getAmountPaymentToken");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._getAmountPaymentTokenMock.reverts();
          
        }));
  
}

function mock_getAmountSyntheticTokenToReturn(_param0) {
  checkForExceptions("_getAmountSyntheticToken");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._getAmountSyntheticTokenMock.returns(_param0);
          
        }));
  
}

function _getAmountSyntheticTokenFunction(param) {
  checkForExceptions("_getAmountSyntheticToken");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._getAmountSyntheticTokenMock;
              }));
}

function _getAmountSyntheticTokenCallCheck(param) {
  Chai.expect(_getAmountSyntheticTokenFunction(undefined)).to.have.been.calledWith(param.amountPaymentTokenBackingSynth, param.syntheticTokenPriceInPaymentTokens);
  
}

function mock_getAmountSyntheticTokenToRevert(errorString) {
  checkForExceptions("_getAmountSyntheticToken");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._getAmountSyntheticTokenMock.reverts(errorString);
          
        }));
  
}

function mock_getAmountSyntheticTokenToRevertNoReason(param) {
  checkForExceptions("_getAmountSyntheticToken");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._getAmountSyntheticTokenMock.reverts();
          
        }));
  
}

function mock_getEquivalentAmountSyntheticTokensOnTargetSideToReturn(_param0) {
  checkForExceptions("_getEquivalentAmountSyntheticTokensOnTargetSide");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._getEquivalentAmountSyntheticTokensOnTargetSideMock.returns(_param0);
          
        }));
  
}

function _getEquivalentAmountSyntheticTokensOnTargetSideFunction(param) {
  checkForExceptions("_getEquivalentAmountSyntheticTokensOnTargetSide");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._getEquivalentAmountSyntheticTokensOnTargetSideMock;
              }));
}

function _getEquivalentAmountSyntheticTokensOnTargetSideCallCheck(param) {
  Chai.expect(_getEquivalentAmountSyntheticTokensOnTargetSideFunction(undefined)).to.have.been.calledWith(param.amountSyntheticTokens_originSide, param.syntheticTokenPrice_originSide, param.syntheticTokenPrice_targetSide);
  
}

function mock_getEquivalentAmountSyntheticTokensOnTargetSideToRevert(errorString) {
  checkForExceptions("_getEquivalentAmountSyntheticTokensOnTargetSide");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._getEquivalentAmountSyntheticTokensOnTargetSideMock.reverts(errorString);
          
        }));
  
}

function mock_getEquivalentAmountSyntheticTokensOnTargetSideToRevertNoReason(param) {
  checkForExceptions("_getEquivalentAmountSyntheticTokensOnTargetSide");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._getEquivalentAmountSyntheticTokensOnTargetSideMock.reverts();
          
        }));
  
}

function mockGetAmountSyntheticTokenToMintOnTargetSideToReturn(_param0) {
  checkForExceptions("getAmountSyntheticTokenToMintOnTargetSide");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract.getAmountSyntheticTokenToMintOnTargetSideMock.returns(_param0);
          
        }));
  
}

function getAmountSyntheticTokenToMintOnTargetSideFunction(param) {
  checkForExceptions("getAmountSyntheticTokenToMintOnTargetSide");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract.getAmountSyntheticTokenToMintOnTargetSideMock;
              }));
}

function getAmountSyntheticTokenToMintOnTargetSideCallCheck$1(param) {
  Chai.expect(getAmountSyntheticTokenToMintOnTargetSideFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.amountSyntheticToken_redeemOnOriginSide, param.isShiftFromLong, param.priceSnapshotIndex);
  
}

function mockGetAmountSyntheticTokenToMintOnTargetSideToRevert(errorString) {
  checkForExceptions("getAmountSyntheticTokenToMintOnTargetSide");
  Belt_Option.map(internalRef.contents, (function (param) {
          param.getAmountSyntheticTokenToMintOnTargetSideMock.reverts(errorString);
          
        }));
  
}

function mockGetAmountSyntheticTokenToMintOnTargetSideToRevertNoReason(param) {
  checkForExceptions("getAmountSyntheticTokenToMintOnTargetSide");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim.getAmountSyntheticTokenToMintOnTargetSideMock.reverts();
          
        }));
  
}

function mockGetUsersConfirmedButNotSettledSynthBalanceToReturn(_param0) {
  checkForExceptions("getUsersConfirmedButNotSettledSynthBalance");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract.getUsersConfirmedButNotSettledSynthBalanceMock.returns(_param0);
          
        }));
  
}

function getUsersConfirmedButNotSettledSynthBalanceFunction(param) {
  checkForExceptions("getUsersConfirmedButNotSettledSynthBalance");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract.getUsersConfirmedButNotSettledSynthBalanceMock;
              }));
}

function getUsersConfirmedButNotSettledSynthBalanceCallCheck$1(param) {
  Chai.expect(getUsersConfirmedButNotSettledSynthBalanceFunction(undefined)).to.have.been.calledWith(param.user, param.marketIndex, param.isLong);
  
}

function mockGetUsersConfirmedButNotSettledSynthBalanceToRevert(errorString) {
  checkForExceptions("getUsersConfirmedButNotSettledSynthBalance");
  Belt_Option.map(internalRef.contents, (function (param) {
          param.getUsersConfirmedButNotSettledSynthBalanceMock.reverts(errorString);
          
        }));
  
}

function mockGetUsersConfirmedButNotSettledSynthBalanceToRevertNoReason(param) {
  checkForExceptions("getUsersConfirmedButNotSettledSynthBalance");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim.getUsersConfirmedButNotSettledSynthBalanceMock.reverts();
          
        }));
  
}

function mock_getYieldSplitToReturn(_param0, _param1) {
  checkForExceptions("_getYieldSplit");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._getYieldSplitMock.returns([
                _param0,
                _param1
              ]);
          
        }));
  
}

function _getYieldSplitFunction(param) {
  checkForExceptions("_getYieldSplit");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._getYieldSplitMock;
              }));
}

function _getYieldSplitCallCheck(param) {
  Chai.expect(_getYieldSplitFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.longValue, param.shortValue, param.totalValueLockedInMarket);
  
}

function mock_getYieldSplitToRevert(errorString) {
  checkForExceptions("_getYieldSplit");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._getYieldSplitMock.reverts(errorString);
          
        }));
  
}

function mock_getYieldSplitToRevertNoReason(param) {
  checkForExceptions("_getYieldSplit");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._getYieldSplitMock.reverts();
          
        }));
  
}

function mock_claimAndDistributeYieldThenRebalanceMarketToReturn(_param0, _param1) {
  checkForExceptions("_claimAndDistributeYieldThenRebalanceMarket");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._claimAndDistributeYieldThenRebalanceMarketMock.returns([
                _param0,
                _param1
              ]);
          
        }));
  
}

function _claimAndDistributeYieldThenRebalanceMarketFunction(param) {
  checkForExceptions("_claimAndDistributeYieldThenRebalanceMarket");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._claimAndDistributeYieldThenRebalanceMarketMock;
              }));
}

function _claimAndDistributeYieldThenRebalanceMarketCallCheck(param) {
  Chai.expect(_claimAndDistributeYieldThenRebalanceMarketFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.newAssetPrice);
  
}

function mock_claimAndDistributeYieldThenRebalanceMarketToRevert(errorString) {
  checkForExceptions("_claimAndDistributeYieldThenRebalanceMarket");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._claimAndDistributeYieldThenRebalanceMarketMock.reverts(errorString);
          
        }));
  
}

function mock_claimAndDistributeYieldThenRebalanceMarketToRevertNoReason(param) {
  checkForExceptions("_claimAndDistributeYieldThenRebalanceMarket");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._claimAndDistributeYieldThenRebalanceMarketMock.reverts();
          
        }));
  
}

function _updateSystemStateInternalFunction(param) {
  checkForExceptions("_updateSystemStateInternal");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._updateSystemStateInternalMock;
              }));
}

function _updateSystemStateInternalCallCheck(param) {
  Chai.expect(_updateSystemStateInternalFunction(undefined)).to.have.been.calledWith(param.marketIndex);
  
}

function mock_updateSystemStateInternalToRevert(errorString) {
  checkForExceptions("_updateSystemStateInternal");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._updateSystemStateInternalMock.reverts(errorString);
          
        }));
  
}

function mock_updateSystemStateInternalToRevertNoReason(param) {
  checkForExceptions("_updateSystemStateInternal");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._updateSystemStateInternalMock.reverts();
          
        }));
  
}

function _transferPaymentTokensFromUserToYieldManagerFunction(param) {
  checkForExceptions("_transferPaymentTokensFromUserToYieldManager");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._transferPaymentTokensFromUserToYieldManagerMock;
              }));
}

function _transferPaymentTokensFromUserToYieldManagerCallCheck(param) {
  Chai.expect(_transferPaymentTokensFromUserToYieldManagerFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.amount);
  
}

function mock_transferPaymentTokensFromUserToYieldManagerToRevert(errorString) {
  checkForExceptions("_transferPaymentTokensFromUserToYieldManager");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._transferPaymentTokensFromUserToYieldManagerMock.reverts(errorString);
          
        }));
  
}

function mock_transferPaymentTokensFromUserToYieldManagerToRevertNoReason(param) {
  checkForExceptions("_transferPaymentTokensFromUserToYieldManager");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._transferPaymentTokensFromUserToYieldManagerMock.reverts();
          
        }));
  
}

function _mintNextPriceFunction(param) {
  checkForExceptions("_mintNextPrice");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._mintNextPriceMock;
              }));
}

function _mintNextPriceCallCheck(param) {
  Chai.expect(_mintNextPriceFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.amount, param.isLong);
  
}

function mock_mintNextPriceToRevert(errorString) {
  checkForExceptions("_mintNextPrice");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._mintNextPriceMock.reverts(errorString);
          
        }));
  
}

function mock_mintNextPriceToRevertNoReason(param) {
  checkForExceptions("_mintNextPrice");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._mintNextPriceMock.reverts();
          
        }));
  
}

function _redeemNextPriceFunction(param) {
  checkForExceptions("_redeemNextPrice");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._redeemNextPriceMock;
              }));
}

function _redeemNextPriceCallCheck(param) {
  Chai.expect(_redeemNextPriceFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.tokens_redeem, param.isLong);
  
}

function mock_redeemNextPriceToRevert(errorString) {
  checkForExceptions("_redeemNextPrice");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._redeemNextPriceMock.reverts(errorString);
          
        }));
  
}

function mock_redeemNextPriceToRevertNoReason(param) {
  checkForExceptions("_redeemNextPrice");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._redeemNextPriceMock.reverts();
          
        }));
  
}

function shiftPositionNextPriceFunction(param) {
  checkForExceptions("shiftPositionNextPrice");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract.shiftPositionNextPriceMock;
              }));
}

function shiftPositionNextPriceCallCheck$1(param) {
  Chai.expect(shiftPositionNextPriceFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.amountSyntheticTokensToShift, param.isShiftFromLong);
  
}

function mockShiftPositionNextPriceToRevert(errorString) {
  checkForExceptions("shiftPositionNextPrice");
  Belt_Option.map(internalRef.contents, (function (param) {
          param.shiftPositionNextPriceMock.reverts(errorString);
          
        }));
  
}

function mockShiftPositionNextPriceToRevertNoReason(param) {
  checkForExceptions("shiftPositionNextPrice");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim.shiftPositionNextPriceMock.reverts();
          
        }));
  
}

function _executeOutstandingNextPriceMintsFunction(param) {
  checkForExceptions("_executeOutstandingNextPriceMints");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._executeOutstandingNextPriceMintsMock;
              }));
}

function _executeOutstandingNextPriceMintsCallCheck(param) {
  Chai.expect(_executeOutstandingNextPriceMintsFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.user, param.isLong);
  
}

function mock_executeOutstandingNextPriceMintsToRevert(errorString) {
  checkForExceptions("_executeOutstandingNextPriceMints");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._executeOutstandingNextPriceMintsMock.reverts(errorString);
          
        }));
  
}

function mock_executeOutstandingNextPriceMintsToRevertNoReason(param) {
  checkForExceptions("_executeOutstandingNextPriceMints");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._executeOutstandingNextPriceMintsMock.reverts();
          
        }));
  
}

function _executeOutstandingNextPriceRedeemsFunction(param) {
  checkForExceptions("_executeOutstandingNextPriceRedeems");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._executeOutstandingNextPriceRedeemsMock;
              }));
}

function _executeOutstandingNextPriceRedeemsCallCheck(param) {
  Chai.expect(_executeOutstandingNextPriceRedeemsFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.user, param.isLong);
  
}

function mock_executeOutstandingNextPriceRedeemsToRevert(errorString) {
  checkForExceptions("_executeOutstandingNextPriceRedeems");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._executeOutstandingNextPriceRedeemsMock.reverts(errorString);
          
        }));
  
}

function mock_executeOutstandingNextPriceRedeemsToRevertNoReason(param) {
  checkForExceptions("_executeOutstandingNextPriceRedeems");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._executeOutstandingNextPriceRedeemsMock.reverts();
          
        }));
  
}

function _executeOutstandingNextPriceTokenShiftsFunction(param) {
  checkForExceptions("_executeOutstandingNextPriceTokenShifts");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._executeOutstandingNextPriceTokenShiftsMock;
              }));
}

function _executeOutstandingNextPriceTokenShiftsCallCheck(param) {
  Chai.expect(_executeOutstandingNextPriceTokenShiftsFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.user, param.isShiftFromLong);
  
}

function mock_executeOutstandingNextPriceTokenShiftsToRevert(errorString) {
  checkForExceptions("_executeOutstandingNextPriceTokenShifts");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._executeOutstandingNextPriceTokenShiftsMock.reverts(errorString);
          
        }));
  
}

function mock_executeOutstandingNextPriceTokenShiftsToRevertNoReason(param) {
  checkForExceptions("_executeOutstandingNextPriceTokenShifts");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._executeOutstandingNextPriceTokenShiftsMock.reverts();
          
        }));
  
}

function _executeOutstandingNextPriceSettlementsFunction(param) {
  checkForExceptions("_executeOutstandingNextPriceSettlements");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._executeOutstandingNextPriceSettlementsMock;
              }));
}

function _executeOutstandingNextPriceSettlementsCallCheck(param) {
  Chai.expect(_executeOutstandingNextPriceSettlementsFunction(undefined)).to.have.been.calledWith(param.user, param.marketIndex);
  
}

function mock_executeOutstandingNextPriceSettlementsToRevert(errorString) {
  checkForExceptions("_executeOutstandingNextPriceSettlements");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._executeOutstandingNextPriceSettlementsMock.reverts(errorString);
          
        }));
  
}

function mock_executeOutstandingNextPriceSettlementsToRevertNoReason(param) {
  checkForExceptions("_executeOutstandingNextPriceSettlements");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._executeOutstandingNextPriceSettlementsMock.reverts();
          
        }));
  
}

function _handleTotalPaymentTokenValueChangeForMarketWithYieldManagerFunction(param) {
  checkForExceptions("_handleTotalPaymentTokenValueChangeForMarketWithYieldManager");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._handleTotalPaymentTokenValueChangeForMarketWithYieldManagerMock;
              }));
}

function _handleTotalPaymentTokenValueChangeForMarketWithYieldManagerCallCheck(param) {
  Chai.expect(_handleTotalPaymentTokenValueChangeForMarketWithYieldManagerFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.totalPaymentTokenValueChangeForMarket);
  
}

function mock_handleTotalPaymentTokenValueChangeForMarketWithYieldManagerToRevert(errorString) {
  checkForExceptions("_handleTotalPaymentTokenValueChangeForMarketWithYieldManager");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._handleTotalPaymentTokenValueChangeForMarketWithYieldManagerMock.reverts(errorString);
          
        }));
  
}

function mock_handleTotalPaymentTokenValueChangeForMarketWithYieldManagerToRevertNoReason(param) {
  checkForExceptions("_handleTotalPaymentTokenValueChangeForMarketWithYieldManager");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._handleTotalPaymentTokenValueChangeForMarketWithYieldManagerMock.reverts();
          
        }));
  
}

function _handleChangeInSyntheticTokensTotalSupplyFunction(param) {
  checkForExceptions("_handleChangeInSyntheticTokensTotalSupply");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._handleChangeInSyntheticTokensTotalSupplyMock;
              }));
}

function _handleChangeInSyntheticTokensTotalSupplyCallCheck(param) {
  Chai.expect(_handleChangeInSyntheticTokensTotalSupplyFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.isLong, param.changeInSyntheticTokensTotalSupply);
  
}

function mock_handleChangeInSyntheticTokensTotalSupplyToRevert(errorString) {
  checkForExceptions("_handleChangeInSyntheticTokensTotalSupply");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._handleChangeInSyntheticTokensTotalSupplyMock.reverts(errorString);
          
        }));
  
}

function mock_handleChangeInSyntheticTokensTotalSupplyToRevertNoReason(param) {
  checkForExceptions("_handleChangeInSyntheticTokensTotalSupply");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._handleChangeInSyntheticTokensTotalSupplyMock.reverts();
          
        }));
  
}

function mock_batchConfirmOutstandingPendingActionsToReturn(_param0, _param1) {
  checkForExceptions("_batchConfirmOutstandingPendingActions");
  Belt_Option.map(internalRef.contents, (function (smockedContract) {
          smockedContract._batchConfirmOutstandingPendingActionsMock.returns([
                _param0,
                _param1
              ]);
          
        }));
  
}

function _batchConfirmOutstandingPendingActionsFunction(param) {
  checkForExceptions("_batchConfirmOutstandingPendingActions");
  return Belt_Option.map(internalRef.contents, (function (contract) {
                return contract._batchConfirmOutstandingPendingActionsMock;
              }));
}

function _batchConfirmOutstandingPendingActionsCallCheck(param) {
  Chai.expect(_batchConfirmOutstandingPendingActionsFunction(undefined)).to.have.been.calledWith(param.marketIndex, param.syntheticTokenPrice_inPaymentTokens_long, param.syntheticTokenPrice_inPaymentTokens_short);
  
}

function mock_batchConfirmOutstandingPendingActionsToRevert(errorString) {
  checkForExceptions("_batchConfirmOutstandingPendingActions");
  Belt_Option.map(internalRef.contents, (function (param) {
          param._batchConfirmOutstandingPendingActionsMock.reverts(errorString);
          
        }));
  
}

function mock_batchConfirmOutstandingPendingActionsToRevertNoReason(param) {
  checkForExceptions("_batchConfirmOutstandingPendingActions");
  Belt_Option.map(internalRef.contents, (function (prim) {
          prim._batchConfirmOutstandingPendingActionsMock.reverts();
          
        }));
  
}

var InternalMock = {
  mockContractName: mockContractName,
  internalRef: internalRef,
  functionToNotMock: functionToNotMock,
  setup: setup,
  setFunctionForUnitTesting: setFunctionForUnitTesting,
  setupFunctionForUnitTesting: setupFunctionForUnitTesting,
  MockingAFunctionThatYouShouldntBe: MockingAFunctionThatYouShouldntBe,
  HaventSetupInternalMockingForLongShort: HaventSetupInternalMockingForLongShort,
  checkForExceptions: checkForExceptions,
  adminOnlyModifierLogicFunction: adminOnlyModifierLogicFunction,
  adminOnlyModifierLogicCallCheck: adminOnlyModifierLogicCallCheck,
  mockAdminOnlyModifierLogicToRevert: mockAdminOnlyModifierLogicToRevert,
  mockAdminOnlyModifierLogicToRevertNoReason: mockAdminOnlyModifierLogicToRevertNoReason,
  requireMarketExistsModifierLogicFunction: requireMarketExistsModifierLogicFunction,
  requireMarketExistsModifierLogicCallCheck: requireMarketExistsModifierLogicCallCheck,
  mockRequireMarketExistsModifierLogicToRevert: mockRequireMarketExistsModifierLogicToRevert,
  mockRequireMarketExistsModifierLogicToRevertNoReason: mockRequireMarketExistsModifierLogicToRevertNoReason,
  initializeFunction: initializeFunction,
  initializeCallCheck: initializeCallCheck$1,
  mockInitializeToRevert: mockInitializeToRevert,
  mockInitializeToRevertNoReason: mockInitializeToRevertNoReason,
  _seedMarketInitiallyFunction: _seedMarketInitiallyFunction,
  _seedMarketInitiallyCallCheck: _seedMarketInitiallyCallCheck,
  mock_seedMarketInitiallyToRevert: mock_seedMarketInitiallyToRevert,
  mock_seedMarketInitiallyToRevertNoReason: mock_seedMarketInitiallyToRevertNoReason,
  mock_getSyntheticTokenPriceToReturn: mock_getSyntheticTokenPriceToReturn,
  _getSyntheticTokenPriceFunction: _getSyntheticTokenPriceFunction,
  _getSyntheticTokenPriceCallCheck: _getSyntheticTokenPriceCallCheck,
  mock_getSyntheticTokenPriceToRevert: mock_getSyntheticTokenPriceToRevert,
  mock_getSyntheticTokenPriceToRevertNoReason: mock_getSyntheticTokenPriceToRevertNoReason,
  mock_getAmountPaymentTokenToReturn: mock_getAmountPaymentTokenToReturn,
  _getAmountPaymentTokenFunction: _getAmountPaymentTokenFunction,
  _getAmountPaymentTokenCallCheck: _getAmountPaymentTokenCallCheck,
  mock_getAmountPaymentTokenToRevert: mock_getAmountPaymentTokenToRevert,
  mock_getAmountPaymentTokenToRevertNoReason: mock_getAmountPaymentTokenToRevertNoReason,
  mock_getAmountSyntheticTokenToReturn: mock_getAmountSyntheticTokenToReturn,
  _getAmountSyntheticTokenFunction: _getAmountSyntheticTokenFunction,
  _getAmountSyntheticTokenCallCheck: _getAmountSyntheticTokenCallCheck,
  mock_getAmountSyntheticTokenToRevert: mock_getAmountSyntheticTokenToRevert,
  mock_getAmountSyntheticTokenToRevertNoReason: mock_getAmountSyntheticTokenToRevertNoReason,
  mock_getEquivalentAmountSyntheticTokensOnTargetSideToReturn: mock_getEquivalentAmountSyntheticTokensOnTargetSideToReturn,
  _getEquivalentAmountSyntheticTokensOnTargetSideFunction: _getEquivalentAmountSyntheticTokensOnTargetSideFunction,
  _getEquivalentAmountSyntheticTokensOnTargetSideCallCheck: _getEquivalentAmountSyntheticTokensOnTargetSideCallCheck,
  mock_getEquivalentAmountSyntheticTokensOnTargetSideToRevert: mock_getEquivalentAmountSyntheticTokensOnTargetSideToRevert,
  mock_getEquivalentAmountSyntheticTokensOnTargetSideToRevertNoReason: mock_getEquivalentAmountSyntheticTokensOnTargetSideToRevertNoReason,
  mockGetAmountSyntheticTokenToMintOnTargetSideToReturn: mockGetAmountSyntheticTokenToMintOnTargetSideToReturn,
  getAmountSyntheticTokenToMintOnTargetSideFunction: getAmountSyntheticTokenToMintOnTargetSideFunction,
  getAmountSyntheticTokenToMintOnTargetSideCallCheck: getAmountSyntheticTokenToMintOnTargetSideCallCheck$1,
  mockGetAmountSyntheticTokenToMintOnTargetSideToRevert: mockGetAmountSyntheticTokenToMintOnTargetSideToRevert,
  mockGetAmountSyntheticTokenToMintOnTargetSideToRevertNoReason: mockGetAmountSyntheticTokenToMintOnTargetSideToRevertNoReason,
  mockGetUsersConfirmedButNotSettledSynthBalanceToReturn: mockGetUsersConfirmedButNotSettledSynthBalanceToReturn,
  getUsersConfirmedButNotSettledSynthBalanceFunction: getUsersConfirmedButNotSettledSynthBalanceFunction,
  getUsersConfirmedButNotSettledSynthBalanceCallCheck: getUsersConfirmedButNotSettledSynthBalanceCallCheck$1,
  mockGetUsersConfirmedButNotSettledSynthBalanceToRevert: mockGetUsersConfirmedButNotSettledSynthBalanceToRevert,
  mockGetUsersConfirmedButNotSettledSynthBalanceToRevertNoReason: mockGetUsersConfirmedButNotSettledSynthBalanceToRevertNoReason,
  mock_getYieldSplitToReturn: mock_getYieldSplitToReturn,
  _getYieldSplitFunction: _getYieldSplitFunction,
  _getYieldSplitCallCheck: _getYieldSplitCallCheck,
  mock_getYieldSplitToRevert: mock_getYieldSplitToRevert,
  mock_getYieldSplitToRevertNoReason: mock_getYieldSplitToRevertNoReason,
  mock_claimAndDistributeYieldThenRebalanceMarketToReturn: mock_claimAndDistributeYieldThenRebalanceMarketToReturn,
  _claimAndDistributeYieldThenRebalanceMarketFunction: _claimAndDistributeYieldThenRebalanceMarketFunction,
  _claimAndDistributeYieldThenRebalanceMarketCallCheck: _claimAndDistributeYieldThenRebalanceMarketCallCheck,
  mock_claimAndDistributeYieldThenRebalanceMarketToRevert: mock_claimAndDistributeYieldThenRebalanceMarketToRevert,
  mock_claimAndDistributeYieldThenRebalanceMarketToRevertNoReason: mock_claimAndDistributeYieldThenRebalanceMarketToRevertNoReason,
  _updateSystemStateInternalFunction: _updateSystemStateInternalFunction,
  _updateSystemStateInternalCallCheck: _updateSystemStateInternalCallCheck,
  mock_updateSystemStateInternalToRevert: mock_updateSystemStateInternalToRevert,
  mock_updateSystemStateInternalToRevertNoReason: mock_updateSystemStateInternalToRevertNoReason,
  _transferPaymentTokensFromUserToYieldManagerFunction: _transferPaymentTokensFromUserToYieldManagerFunction,
  _transferPaymentTokensFromUserToYieldManagerCallCheck: _transferPaymentTokensFromUserToYieldManagerCallCheck,
  mock_transferPaymentTokensFromUserToYieldManagerToRevert: mock_transferPaymentTokensFromUserToYieldManagerToRevert,
  mock_transferPaymentTokensFromUserToYieldManagerToRevertNoReason: mock_transferPaymentTokensFromUserToYieldManagerToRevertNoReason,
  _mintNextPriceFunction: _mintNextPriceFunction,
  _mintNextPriceCallCheck: _mintNextPriceCallCheck,
  mock_mintNextPriceToRevert: mock_mintNextPriceToRevert,
  mock_mintNextPriceToRevertNoReason: mock_mintNextPriceToRevertNoReason,
  _redeemNextPriceFunction: _redeemNextPriceFunction,
  _redeemNextPriceCallCheck: _redeemNextPriceCallCheck,
  mock_redeemNextPriceToRevert: mock_redeemNextPriceToRevert,
  mock_redeemNextPriceToRevertNoReason: mock_redeemNextPriceToRevertNoReason,
  shiftPositionNextPriceFunction: shiftPositionNextPriceFunction,
  shiftPositionNextPriceCallCheck: shiftPositionNextPriceCallCheck$1,
  mockShiftPositionNextPriceToRevert: mockShiftPositionNextPriceToRevert,
  mockShiftPositionNextPriceToRevertNoReason: mockShiftPositionNextPriceToRevertNoReason,
  _executeOutstandingNextPriceMintsFunction: _executeOutstandingNextPriceMintsFunction,
  _executeOutstandingNextPriceMintsCallCheck: _executeOutstandingNextPriceMintsCallCheck,
  mock_executeOutstandingNextPriceMintsToRevert: mock_executeOutstandingNextPriceMintsToRevert,
  mock_executeOutstandingNextPriceMintsToRevertNoReason: mock_executeOutstandingNextPriceMintsToRevertNoReason,
  _executeOutstandingNextPriceRedeemsFunction: _executeOutstandingNextPriceRedeemsFunction,
  _executeOutstandingNextPriceRedeemsCallCheck: _executeOutstandingNextPriceRedeemsCallCheck,
  mock_executeOutstandingNextPriceRedeemsToRevert: mock_executeOutstandingNextPriceRedeemsToRevert,
  mock_executeOutstandingNextPriceRedeemsToRevertNoReason: mock_executeOutstandingNextPriceRedeemsToRevertNoReason,
  _executeOutstandingNextPriceTokenShiftsFunction: _executeOutstandingNextPriceTokenShiftsFunction,
  _executeOutstandingNextPriceTokenShiftsCallCheck: _executeOutstandingNextPriceTokenShiftsCallCheck,
  mock_executeOutstandingNextPriceTokenShiftsToRevert: mock_executeOutstandingNextPriceTokenShiftsToRevert,
  mock_executeOutstandingNextPriceTokenShiftsToRevertNoReason: mock_executeOutstandingNextPriceTokenShiftsToRevertNoReason,
  _executeOutstandingNextPriceSettlementsFunction: _executeOutstandingNextPriceSettlementsFunction,
  _executeOutstandingNextPriceSettlementsCallCheck: _executeOutstandingNextPriceSettlementsCallCheck,
  mock_executeOutstandingNextPriceSettlementsToRevert: mock_executeOutstandingNextPriceSettlementsToRevert,
  mock_executeOutstandingNextPriceSettlementsToRevertNoReason: mock_executeOutstandingNextPriceSettlementsToRevertNoReason,
  _handleTotalPaymentTokenValueChangeForMarketWithYieldManagerFunction: _handleTotalPaymentTokenValueChangeForMarketWithYieldManagerFunction,
  _handleTotalPaymentTokenValueChangeForMarketWithYieldManagerCallCheck: _handleTotalPaymentTokenValueChangeForMarketWithYieldManagerCallCheck,
  mock_handleTotalPaymentTokenValueChangeForMarketWithYieldManagerToRevert: mock_handleTotalPaymentTokenValueChangeForMarketWithYieldManagerToRevert,
  mock_handleTotalPaymentTokenValueChangeForMarketWithYieldManagerToRevertNoReason: mock_handleTotalPaymentTokenValueChangeForMarketWithYieldManagerToRevertNoReason,
  _handleChangeInSyntheticTokensTotalSupplyFunction: _handleChangeInSyntheticTokensTotalSupplyFunction,
  _handleChangeInSyntheticTokensTotalSupplyCallCheck: _handleChangeInSyntheticTokensTotalSupplyCallCheck,
  mock_handleChangeInSyntheticTokensTotalSupplyToRevert: mock_handleChangeInSyntheticTokensTotalSupplyToRevert,
  mock_handleChangeInSyntheticTokensTotalSupplyToRevertNoReason: mock_handleChangeInSyntheticTokensTotalSupplyToRevertNoReason,
  mock_batchConfirmOutstandingPendingActionsToReturn: mock_batchConfirmOutstandingPendingActionsToReturn,
  _batchConfirmOutstandingPendingActionsFunction: _batchConfirmOutstandingPendingActionsFunction,
  _batchConfirmOutstandingPendingActionsCallCheck: _batchConfirmOutstandingPendingActionsCallCheck,
  mock_batchConfirmOutstandingPendingActionsToRevert: mock_batchConfirmOutstandingPendingActionsToRevert,
  mock_batchConfirmOutstandingPendingActionsToRevertNoReason: mock_batchConfirmOutstandingPendingActionsToRevertNoReason
};

var uninitializedValue;

exports.make = make;
exports.uninitializedValue = uninitializedValue;
exports.aDMIN_ROLEOld = aDMIN_ROLEOld;
exports.aDMIN_ROLECallCheck = aDMIN_ROLECallCheck;
exports.dEFAULT_ADMIN_ROLEOld = dEFAULT_ADMIN_ROLEOld;
exports.dEFAULT_ADMIN_ROLECallCheck = dEFAULT_ADMIN_ROLECallCheck;
exports.pERMANENT_INITIAL_LIQUIDITY_HOLDEROld = pERMANENT_INITIAL_LIQUIDITY_HOLDEROld;
exports.pERMANENT_INITIAL_LIQUIDITY_HOLDERCallCheck = pERMANENT_INITIAL_LIQUIDITY_HOLDERCallCheck;
exports.uPGRADER_ROLEOld = uPGRADER_ROLEOld;
exports.uPGRADER_ROLECallCheck = uPGRADER_ROLECallCheck;
exports.assetPriceOld = assetPriceOld;
exports.assetPriceCallCheck = assetPriceCallCheck;
exports.batched_amountPaymentToken_depositOld = batched_amountPaymentToken_depositOld;
exports.batched_amountPaymentToken_depositCallCheck = batched_amountPaymentToken_depositCallCheck;
exports.batched_amountSyntheticToken_redeemOld = batched_amountSyntheticToken_redeemOld;
exports.batched_amountSyntheticToken_redeemCallCheck = batched_amountSyntheticToken_redeemCallCheck;
exports.batched_amountSyntheticToken_toShiftAwayFrom_marketSideOld = batched_amountSyntheticToken_toShiftAwayFrom_marketSideOld;
exports.batched_amountSyntheticToken_toShiftAwayFrom_marketSideCallCheck = batched_amountSyntheticToken_toShiftAwayFrom_marketSideCallCheck;
exports.changeMarketTreasurySplitGradientOld = changeMarketTreasurySplitGradientOld;
exports.changeMarketTreasurySplitGradientCallCheck = changeMarketTreasurySplitGradientCallCheck;
exports.createNewSyntheticMarketOld = createNewSyntheticMarketOld;
exports.createNewSyntheticMarketCallCheck = createNewSyntheticMarketCallCheck;
exports.createNewSyntheticMarketExternalSyntheticTokensOld = createNewSyntheticMarketExternalSyntheticTokensOld;
exports.createNewSyntheticMarketExternalSyntheticTokensCallCheck = createNewSyntheticMarketExternalSyntheticTokensCallCheck;
exports.executeOutstandingNextPriceSettlementsUserOld = executeOutstandingNextPriceSettlementsUserOld;
exports.executeOutstandingNextPriceSettlementsUserCallCheck = executeOutstandingNextPriceSettlementsUserCallCheck;
exports.executeOutstandingNextPriceSettlementsUserMultiOld = executeOutstandingNextPriceSettlementsUserMultiOld;
exports.executeOutstandingNextPriceSettlementsUserMultiCallCheck = executeOutstandingNextPriceSettlementsUserMultiCallCheck;
exports.getAmountSyntheticTokenToMintOnTargetSideOld = getAmountSyntheticTokenToMintOnTargetSideOld;
exports.getAmountSyntheticTokenToMintOnTargetSideCallCheck = getAmountSyntheticTokenToMintOnTargetSideCallCheck;
exports.getRoleAdminOld = getRoleAdminOld;
exports.getRoleAdminCallCheck = getRoleAdminCallCheck;
exports.getUsersConfirmedButNotSettledSynthBalanceOld = getUsersConfirmedButNotSettledSynthBalanceOld;
exports.getUsersConfirmedButNotSettledSynthBalanceCallCheck = getUsersConfirmedButNotSettledSynthBalanceCallCheck;
exports.grantRoleOld = grantRoleOld;
exports.grantRoleCallCheck = grantRoleCallCheck;
exports.hasRoleOld = hasRoleOld;
exports.hasRoleCallCheck = hasRoleCallCheck;
exports.initializeOld = initializeOld;
exports.initializeCallCheck = initializeCallCheck;
exports.initializeMarketOld = initializeMarketOld;
exports.initializeMarketCallCheck = initializeMarketCallCheck;
exports.latestMarketOld = latestMarketOld;
exports.latestMarketCallCheck = latestMarketCallCheck;
exports.marketExistsOld = marketExistsOld;
exports.marketExistsCallCheck = marketExistsCallCheck;
exports.marketSideValueInPaymentTokenOld = marketSideValueInPaymentTokenOld;
exports.marketSideValueInPaymentTokenCallCheck = marketSideValueInPaymentTokenCallCheck;
exports.marketTreasurySplitGradient_e18Old = marketTreasurySplitGradient_e18Old;
exports.marketTreasurySplitGradient_e18CallCheck = marketTreasurySplitGradient_e18CallCheck;
exports.marketUpdateIndexOld = marketUpdateIndexOld;
exports.marketUpdateIndexCallCheck = marketUpdateIndexCallCheck;
exports.mintLongNextPriceOld = mintLongNextPriceOld;
exports.mintLongNextPriceCallCheck = mintLongNextPriceCallCheck;
exports.mintShortNextPriceOld = mintShortNextPriceOld;
exports.mintShortNextPriceCallCheck = mintShortNextPriceCallCheck;
exports.oracleManagersOld = oracleManagersOld;
exports.oracleManagersCallCheck = oracleManagersCallCheck;
exports.paymentTokensOld = paymentTokensOld;
exports.paymentTokensCallCheck = paymentTokensCallCheck;
exports.redeemLongNextPriceOld = redeemLongNextPriceOld;
exports.redeemLongNextPriceCallCheck = redeemLongNextPriceCallCheck;
exports.redeemShortNextPriceOld = redeemShortNextPriceOld;
exports.redeemShortNextPriceCallCheck = redeemShortNextPriceCallCheck;
exports.renounceRoleOld = renounceRoleOld;
exports.renounceRoleCallCheck = renounceRoleCallCheck;
exports.revokeRoleOld = revokeRoleOld;
exports.revokeRoleCallCheck = revokeRoleCallCheck;
exports.shiftPositionFromLongNextPriceOld = shiftPositionFromLongNextPriceOld;
exports.shiftPositionFromLongNextPriceCallCheck = shiftPositionFromLongNextPriceCallCheck;
exports.shiftPositionFromShortNextPriceOld = shiftPositionFromShortNextPriceOld;
exports.shiftPositionFromShortNextPriceCallCheck = shiftPositionFromShortNextPriceCallCheck;
exports.shiftPositionNextPriceOld = shiftPositionNextPriceOld;
exports.shiftPositionNextPriceCallCheck = shiftPositionNextPriceCallCheck;
exports.stakerOld = stakerOld;
exports.stakerCallCheck = stakerCallCheck;
exports.supportsInterfaceOld = supportsInterfaceOld;
exports.supportsInterfaceCallCheck = supportsInterfaceCallCheck;
exports.syntheticToken_priceSnapshotOld = syntheticToken_priceSnapshotOld;
exports.syntheticToken_priceSnapshotCallCheck = syntheticToken_priceSnapshotCallCheck;
exports.syntheticTokensOld = syntheticTokensOld;
exports.syntheticTokensCallCheck = syntheticTokensCallCheck;
exports.tokenFactoryOld = tokenFactoryOld;
exports.tokenFactoryCallCheck = tokenFactoryCallCheck;
exports.updateMarketOracleOld = updateMarketOracleOld;
exports.updateMarketOracleCallCheck = updateMarketOracleCallCheck;
exports.updateSystemStateOld = updateSystemStateOld;
exports.updateSystemStateCallCheck = updateSystemStateCallCheck;
exports.updateSystemStateMultiOld = updateSystemStateMultiOld;
exports.updateSystemStateMultiCallCheck = updateSystemStateMultiCallCheck;
exports.upgradeToOld = upgradeToOld;
exports.upgradeToCallCheck = upgradeToCallCheck;
exports.upgradeToAndCallOld = upgradeToAndCallOld;
exports.upgradeToAndCallCallCheck = upgradeToAndCallCallCheck;
exports.userNextPrice_currentUpdateIndexOld = userNextPrice_currentUpdateIndexOld;
exports.userNextPrice_currentUpdateIndexCallCheck = userNextPrice_currentUpdateIndexCallCheck;
exports.userNextPrice_paymentToken_depositAmountOld = userNextPrice_paymentToken_depositAmountOld;
exports.userNextPrice_paymentToken_depositAmountCallCheck = userNextPrice_paymentToken_depositAmountCallCheck;
exports.userNextPrice_syntheticToken_redeemAmountOld = userNextPrice_syntheticToken_redeemAmountOld;
exports.userNextPrice_syntheticToken_redeemAmountCallCheck = userNextPrice_syntheticToken_redeemAmountCallCheck;
exports.userNextPrice_syntheticToken_toShiftAwayFrom_marketSideOld = userNextPrice_syntheticToken_toShiftAwayFrom_marketSideOld;
exports.userNextPrice_syntheticToken_toShiftAwayFrom_marketSideCallCheck = userNextPrice_syntheticToken_toShiftAwayFrom_marketSideCallCheck;
exports.yieldManagersOld = yieldManagersOld;
exports.yieldManagersCallCheck = yieldManagersCallCheck;
exports.InternalMock = InternalMock;
/*  Not a pure module */
