// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chai = require("./bindings/chai/Chai.js");
var LetOps = require("./library/LetOps.js");
var Globals = require("./library/Globals.js");
var Helpers = require("./library/Helpers.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var HelperActions = require("./library/HelperActions.js");
var CalculateAccumulatedFloat = require("./tests/stake/CalculateAccumulatedFloat.js");

Globals.describe("Float System")(undefined, undefined, undefined, (function (param) {
        Globals.describe("Staking")(undefined, undefined, undefined, (function (param) {
                var contracts = {
                  contents: undefined
                };
                var accounts = {
                  contents: undefined
                };
                Globals.before(undefined)(undefined, undefined, undefined, (function (param) {
                        return LetOps.Await.let_(ethers.getSigners(), (function (loadedAccounts) {
                                      accounts.contents = loadedAccounts;
                                      
                                    }));
                      }));
                Globals.before_each(undefined)(undefined, undefined, undefined, (function (param) {
                        return LetOps.Await.let_(Helpers.inititialize(accounts.contents[0], false), (function (deployedContracts) {
                                      contracts.contents = deployedContracts;
                                      
                                    }));
                      }));
                return Globals.it$prime("should correctly be able to stake their long/short tokens and view their staked amount immediately")(undefined, undefined, undefined, (function (param) {
                              var match = contracts.contents;
                              var staker = match.staker;
                              var testUser = accounts.contents[1];
                              return LetOps.Await.let_(HelperActions.stakeRandomlyInMarkets(match.markets, testUser, match.longShort), (function (param) {
                                            return LetOps.Await.let_(Promise.all(Belt_Array.map(param[0], (function (stake) {
                                                                  return LetOps.Await.let_(staker.userAmountStaked(stake.synth.address, testUser.address), (function (amountStaked) {
                                                                                return Chai.bnEqual(undefined, amountStaked, stake.amount);
                                                                              }));
                                                                }))), (function (param) {
                                                          
                                                        }));
                                          }));
                            }));
              }));
        return Globals.describe("Staking - internals exposed")(undefined, undefined, undefined, (function (param) {
                      var contracts = {
                        contents: undefined
                      };
                      var accounts = {
                        contents: undefined
                      };
                      Globals.before(undefined)(undefined, undefined, undefined, (function (param) {
                              return LetOps.Await.let_(ethers.getSigners(), (function (loadedAccounts) {
                                            accounts.contents = loadedAccounts;
                                            
                                          }));
                            }));
                      Globals.before_each(undefined)(undefined, undefined, undefined, (function (param) {
                              return LetOps.Await.let_(Helpers.inititialize(accounts.contents[0], true), (function (deployedContracts) {
                                            contracts.contents = deployedContracts;
                                            
                                          }));
                            }));
                      return CalculateAccumulatedFloat.test(contracts);
                    }));
      }));

/*  Not a pure module */
