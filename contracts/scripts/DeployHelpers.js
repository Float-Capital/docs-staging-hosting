// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var LetOps = require("../test-waffle/library/LetOps.js");
var Globals = require("../test-waffle/library/Globals.js");
var YieldManagerMock = require("../test-waffle/library/contracts/YieldManagerMock.js");
var OracleManagerMock = require("../test-waffle/library/contracts/OracleManagerMock.js");

var minSenderBalance = Globals.bnFromString("50000000000000000");

var minRecieverBalance = Globals.bnFromString("20000000000000000");

function topupBalanceIfLow(from, to_) {
  return LetOps.AwaitThen.let_(from.getBalance(), (function (senderBalance) {
                console.log({
                      "sender balance": Globals.bnToString(senderBalance)
                    });
                if (Globals.bnLt(senderBalance, minSenderBalance)) {
                  console.log("WARNING - Sender doesn't have enough eth - need at least 0.05 ETH! (top up to over 1 ETH to be safe)");
                }
                return LetOps.Await.let_(to_.getBalance(), (function (recieverBalance) {
                              if (Globals.bnLt(recieverBalance, minRecieverBalance)) {
                                from.sendTransaction({
                                      to_: to_.address,
                                      value: minRecieverBalance
                                    });
                                return ;
                              }
                              
                            }));
              }));
}

function mintAndApprove(token, amount, user, approvedAddress) {
  return LetOps.AwaitThen.let_(token.mint(user.address, amount), (function (param) {
                return token.connect(user).approve(approvedAddress, amount);
              }));
}

function deployTestMarket(syntheticName, syntheticSymbol, longShortInstance, treasuryInstance, admin, networkName, paymentToken) {
  return LetOps.AwaitThen.let_(OracleManagerMock.make(admin.address), (function (oracleManager) {
                return LetOps.AwaitThen.let_(YieldManagerMock.make(longShortInstance.address, treasuryInstance.address, paymentToken.address), (function (yieldManager) {
                              return LetOps.AwaitThen.let_(paymentToken.MINTER_ROLE(), (function (mintRole) {
                                            return LetOps.AwaitThen.let_(paymentToken.grantRole(mintRole, yieldManager.address), (function (param) {
                                                          return LetOps.AwaitThen.let_(longShortInstance.createNewSyntheticMarket(syntheticName, syntheticSymbol, paymentToken.address, oracleManager.address, yieldManager.address), (function (param) {
                                                                        return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                                                                                      var kInitialMultiplier = Globals.bnFromString("5000000000000000000");
                                                                                      var kPeriod = Globals.bnFromInt(864000);
                                                                                      return LetOps.AwaitThen.let_(mintAndApprove(paymentToken, Globals.bnFromString("2000000000000000000"), admin, longShortInstance.address), (function (param) {
                                                                                                    var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                                                                    var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                                                                    return longShortInstance.initializeMarket(latestMarket, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), Globals.bnFromInt(1));
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

exports.minSenderBalance = minSenderBalance;
exports.minRecieverBalance = minRecieverBalance;
exports.topupBalanceIfLow = topupBalanceIfLow;
exports.mintAndApprove = mintAndApprove;
exports.deployTestMarket = deployTestMarket;
/* minSenderBalance Not a pure module */
