// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var LetOps = require("../test-waffle/library/LetOps.js");
var Globals = require("../test-waffle/library/Globals.js");
var DeployHelpers = require("./DeployHelpers.js");

function runTestTransactions(param, deploymentArgs) {
  var treasury = param.treasury;
  var paymentToken = param.paymentToken;
  var longShort = param.longShort;
  var staker = param.staker;
  return LetOps.AwaitThen.let_(Curry._1(deploymentArgs.getNamedAccounts, undefined), (function (namedAccounts) {
                return LetOps.AwaitThen.let_(deploymentArgs.deployments.deploy("SyntheticTokenUpgradeable", {
                                from: namedAccounts.deployer,
                                log: true,
                                proxy: {
                                  proxyContract: "UUPSProxy",
                                  initializer: true,
                                  args: [
                                    "Name",
                                    "SMBL",
                                    longShort.address,
                                    staker.address,
                                    1,
                                    true
                                  ]
                                }
                              }), (function (_exampleSyntheticToken) {
                              return LetOps.Await.let_(ethers.getSigners(), (function (loadedAccounts) {
                                            var admin = loadedAccounts[1];
                                            var user1 = loadedAccounts[2];
                                            var user2 = loadedAccounts[3];
                                            var user3 = loadedAccounts[4];
                                            return LetOps.AwaitThen.let_(DeployHelpers.topupBalanceIfLow(admin, user1), (function (param) {
                                                          return LetOps.AwaitThen.let_(DeployHelpers.topupBalanceIfLow(admin, user2), (function (param) {
                                                                        return LetOps.AwaitThen.let_(DeployHelpers.topupBalanceIfLow(admin, user3), (function (param) {
                                                                                      console.log("deploying markets");
                                                                                      return LetOps.AwaitThen.let_(DeployHelpers.deployTestMarket("Eth Market", "FL_ETH", longShort, treasury, admin, paymentToken), (function (param) {
                                                                                                    return LetOps.AwaitThen.let_(DeployHelpers.deployTestMarket("The Flippening", "FL_FLIP", longShort, treasury, admin, paymentToken), (function (param) {
                                                                                                                  return LetOps.AwaitThen.let_(DeployHelpers.deployTestMarket("Doge Market", "FL_DOGE", longShort, treasury, admin, paymentToken), (function (param) {
                                                                                                                                var initialMarkets = [
                                                                                                                                  1,
                                                                                                                                  2,
                                                                                                                                  3
                                                                                                                                ];
                                                                                                                                var longMintAmount = Globals.bnFromString("10000000000000000000");
                                                                                                                                var shortMintAmount = Globals.div(longMintAmount, Globals.bnFromInt(2));
                                                                                                                                var redeemShortAmount = Globals.div(shortMintAmount, Globals.bnFromInt(2));
                                                                                                                                var longStakeAmount = Globals.bnFromInt(1);
                                                                                                                                var priceAndStateUpdate = function (param) {
                                                                                                                                  return LetOps.AwaitThen.let_(DeployHelpers.executeOnMarkets(initialMarkets, (function (__x) {
                                                                                                                                                    return DeployHelpers.setOracleManagerPrice(longShort, __x, admin);
                                                                                                                                                  })), (function (param) {
                                                                                                                                                console.log("Executing update system state");
                                                                                                                                                return DeployHelpers.executeOnMarkets(initialMarkets, (function (__x) {
                                                                                                                                                              return DeployHelpers.updateSystemState(longShort, admin, __x);
                                                                                                                                                            }));
                                                                                                                                              }));
                                                                                                                                };
                                                                                                                                console.log("Executing Long Mints");
                                                                                                                                return LetOps.AwaitThen.let_(DeployHelpers.executeOnMarkets(initialMarkets, (function (__x) {
                                                                                                                                                  return DeployHelpers.mintLongNextPriceWithSystemUpdate(longMintAmount, __x, paymentToken, longShort, user1, admin);
                                                                                                                                                })), (function (param) {
                                                                                                                                              console.log("Executing Short Mints");
                                                                                                                                              return LetOps.AwaitThen.let_(DeployHelpers.executeOnMarkets(initialMarkets, (function (__x) {
                                                                                                                                                                return DeployHelpers.mintShortNextPriceWithSystemUpdate(shortMintAmount, __x, paymentToken, longShort, user1, admin);
                                                                                                                                                              })), (function (param) {
                                                                                                                                                            console.log("Executing Short Position Redeem");
                                                                                                                                                            return LetOps.AwaitThen.let_(DeployHelpers.executeOnMarkets(initialMarkets, (function (__x) {
                                                                                                                                                                              return DeployHelpers.redeemShortNextPriceWithSystemUpdate(redeemShortAmount, __x, longShort, user1, admin);
                                                                                                                                                                            })), (function (param) {
                                                                                                                                                                          return LetOps.AwaitThen.let_(priceAndStateUpdate(undefined), (function (param) {
                                                                                                                                                                                        return LetOps.AwaitThen.let_(DeployHelpers.executeOnMarkets(initialMarkets, (function (__x) {
                                                                                                                                                                                                          return DeployHelpers.mintLongNextPriceWithSystemUpdate(longMintAmount, __x, paymentToken, longShort, user1, admin);
                                                                                                                                                                                                        })), (function (param) {
                                                                                                                                                                                                      return LetOps.AwaitThen.let_(DeployHelpers.executeOnMarkets(initialMarkets, (function (__x) {
                                                                                                                                                                                                                        return DeployHelpers.shiftFromShortNextPriceWithSystemUpdate(redeemShortAmount, __x, longShort, user1, admin);
                                                                                                                                                                                                                      })), (function (param) {
                                                                                                                                                                                                                    return LetOps.AwaitThen.let_(priceAndStateUpdate(undefined), (function (param) {
                                                                                                                                                                                                                                  console.log("Staking long position");
                                                                                                                                                                                                                                  return LetOps.AwaitThen.let_(DeployHelpers.executeOnMarkets(initialMarkets, (function (__x) {
                                                                                                                                                                                                                                                    return DeployHelpers.stakeSynthLong(longStakeAmount, longShort, __x, user1);
                                                                                                                                                                                                                                                  })), (function (param) {
                                                                                                                                                                                                                                                return LetOps.AwaitThen.let_(priceAndStateUpdate(undefined), (function (param) {
                                                                                                                                                                                                                                                              return Promise.resolve(undefined);
                                                                                                                                                                                                                                                            }));
                                                                                                                                                                                                                                              }));
                                                                                                                                                                                                                                }));
                                                                                                                                                                                                                  }));
                                                                                                                                                                                                    }));
                                                                                                                                                                                      }));
                                                                                                                                                                        }));
                                                                                                                                                          }));
                                                                                                                                            }));
                                                                                                                              }));
                                                                                                                }));
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

exports.runTestTransactions = runTestTransactions;
/* Globals Not a pure module */
