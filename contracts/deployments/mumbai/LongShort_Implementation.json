{
  "address": "0x7a1ae3824e07656419b1B765c0917D4948fC4c3B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "ExecuteNextPriceSettlementsUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenFactory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "LongShortV1",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialSeed",
          "type": "uint256"
        }
      ],
      "name": "NewMarketLaunchedAndSeeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAdded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleUpdateIndex",
          "type": "uint256"
        }
      ],
      "name": "NextPriceDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "synthRedeemed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleUpdateIndex",
          "type": "uint256"
        }
      ],
      "name": "NextPriceRedeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isShiftFromLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "synthShifted",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleUpdateIndex",
          "type": "uint256"
        }
      ],
      "name": "NextPriceSyntheticPositionShift",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOracleAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "OracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "longTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "shortTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "initialAssetPrice",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "yieldManagerAddress",
          "type": "address"
        }
      ],
      "name": "SyntheticMarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updateIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "underlyingAssetPrice",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "longValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shortValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "longPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shortPrice",
          "type": "uint256"
        }
      ],
      "name": "SystemStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMANENT_INITIAL_LIQUIDITY_HOLDER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "assetPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "batched_amountPaymentToken_deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "batched_amountSyntheticToken_redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "batched_amountSyntheticToken_toShiftAwayFrom_marketSide",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_marketTreasurySplitGradient_e18",
          "type": "uint256"
        }
      ],
      "name": "changeMarketTreasurySplitGradient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "syntheticName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "syntheticSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yieldManager",
          "type": "address"
        }
      ],
      "name": "createNewSyntheticMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "syntheticName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "syntheticSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_longToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shortToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yieldManager",
          "type": "address"
        }
      ],
      "name": "createNewSyntheticMarketExternalSyntheticTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "executeOutstandingNextPriceSettlementsUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "marketIndexes",
          "type": "uint32[]"
        }
      ],
      "name": "executeOutstandingNextPriceSettlementsUserMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amountSyntheticToken_redeemOnOriginSide",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isShiftFromLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "priceSnapshotIndex",
          "type": "uint256"
        }
      ],
      "name": "getAmountSyntheticTokenToMintOnTargetSide",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountSyntheticTokensToMintOnTargetSide",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "getUsersConfirmedButNotSettledSynthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "confirmedButNotSettledBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "kInitialMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeFee_e18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialMarketSeedForEachMarketSide",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceIncentiveCurve_exponent",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "balanceIncentiveCurve_equilibriumOffset",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_marketTreasurySplitGradient_e18",
          "type": "uint256"
        }
      ],
      "name": "initializeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestMarket",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "marketExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "marketSideValueInPaymentToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "marketTreasurySplitGradient_e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "marketUpdateIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintLongNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintShortNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "oracleManagers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "paymentTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "tokens_redeem",
          "type": "uint256"
        }
      ],
      "name": "redeemLongNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "tokens_redeem",
          "type": "uint256"
        }
      ],
      "name": "redeemShortNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amountSyntheticTokensToShift",
          "type": "uint256"
        }
      ],
      "name": "shiftPositionFromLongNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amountSyntheticTokensToShift",
          "type": "uint256"
        }
      ],
      "name": "shiftPositionFromShortNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amountSyntheticTokensToShift",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isShiftFromLong",
          "type": "bool"
        }
      ],
      "name": "shiftPositionNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "syntheticToken_priceSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "syntheticTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_newOracleManager",
          "type": "address"
        }
      ],
      "name": "updateMarketOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "updateSystemState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "marketIndexes",
          "type": "uint32[]"
        }
      ],
      "name": "updateSystemStateMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNextPrice_currentUpdateIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNextPrice_paymentToken_depositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNextPrice_syntheticToken_redeemAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNextPrice_syntheticToken_toShiftAwayFrom_marketSide",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "yieldManagers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa77ceb43438d55df5aea10c2f349c97efdacc037cbf79c83058093f87367e97b",
  "receipt": {
    "to": null,
    "from": "0x738edd7F6a625C02030DbFca84885b4De5252903",
    "contractAddress": "0x7a1ae3824e07656419b1B765c0917D4948fC4c3B",
    "transactionIndex": 1,
    "gasUsed": "4273342",
    "logsBloom": "0x
    "blockHash": "0x95bf4debb176c4ab0f3b50970dba373c0a3732041f8130ef8a9e88d19c88950f",
    "transactionHash": "0xa77ceb43438d55df5aea10c2f349c97efdacc037cbf79c83058093f87367e97b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 18504301,
        "transactionHash": "0xa77ceb43438d55df5aea10c2f349c97efdacc037cbf79c83058093f87367e97b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000738edd7f6a625c02030dbfca84885b4de5252903",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000b62efb9ef71000000000000000000000000000000000000000000000000000137c090cd793a2cd00000000000000000000000000000000000000000000015a5aa14b693627e01800000000000000000000000000000000000000000000000012c5da11389c92cd00000000000000000000000000000000000000000000015a5b577a64d51ef018",
        "logIndex": 1,
        "blockHash": "0x95bf4debb176c4ab0f3b50970dba373c0a3732041f8130ef8a9e88d19c88950f"
      }
    ],
    "blockNumber": 18504301,
    "cumulativeGasUsed": "4365522",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7318db9058d08bfb220c028ef0ea41c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"ExecuteNextPriceSettlementsUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"LongShortV1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialSeed\",\"type\":\"uint256\"}],\"name\":\"NewMarketLaunchedAndSeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleUpdateIndex\",\"type\":\"uint256\"}],\"name\":\"NextPriceDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"synthRedeemed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleUpdateIndex\",\"type\":\"uint256\"}],\"name\":\"NextPriceRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isShiftFromLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"synthShifted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleUpdateIndex\",\"type\":\"uint256\"}],\"name\":\"NextPriceSyntheticPositionShift\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"longTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shortTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"initialAssetPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldManagerAddress\",\"type\":\"address\"}],\"name\":\"SyntheticMarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"underlyingAssetPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortPrice\",\"type\":\"uint256\"}],\"name\":\"SystemStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMANENT_INITIAL_LIQUIDITY_HOLDER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"assetPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"batched_amountPaymentToken_deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"batched_amountSyntheticToken_redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"batched_amountSyntheticToken_toShiftAwayFrom_marketSide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_marketTreasurySplitGradient_e18\",\"type\":\"uint256\"}],\"name\":\"changeMarketTreasurySplitGradient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"syntheticName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"syntheticSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldManager\",\"type\":\"address\"}],\"name\":\"createNewSyntheticMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"syntheticName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"syntheticSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_longToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shortToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldManager\",\"type\":\"address\"}],\"name\":\"createNewSyntheticMarketExternalSyntheticTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"executeOutstandingNextPriceSettlementsUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"marketIndexes\",\"type\":\"uint32[]\"}],\"name\":\"executeOutstandingNextPriceSettlementsUserMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountSyntheticToken_redeemOnOriginSide\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isShiftFromLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"priceSnapshotIndex\",\"type\":\"uint256\"}],\"name\":\"getAmountSyntheticTokenToMintOnTargetSide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSyntheticTokensToMintOnTargetSide\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"getUsersConfirmedButNotSettledSynthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"confirmedButNotSettledBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"kInitialMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeFee_e18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMarketSeedForEachMarketSide\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceIncentiveCurve_exponent\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"balanceIncentiveCurve_equilibriumOffset\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_marketTreasurySplitGradient_e18\",\"type\":\"uint256\"}],\"name\":\"initializeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestMarket\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"marketExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"marketSideValueInPaymentToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"marketTreasurySplitGradient_e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"marketUpdateIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintLongNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintShortNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"oracleManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"paymentTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tokens_redeem\",\"type\":\"uint256\"}],\"name\":\"redeemLongNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tokens_redeem\",\"type\":\"uint256\"}],\"name\":\"redeemShortNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountSyntheticTokensToShift\",\"type\":\"uint256\"}],\"name\":\"shiftPositionFromLongNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountSyntheticTokensToShift\",\"type\":\"uint256\"}],\"name\":\"shiftPositionFromShortNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountSyntheticTokensToShift\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isShiftFromLong\",\"type\":\"bool\"}],\"name\":\"shiftPositionNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"syntheticToken_priceSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"syntheticTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newOracleManager\",\"type\":\"address\"}],\"name\":\"updateMarketOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"updateSystemState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"marketIndexes\",\"type\":\"uint32[]\"}],\"name\":\"updateSystemStateMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNextPrice_currentUpdateIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNextPrice_paymentToken_depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNextPrice_syntheticToken_redeemAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNextPrice_syntheticToken_toShiftAwayFrom_marketSide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"yieldManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"float.capital\",\"custom:auditors\":\"This contract balances long and short sides.\",\"details\":\"All functions in this file are currently `virtual`. This is NOT to encourage inheritance. It is merely for convenince when unit testing.\",\"kind\":\"dev\",\"methods\":{\"createNewSyntheticMarket(string,string,address,address,address)\":{\"details\":\"This does not make the market active. The `initializeMarket` function was split out separately to this function to reduce costs.\",\"params\":{\"_oracleManager\":\"The address of the oracle manager that provides the price feed for this market\",\"_paymentToken\":\"The address of the erc20 token used to buy this synthetic asset this will likely always be DAI\",\"_yieldManager\":\"The contract that manages depositing the paymentToken into a yield bearing protocol\",\"syntheticName\":\"Name of the synthetic asset\",\"syntheticSymbol\":\"Symbol for the synthetic asset\"}},\"createNewSyntheticMarketExternalSyntheticTokens(string,string,address,address,address,address,address)\":{\"details\":\"This does not make the market active. The `initializeMarket` function was split out separately to this function to reduce costs.\",\"params\":{\"_longToken\":\"Address for the long token.\",\"_oracleManager\":\"The address of the oracle manager that provides the price feed for this market\",\"_paymentToken\":\"The address of the erc20 token used to buy this synthetic asset this will likely always be DAI\",\"_shortToken\":\"Address for the short token.\",\"_yieldManager\":\"The contract that manages depositing the paymentToken into a yield bearing protocol\",\"syntheticName\":\"Name of the synthetic asset\",\"syntheticSymbol\":\"Symbol for the synthetic asset\"}},\"executeOutstandingNextPriceSettlementsUser(address,uint32)\":{\"params\":{\"marketIndex\":\"An uint32 which uniquely identifies a market.\",\"user\":\"The address of the user for whom to execute the function.\"}},\"executeOutstandingNextPriceSettlementsUserMulti(address,uint32[])\":{\"params\":{\"marketIndexes\":\"An array of int32s which each uniquely identify a market.\",\"user\":\"The address of the user for whom to execute the function.\"}},\"getAmountSyntheticTokenToMintOnTargetSide(uint32,uint256,bool,uint256)\":{\"details\":\"Intended for use primarily by Staker.sol\",\"params\":{\"amountSyntheticToken_redeemOnOriginSide\":\"Amount of synth token in wei.\",\"isShiftFromLong\":\"Whether the token shift is from long to short (true), or short to long (false).\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\",\"priceSnapshotIndex\":\"Index which identifies which synth prices to use.\"},\"returns\":{\"amountSyntheticTokensToMintOnTargetSide\":\"The amount in wei of tokens for the other side that the shift was worth.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getUsersConfirmedButNotSettledSynthBalance(address,uint32,bool)\":{\"details\":\"Used in SyntheticToken.sol balanceOf to allow for automatic reflection of next price actions.\",\"params\":{\"isLong\":\"Whether it is for the long synthetic asset or the short synthetic asset.\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\",\"user\":\"The address of the user for whom to execute the function for.\"},\"returns\":{\"confirmedButNotSettledBalance\":\"The amount in wei of tokens that the user is owed.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address)\":{\"details\":\"Calls OpenZeppelin's initializer modifier.\",\"params\":{\"_admin\":\"Address of the admin role.\",\"_staker\":\"Address of the contract which handles synthetic asset stakes.\",\"_tokenFactory\":\"Address of the contract which creates synthetic asset tokens.\"}},\"initializeMarket(uint32,uint256,uint256,uint256,uint256,uint256,int256,uint256)\":{\"details\":\"Seperated from createNewSyntheticMarket due to gas considerations.\",\"params\":{\"balanceIncentiveCurve_equilibriumOffset\":\"An offset to account for naturally imbalanced markets when Float token issuance should differ for market sides. See Staker.sol\",\"balanceIncentiveCurve_exponent\":\"Sets the degree to which Float token issuance differs for market sides in unbalanced markets. See Staker.sol\",\"initialMarketSeedForEachMarketSide\":\"Amount of payment token that will be deposited in each market side to seed the market.\",\"kInitialMultiplier\":\"Linearly decreasing multiplier for Float token issuance for the market when staking synths.\",\"kPeriod\":\"Time which kInitialMultiplier will last\",\"marketIndex\":\"An int32 which uniquely identifies the market.\",\"unstakeFee_e18\":\"Base 1e18 percentage fee levied when unstaking for the market.\"}},\"mintLongNextPrice(uint32,uint256)\":{\"params\":{\"amount\":\"Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"mintShortNextPrice(uint32,uint256)\":{\"params\":{\"amount\":\"Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"redeemLongNextPrice(uint32,uint256)\":{\"params\":{\"marketIndex\":\"An uint32 which uniquely identifies a market.\",\"tokens_redeem\":\"Amount in wei of synth tokens to redeem at the next oracle price.\"}},\"redeemShortNextPrice(uint32,uint256)\":{\"params\":{\"marketIndex\":\"An uint32 which uniquely identifies a market.\",\"tokens_redeem\":\"Amount in wei of synth tokens to redeem at the next oracle price.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"shiftPositionFromLongNextPrice(uint32,uint256)\":{\"params\":{\"amountSyntheticTokensToShift\":\"Amount in wei of synthetic tokens to shift from long to short the next oracle price update.\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"shiftPositionFromShortNextPrice(uint32,uint256)\":{\"params\":{\"amountSyntheticTokensToShift\":\"Amount in wei of synthetic tokens to shift from the short to long at the next oracle price update.\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"shiftPositionNextPrice(uint32,uint256,bool)\":{\"details\":\"Called by external functions to shift either way. Intended for primary use by Staker.sol\",\"params\":{\"amountSyntheticTokensToShift\":\"Amount in wei of synthetic tokens to shift from the one side to the other at the next oracle price update.\",\"isShiftFromLong\":\"Whether the token shift is from long to short (true), or short to long (false).\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateMarketOracle(uint32,address)\":{\"details\":\"Can only be called by the current admin.\",\"params\":{\"_newOracleManager\":\"Address of the replacement oracle manager.\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"updateSystemState(uint32)\":{\"params\":{\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"updateSystemStateMulti(uint32[])\":{\"params\":{\"marketIndexes\":\"An array of int32s which uniquely identify markets.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"PERMANENT_INITIAL_LIQUIDITY_HOLDER\":{\"details\":\"f10a7 spells float in hex - for fun - important part is that the private key for this address in not known.\"},\"__constantsGap\":{\"details\":\"an empty allocation of storage for use in future upgrades - inspiration from OZ:      https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/10f0f1a95b1b0fd5520351886bae7a03490f1056/contracts/token/ERC20/ERC20Upgradeable.sol#L361\"}},\"title\":\"Core logic of Float Protocal markets\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"PERMANENT_INITIAL_LIQUIDITY_HOLDER()\":{\"notice\":\"this is the address that permanently locked initial liquidity for markets is held by. These tokens will never move so market can never have zero liquidity on a side.\"},\"changeMarketTreasurySplitGradient(uint32,uint256)\":{\"notice\":\"changes the gradient of the line for determining the yield split between market and treasury.\"},\"createNewSyntheticMarket(string,string,address,address,address)\":{\"notice\":\"Creates an entirely new long/short market tracking an underlying oracle price.  Make sure the synthetic names/symbols are unique.\"},\"createNewSyntheticMarketExternalSyntheticTokens(string,string,address,address,address,address,address)\":{\"notice\":\"Creates an entirely new long/short market tracking an underlying oracle price.  Uses already created synthetic tokens.\"},\"executeOutstandingNextPriceSettlementsUser(address,uint32)\":{\"notice\":\"After markets have been batched updated on a new oracle price, transfers any owed tokens to a user from their next price actions for that update to that user.\"},\"executeOutstandingNextPriceSettlementsUserMulti(address,uint32[])\":{\"notice\":\"Executes outstanding next price settlements for a user for multiple markets.\"},\"getAmountSyntheticTokenToMintOnTargetSide(uint32,uint256,bool,uint256)\":{\"notice\":\"Given an executed next price shift from tokens on one market side to the other, determines how many other side tokens the shift was worth.\"},\"getUsersConfirmedButNotSettledSynthBalance(address,uint32,bool)\":{\"notice\":\"The amount of a synth token a user is owed following a batch execution. 4 possible states for next price actions: - \\\"Pending\\\" - means the next price update hasn't happened or been enacted on by the updateSystemState function. - \\\"Confirmed\\\" - means the next price has been updated by the updateSystemState function. There is still -               outstanding (lazy) computation that needs to be executed per user in the batch. - \\\"Settled\\\" - there is no more computation left for the user. - \\\"Non-existent\\\" - user has no next price actions. This function returns a calculated value only in the case of 'confirmed' next price actions. It should return zero for all other types of next price actions.\"},\"initialize(address,address,address)\":{\"notice\":\"Initializes the contract.\"},\"initializeMarket(uint32,uint256,uint256,uint256,uint256,uint256,int256,uint256)\":{\"notice\":\"Sets a market as active once it has already been setup by createNewSyntheticMarket.\"},\"mintLongNextPrice(uint32,uint256)\":{\"notice\":\"Allows users to mint long synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.\"},\"mintShortNextPrice(uint32,uint256)\":{\"notice\":\"Allows users to mint short synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.\"},\"redeemLongNextPrice(uint32,uint256)\":{\"notice\":\"Allows users to redeem long synthetic assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle.\"},\"redeemShortNextPrice(uint32,uint256)\":{\"notice\":\"Allows users to redeem short synthetic assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle.\"},\"shiftPositionFromLongNextPrice(uint32,uint256)\":{\"notice\":\"Allows users to shift their position from long to short in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle.\"},\"shiftPositionFromShortNextPrice(uint32,uint256)\":{\"notice\":\"Allows users to shift their position from short to long in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle.\"},\"shiftPositionNextPrice(uint32,uint256,bool)\":{\"notice\":\"Allows users to shift their position from one side of the market to the other in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle.\"},\"syntheticToken_priceSnapshot(uint32,bool,uint256)\":{\"notice\":\"synthetic token prices of a given market of a (long/short) at every previous price update\"},\"updateMarketOracle(uint32,address)\":{\"notice\":\"Update oracle for a market\"},\"updateSystemState(uint32)\":{\"notice\":\"Updates the state of a market to account for the latest oracle price update.\"},\"updateSystemStateMulti(uint32[])\":{\"notice\":\"Updates the state of multiples markets to account for their latest oracle price updates.\"}},\"notice\":\"visit https://float.capital for more info\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LongShort.sol\":\"LongShort\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcc3fca7831523600d2cac44ec77ee7e079f70c6910b6d7229ff774eaa5f04cdc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x57e153cdc803037ecf68a916c6d7eb38d7e4ddbc7ceb6e37c0bee45a5aef9709\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"contracts/LongShort.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./interfaces/ITokenFactory.sol\\\";\\nimport \\\"./interfaces/ISyntheticToken.sol\\\";\\nimport \\\"./interfaces/IStaker.sol\\\";\\nimport \\\"./interfaces/ILongShort.sol\\\";\\nimport \\\"./interfaces/IYieldManager.sol\\\";\\nimport \\\"./interfaces/IOracleManager.sol\\\";\\nimport \\\"./abstract/AccessControlledAndUpgradeable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n **** visit https://float.capital *****\\n */\\n\\n/// @title Core logic of Float Protocal markets\\n/// @author float.capital\\n/// @notice visit https://float.capital for more info\\n/// @dev All functions in this file are currently `virtual`. This is NOT to encourage inheritance.\\n/// It is merely for convenince when unit testing.\\n/// @custom:auditors This contract balances long and short sides.\\ncontract LongShort is ILongShort, AccessControlledAndUpgradeable {\\n  //Using Open Zeppelin safe transfer library for token transfers\\n  using SafeERC20 for IERC20;\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551          VARIABLES          \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /* \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 Fixed-precision constants \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 */\\n  /// @notice this is the address that permanently locked initial liquidity for markets is held by.\\n  /// These tokens will never move so market can never have zero liquidity on a side.\\n  /// @dev f10a7 spells float in hex - for fun - important part is that the private key for this address in not known.\\n  address public constant PERMANENT_INITIAL_LIQUIDITY_HOLDER =\\n    0xf10A7_F10A7_f10A7_F10a7_F10A7_f10a7_F10A7_f10a7;\\n\\n  /// @dev an empty allocation of storage for use in future upgrades - inspiration from OZ:\\n  ///      https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/10f0f1a95b1b0fd5520351886bae7a03490f1056/contracts/token/ERC20/ERC20Upgradeable.sol#L361\\n  uint256[45] private __constantsGap;\\n\\n  /* \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 Global state \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 */\\n  uint32 public latestMarket;\\n\\n  address public staker;\\n  address public tokenFactory;\\n  uint256[45] private __globalStateGap;\\n\\n  /* \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 Market specific \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 */\\n  mapping(uint32 => bool) public marketExists;\\n  mapping(uint32 => int256) public assetPrice;\\n  mapping(uint32 => uint256) public override marketUpdateIndex;\\n  mapping(uint32 => address) public paymentTokens;\\n  mapping(uint32 => address) public yieldManagers;\\n  mapping(uint32 => address) public oracleManagers;\\n  mapping(uint32 => uint256) public marketTreasurySplitGradient_e18;\\n\\n  /* \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 Market + position (long/short) specific \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 */\\n  mapping(uint32 => mapping(bool => address)) public override syntheticTokens;\\n  mapping(uint32 => mapping(bool => uint256)) public override marketSideValueInPaymentToken;\\n\\n  /// @notice synthetic token prices of a given market of a (long/short) at every previous price update\\n  mapping(uint32 => mapping(bool => mapping(uint256 => uint256)))\\n    public\\n    override syntheticToken_priceSnapshot;\\n\\n  mapping(uint32 => mapping(bool => uint256)) public batched_amountPaymentToken_deposit;\\n  mapping(uint32 => mapping(bool => uint256)) public batched_amountSyntheticToken_redeem;\\n  mapping(uint32 => mapping(bool => uint256))\\n    public batched_amountSyntheticToken_toShiftAwayFrom_marketSide;\\n\\n  /* \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 User specific \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 */\\n  mapping(uint32 => mapping(address => uint256)) public userNextPrice_currentUpdateIndex;\\n\\n  mapping(uint32 => mapping(bool => mapping(address => uint256)))\\n    public userNextPrice_paymentToken_depositAmount;\\n  mapping(uint32 => mapping(bool => mapping(address => uint256)))\\n    public userNextPrice_syntheticToken_redeemAmount;\\n  mapping(uint32 => mapping(bool => mapping(address => uint256)))\\n    public userNextPrice_syntheticToken_toShiftAwayFrom_marketSide;\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551          MODIFIERS          \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  function adminOnlyModifierLogic() internal virtual {\\n    _checkRole(ADMIN_ROLE, msg.sender);\\n  }\\n\\n  modifier adminOnly() {\\n    adminOnlyModifierLogic();\\n    _;\\n  }\\n\\n  function requireMarketExistsModifierLogic(uint32 marketIndex) internal view virtual {\\n    require(marketExists[marketIndex], \\\"market doesn't exist\\\");\\n  }\\n\\n  modifier requireMarketExists(uint32 marketIndex) {\\n    requireMarketExistsModifierLogic(marketIndex);\\n    _;\\n  }\\n\\n  modifier updateSystemStateMarketAndExecuteOutstandingNextPriceSettlements(\\n    address user,\\n    uint32 marketIndex\\n  ) {\\n    _updateSystemStateInternal(marketIndex);\\n    _executeOutstandingNextPriceSettlements(user, marketIndex);\\n    _;\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       CONTRACT SET-UP       \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Initializes the contract.\\n  /// @dev Calls OpenZeppelin's initializer modifier.\\n  /// @param _admin Address of the admin role.\\n  /// @param _tokenFactory Address of the contract which creates synthetic asset tokens.\\n  /// @param _staker Address of the contract which handles synthetic asset stakes.\\n  function initialize(\\n    address _admin,\\n    address _tokenFactory,\\n    address _staker\\n  ) external virtual initializer {\\n    require(_admin != address(0) && _tokenFactory != address(0) && _staker != address(0));\\n    _AccessControlledAndUpgradeable_init(_admin);\\n    tokenFactory = _tokenFactory;\\n    staker = _staker;\\n\\n    emit LongShortV1(_admin, _tokenFactory, _staker);\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       ADMIN       \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Update oracle for a market\\n  /// @dev Can only be called by the current admin.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param _newOracleManager Address of the replacement oracle manager.\\n  function updateMarketOracle(uint32 marketIndex, address _newOracleManager) external adminOnly {\\n    // If not a oracle contract this would break things.. Test's arn't validating this\\n    // Ie require isOracle interface - ERC165\\n    address previousOracleManager = oracleManagers[marketIndex];\\n    oracleManagers[marketIndex] = _newOracleManager;\\n    emit OracleUpdated(marketIndex, previousOracleManager, _newOracleManager);\\n  }\\n\\n  /// @notice changes the gradient of the line for determining the yield split between market and treasury.\\n  function changeMarketTreasurySplitGradient(\\n    uint32 marketIndex,\\n    uint256 _marketTreasurySplitGradient_e18\\n  ) external adminOnly {\\n    marketTreasurySplitGradient_e18[marketIndex] = _marketTreasurySplitGradient_e18;\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       MARKET CREATION       \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Creates an entirely new long/short market tracking an underlying oracle price.\\n  ///  Make sure the synthetic names/symbols are unique.\\n  /// @dev This does not make the market active.\\n  /// The `initializeMarket` function was split out separately to this function to reduce costs.\\n  /// @param syntheticName Name of the synthetic asset\\n  /// @param syntheticSymbol Symbol for the synthetic asset\\n  /// @param _paymentToken The address of the erc20 token used to buy this synthetic asset\\n  /// this will likely always be DAI\\n  /// @param _oracleManager The address of the oracle manager that provides the price feed for this market\\n  /// @param _yieldManager The contract that manages depositing the paymentToken into a yield bearing protocol\\n  function createNewSyntheticMarket(\\n    string calldata syntheticName,\\n    string calldata syntheticSymbol,\\n    address _paymentToken,\\n    address _oracleManager,\\n    address _yieldManager\\n  ) external adminOnly {\\n    require(\\n      _paymentToken != address(0) && _oracleManager != address(0) && _yieldManager != address(0)\\n    );\\n\\n    uint32 marketIndex = ++latestMarket;\\n    address _staker = staker;\\n\\n    // Ensure new markets don't use the same yield manager\\n    IYieldManager(_yieldManager).initializeForMarket();\\n\\n    // Create new synthetic long token.\\n    syntheticTokens[marketIndex][true] = ITokenFactory(tokenFactory).createSyntheticToken(\\n      string(abi.encodePacked(\\\"Float Long \\\", syntheticName)),\\n      string(abi.encodePacked(\\\"fl\\\", syntheticSymbol)),\\n      _staker,\\n      marketIndex,\\n      true\\n    );\\n\\n    // Create new synthetic short token.\\n    syntheticTokens[marketIndex][false] = ITokenFactory(tokenFactory).createSyntheticToken(\\n      string(abi.encodePacked(\\\"Float Short \\\", syntheticName)),\\n      string(abi.encodePacked(\\\"fs\\\", syntheticSymbol)),\\n      _staker,\\n      marketIndex,\\n      false\\n    );\\n\\n    // Initial market state.\\n    paymentTokens[marketIndex] = _paymentToken;\\n    yieldManagers[marketIndex] = _yieldManager;\\n    oracleManagers[marketIndex] = _oracleManager;\\n    assetPrice[marketIndex] = IOracleManager(oracleManagers[marketIndex]).updatePrice();\\n\\n    emit SyntheticMarketCreated(\\n      marketIndex,\\n      syntheticTokens[marketIndex][true],\\n      syntheticTokens[marketIndex][false],\\n      _paymentToken,\\n      assetPrice[marketIndex],\\n      syntheticName,\\n      syntheticSymbol,\\n      _oracleManager,\\n      _yieldManager\\n    );\\n  }\\n\\n  /// @notice Creates an entirely new long/short market tracking an underlying oracle price.\\n  ///  Uses already created synthetic tokens.\\n  /// @dev This does not make the market active.\\n  /// The `initializeMarket` function was split out separately to this function to reduce costs.\\n  /// @param syntheticName Name of the synthetic asset\\n  /// @param syntheticSymbol Symbol for the synthetic asset\\n  /// @param _longToken Address for the long token.\\n  /// @param _shortToken Address for the short token.\\n  /// @param _paymentToken The address of the erc20 token used to buy this synthetic asset\\n  /// this will likely always be DAI\\n  /// @param _oracleManager The address of the oracle manager that provides the price feed for this market\\n  /// @param _yieldManager The contract that manages depositing the paymentToken into a yield bearing protocol\\n  function createNewSyntheticMarketExternalSyntheticTokens(\\n    string calldata syntheticName,\\n    string calldata syntheticSymbol,\\n    address _longToken,\\n    address _shortToken,\\n    address _paymentToken,\\n    address _oracleManager,\\n    address _yieldManager\\n  ) external adminOnly {\\n    uint32 marketIndex = ++latestMarket;\\n\\n    // Ensure new markets don't use the same yield manager\\n    IYieldManager(_yieldManager).initializeForMarket();\\n\\n    // Assign new synthetic long token.\\n    syntheticTokens[marketIndex][true] = _longToken;\\n\\n    // Assign new synthetic short token.\\n    syntheticTokens[marketIndex][false] = _shortToken;\\n\\n    // Initial market state.\\n    paymentTokens[marketIndex] = _paymentToken;\\n    yieldManagers[marketIndex] = _yieldManager;\\n    oracleManagers[marketIndex] = _oracleManager;\\n    assetPrice[marketIndex] = IOracleManager(oracleManagers[marketIndex]).updatePrice();\\n\\n    emit SyntheticMarketCreated(\\n      marketIndex,\\n      _longToken,\\n      _shortToken,\\n      _paymentToken,\\n      assetPrice[marketIndex],\\n      syntheticName,\\n      syntheticSymbol,\\n      _oracleManager,\\n      _yieldManager\\n    );\\n  }\\n\\n  /// @notice Seeds a new market with initial capital.\\n  /// @dev Only called when initializing a market.\\n  /// @param initialMarketSeedForEachMarketSide Amount in wei for which to seed both sides of the market.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  function _seedMarketInitially(uint256 initialMarketSeedForEachMarketSide, uint32 marketIndex)\\n    internal\\n    virtual\\n  {\\n    require(\\n      // You require at least 1e18 (1 payment token with 18 decimal places) of the underlying payment token to seed the market.\\n      initialMarketSeedForEachMarketSide >= 1e18,\\n      \\\"Insufficient market seed\\\"\\n    );\\n\\n    uint256 amountToLockInYieldManager = initialMarketSeedForEachMarketSide * 2;\\n    _transferPaymentTokensFromUserToYieldManager(marketIndex, amountToLockInYieldManager);\\n    IYieldManager(yieldManagers[marketIndex]).depositPaymentToken(amountToLockInYieldManager);\\n\\n    ISyntheticToken(syntheticTokens[marketIndex][true]).mint(\\n      PERMANENT_INITIAL_LIQUIDITY_HOLDER,\\n      initialMarketSeedForEachMarketSide\\n    );\\n    ISyntheticToken(syntheticTokens[marketIndex][false]).mint(\\n      PERMANENT_INITIAL_LIQUIDITY_HOLDER,\\n      initialMarketSeedForEachMarketSide\\n    );\\n\\n    marketSideValueInPaymentToken[marketIndex][true] = initialMarketSeedForEachMarketSide;\\n    marketSideValueInPaymentToken[marketIndex][false] = initialMarketSeedForEachMarketSide;\\n\\n    emit NewMarketLaunchedAndSeeded(marketIndex, initialMarketSeedForEachMarketSide);\\n  }\\n\\n  /// @notice Sets a market as active once it has already been setup by createNewSyntheticMarket.\\n  /// @dev Seperated from createNewSyntheticMarket due to gas considerations.\\n  /// @param marketIndex An int32 which uniquely identifies the market.\\n  /// @param kInitialMultiplier Linearly decreasing multiplier for Float token issuance for the market when staking synths.\\n  /// @param kPeriod Time which kInitialMultiplier will last\\n  /// @param unstakeFee_e18 Base 1e18 percentage fee levied when unstaking for the market.\\n  /// @param balanceIncentiveCurve_exponent Sets the degree to which Float token issuance differs\\n  /// for market sides in unbalanced markets. See Staker.sol\\n  /// @param balanceIncentiveCurve_equilibriumOffset An offset to account for naturally imbalanced markets\\n  /// when Float token issuance should differ for market sides. See Staker.sol\\n  /// @param initialMarketSeedForEachMarketSide Amount of payment token that will be deposited in each market side to seed the market.\\n  function initializeMarket(\\n    uint32 marketIndex,\\n    uint256 kInitialMultiplier,\\n    uint256 kPeriod,\\n    uint256 unstakeFee_e18,\\n    uint256 initialMarketSeedForEachMarketSide,\\n    uint256 balanceIncentiveCurve_exponent,\\n    int256 balanceIncentiveCurve_equilibriumOffset,\\n    uint256 _marketTreasurySplitGradient_e18\\n  ) external adminOnly {\\n    require(\\n      kInitialMultiplier != 0 &&\\n        unstakeFee_e18 != 0 &&\\n        initialMarketSeedForEachMarketSide != 0 &&\\n        balanceIncentiveCurve_exponent != 0 &&\\n        _marketTreasurySplitGradient_e18 != 0\\n    );\\n\\n    require(!marketExists[marketIndex], \\\"already initialized\\\");\\n    require(marketIndex <= latestMarket, \\\"index too high\\\");\\n\\n    marketExists[marketIndex] = true;\\n\\n    marketTreasurySplitGradient_e18[marketIndex] = _marketTreasurySplitGradient_e18;\\n\\n    // Set this value to one initially - 0 is a null value and thus potentially bug prone.\\n    marketUpdateIndex[marketIndex] = 1;\\n\\n    _seedMarketInitially(initialMarketSeedForEachMarketSide, marketIndex);\\n\\n    // Add new staker funds with fresh synthetic tokens.\\n    IStaker(staker).addNewStakingFund(\\n      marketIndex,\\n      syntheticTokens[marketIndex][true],\\n      syntheticTokens[marketIndex][false],\\n      kInitialMultiplier,\\n      kPeriod,\\n      unstakeFee_e18,\\n      balanceIncentiveCurve_exponent,\\n      balanceIncentiveCurve_equilibriumOffset\\n    );\\n\\n    IStaker(staker).pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations(\\n      marketIndex,\\n      1,\\n      1e18,\\n      1e18,\\n      initialMarketSeedForEachMarketSide,\\n      initialMarketSeedForEachMarketSide\\n    );\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       GETTER FUNCTIONS       \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Calculates the conversion rate from synthetic tokens to payment tokens.\\n  /// @dev Synth tokens have a fixed 18 decimals.\\n  /// @param amountPaymentTokenBackingSynth Amount of payment tokens in that token's lowest denomination.\\n  /// @param amountSyntheticToken Amount of synth token in wei.\\n  /// @return syntheticTokenPrice The calculated conversion rate in base 1e18.\\n  function _getSyntheticTokenPrice(\\n    uint256 amountPaymentTokenBackingSynth,\\n    uint256 amountSyntheticToken\\n  ) internal pure virtual returns (uint256 syntheticTokenPrice) {\\n    return (amountPaymentTokenBackingSynth * 1e18) / amountSyntheticToken;\\n  }\\n\\n  /// @notice Converts synth token amounts to payment token amounts at a synth token price.\\n  /// @dev Price assumed base 1e18.\\n  /// @param amountSyntheticToken Amount of synth token in wei.\\n  /// @param syntheticTokenPriceInPaymentTokens The conversion rate from synth to payment tokens in base 1e18.\\n  /// @return amountPaymentToken The calculated amount of payment tokens in token's lowest denomination.\\n  function _getAmountPaymentToken(\\n    uint256 amountSyntheticToken,\\n    uint256 syntheticTokenPriceInPaymentTokens\\n  ) internal pure virtual returns (uint256 amountPaymentToken) {\\n    return (amountSyntheticToken * syntheticTokenPriceInPaymentTokens) / 1e18;\\n  }\\n\\n  /// @notice Converts payment token amounts to synth token amounts at a synth token price.\\n  /// @dev  Price assumed base 1e18.\\n  /// @param amountPaymentTokenBackingSynth Amount of payment tokens in that token's lowest denomination.\\n  /// @param syntheticTokenPriceInPaymentTokens The conversion rate from synth to payment tokens in base 1e18.\\n  /// @return amountSyntheticToken The calculated amount of synthetic token in wei.\\n  function _getAmountSyntheticToken(\\n    uint256 amountPaymentTokenBackingSynth,\\n    uint256 syntheticTokenPriceInPaymentTokens\\n  ) internal pure virtual returns (uint256 amountSyntheticToken) {\\n    return (amountPaymentTokenBackingSynth * 1e18) / syntheticTokenPriceInPaymentTokens;\\n  }\\n\\n  /**\\n  @notice Calculate the amount of target side synthetic tokens that are worth the same\\n          amount of payment tokens as X many synthetic tokens on origin side.\\n          The resulting equation comes from simplifying this function\\n\\n            _getAmountSyntheticToken(\\n              _getAmountPaymentToken(\\n                amountOriginSynth,\\n                priceOriginSynth\\n              ),\\n              priceTargetSynth)\\n\\n            Unpacking the function we get:\\n            ((amountOriginSynth * priceOriginSynth) / 1e18) * 1e18 / priceTargetSynth\\n              And simplifying this we get:\\n            (amountOriginSynth * priceOriginSynth) / priceTargetSynth\\n  @param amountSyntheticTokens_originSide Amount of synthetic tokens on origin side\\n  @param syntheticTokenPrice_originSide Price of origin side's synthetic token\\n  @param syntheticTokenPrice_targetSide Price of target side's synthetic token\\n  @return equivalentAmountSyntheticTokensOnTargetSide Amount of synthetic token on target side\\n  */\\n  function _getEquivalentAmountSyntheticTokensOnTargetSide(\\n    uint256 amountSyntheticTokens_originSide,\\n    uint256 syntheticTokenPrice_originSide,\\n    uint256 syntheticTokenPrice_targetSide\\n  ) internal pure virtual returns (uint256 equivalentAmountSyntheticTokensOnTargetSide) {\\n    equivalentAmountSyntheticTokensOnTargetSide =\\n      (amountSyntheticTokens_originSide * syntheticTokenPrice_originSide) /\\n      syntheticTokenPrice_targetSide;\\n  }\\n\\n  /// @notice Given an executed next price shift from tokens on one market side to the other,\\n  /// determines how many other side tokens the shift was worth.\\n  /// @dev Intended for use primarily by Staker.sol\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amountSyntheticToken_redeemOnOriginSide Amount of synth token in wei.\\n  /// @param isShiftFromLong Whether the token shift is from long to short (true), or short to long (false).\\n  /// @param priceSnapshotIndex Index which identifies which synth prices to use.\\n  /// @return amountSyntheticTokensToMintOnTargetSide The amount in wei of tokens for the other side that the shift was worth.\\n  function getAmountSyntheticTokenToMintOnTargetSide(\\n    uint32 marketIndex,\\n    uint256 amountSyntheticToken_redeemOnOriginSide,\\n    bool isShiftFromLong,\\n    uint256 priceSnapshotIndex\\n  ) public view virtual override returns (uint256 amountSyntheticTokensToMintOnTargetSide) {\\n    uint256 syntheticTokenPriceOnOriginSide = syntheticToken_priceSnapshot[marketIndex][\\n      isShiftFromLong\\n    ][priceSnapshotIndex];\\n    uint256 syntheticTokenPriceOnTargetSide = syntheticToken_priceSnapshot[marketIndex][\\n      !isShiftFromLong\\n    ][priceSnapshotIndex];\\n\\n    amountSyntheticTokensToMintOnTargetSide = _getEquivalentAmountSyntheticTokensOnTargetSide(\\n      amountSyntheticToken_redeemOnOriginSide,\\n      syntheticTokenPriceOnOriginSide,\\n      syntheticTokenPriceOnTargetSide\\n    );\\n  }\\n\\n  /**\\n  @notice The amount of a synth token a user is owed following a batch execution.\\n    4 possible states for next price actions:\\n        - \\\"Pending\\\" - means the next price update hasn't happened or been enacted on by the updateSystemState function.\\n        - \\\"Confirmed\\\" - means the next price has been updated by the updateSystemState function. There is still\\n        -               outstanding (lazy) computation that needs to be executed per user in the batch.\\n        - \\\"Settled\\\" - there is no more computation left for the user.\\n        - \\\"Non-existent\\\" - user has no next price actions.\\n    This function returns a calculated value only in the case of 'confirmed' next price actions.\\n    It should return zero for all other types of next price actions.\\n  @dev Used in SyntheticToken.sol balanceOf to allow for automatic reflection of next price actions.\\n  @param user The address of the user for whom to execute the function for.\\n  @param marketIndex An uint32 which uniquely identifies a market.\\n  @param isLong Whether it is for the long synthetic asset or the short synthetic asset.\\n  @return confirmedButNotSettledBalance The amount in wei of tokens that the user is owed.\\n  */\\n  function getUsersConfirmedButNotSettledSynthBalance(\\n    address user,\\n    uint32 marketIndex,\\n    bool isLong\\n  )\\n    external\\n    view\\n    virtual\\n    override\\n    requireMarketExists(marketIndex)\\n    returns (uint256 confirmedButNotSettledBalance)\\n  {\\n    uint256 currentMarketUpdateIndex = marketUpdateIndex[marketIndex];\\n    uint256 userNextPrice_currentUpdateIndex_forMarket = userNextPrice_currentUpdateIndex[\\n      marketIndex\\n    ][user];\\n    if (\\n      userNextPrice_currentUpdateIndex_forMarket != 0 &&\\n      userNextPrice_currentUpdateIndex_forMarket <= currentMarketUpdateIndex\\n    ) {\\n      uint256 amountPaymentTokenDeposited = userNextPrice_paymentToken_depositAmount[marketIndex][\\n        isLong\\n      ][user];\\n\\n      if (amountPaymentTokenDeposited > 0) {\\n        uint256 syntheticTokenPrice = syntheticToken_priceSnapshot[marketIndex][isLong][\\n          userNextPrice_currentUpdateIndex_forMarket\\n        ];\\n\\n        confirmedButNotSettledBalance = _getAmountSyntheticToken(\\n          amountPaymentTokenDeposited,\\n          syntheticTokenPrice\\n        );\\n      }\\n\\n      uint256 amountSyntheticTokensToBeShiftedAwayFromOriginSide = userNextPrice_syntheticToken_toShiftAwayFrom_marketSide[\\n          marketIndex\\n        ][!isLong][user];\\n\\n      if (amountSyntheticTokensToBeShiftedAwayFromOriginSide > 0) {\\n        uint256 syntheticTokenPriceOnOriginSide = syntheticToken_priceSnapshot[marketIndex][\\n          !isLong\\n        ][userNextPrice_currentUpdateIndex_forMarket];\\n        uint256 syntheticTokenPriceOnTargetSide = syntheticToken_priceSnapshot[marketIndex][isLong][\\n          userNextPrice_currentUpdateIndex_forMarket\\n        ];\\n\\n        confirmedButNotSettledBalance += _getEquivalentAmountSyntheticTokensOnTargetSide(\\n          amountSyntheticTokensToBeShiftedAwayFromOriginSide,\\n          syntheticTokenPriceOnOriginSide,\\n          syntheticTokenPriceOnTargetSide\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   @notice Calculates the percentage in base 1e18 of how much of the accrued yield\\n   for a market should be allocated to treasury.\\n   @dev For gas considerations also returns whether the long side is imbalanced.\\n   @dev For gas considerations totalValueLockedInMarket is passed as a parameter as the function\\n   calling this function has pre calculated the value\\n   @param longValue The current total payment token value of the long side of the market.\\n   @param shortValue The current total payment token value of the short side of the market.\\n   @param totalValueLockedInMarket Total payment token value of both sides of the market.\\n   @return isLongSideUnderbalanced Whether the long side initially had less value than the short side.\\n   @return treasuryYieldPercent_e18 The percentage in base 1e18 of how much of the accrued yield\\n   for a market should be allocated to treasury.\\n   */\\n  function _getYieldSplit(\\n    uint32 marketIndex,\\n    uint256 longValue,\\n    uint256 shortValue,\\n    uint256 totalValueLockedInMarket\\n  ) internal view virtual returns (bool isLongSideUnderbalanced, uint256 treasuryYieldPercent_e18) {\\n    isLongSideUnderbalanced = longValue < shortValue;\\n    uint256 imbalance;\\n\\n    unchecked {\\n      if (isLongSideUnderbalanced) {\\n        imbalance = shortValue - longValue;\\n      } else {\\n        imbalance = longValue - shortValue;\\n      }\\n    }\\n\\n    // marketTreasurySplitGradient_e18 may be adjusted to ensure yield is given\\n    // to the market at a desired rate e.g. if a market tends to become imbalanced\\n    // frequently then the gradient can be increased to funnel yield to the market\\n    // quicker.\\n    // See this equation in latex: https://ipfs.io/ipfs/QmXsW4cHtxpJ5BFwRcMSUw7s5G11Qkte13NTEfPLTKEx4x\\n    // Interact with this equation: https://www.desmos.com/calculator/pnl43tfv5b\\n    uint256 marketPercentCalculated_e18 = (imbalance *\\n      marketTreasurySplitGradient_e18[marketIndex]) / totalValueLockedInMarket;\\n\\n    uint256 marketPercent_e18 = Math.min(marketPercentCalculated_e18, 1e18);\\n\\n    unchecked {\\n      treasuryYieldPercent_e18 = 1e18 - marketPercent_e18;\\n    }\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       HELPER FUNCTIONS       \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice First gets yield from the yield manager and allocates it to market and treasury.\\n  /// It then allocates the full market yield portion to the underbalanced side of the market.\\n  /// NB this function also adjusts the value of the long and short side based on the latest\\n  /// price of the underlying asset received from the oracle. This function should ideally be\\n  /// called everytime there is an price update from the oracle. We have built a bot that does this.\\n  /// The system is still perectly safe if not called every price update, the synthetic will just\\n  /// less closely track the underlying asset.\\n  /// @dev In one function as yield should be allocated before rebalancing.\\n  /// This prevents an attack whereby the user imbalances a side to capture all accrued yield.\\n  /// @param marketIndex The market for which to execute the function for.\\n  /// @param newAssetPrice The new asset price.\\n  /// @return longValue The value of the long side after rebalancing.\\n  /// @return shortValue The value of the short side after rebalancing.\\n  function _claimAndDistributeYieldThenRebalanceMarket(uint32 marketIndex, int256 newAssetPrice)\\n    internal\\n    virtual\\n    returns (uint256 longValue, uint256 shortValue)\\n  {\\n    int256 oldAssetPrice = assetPrice[marketIndex];\\n    // Claiming and distributing the yield\\n    longValue = marketSideValueInPaymentToken[marketIndex][true];\\n    shortValue = marketSideValueInPaymentToken[marketIndex][false];\\n    uint256 totalValueLockedInMarket = longValue + shortValue;\\n\\n    (bool isLongSideUnderbalanced, uint256 treasuryYieldPercent_e18) = _getYieldSplit(\\n      marketIndex,\\n      longValue,\\n      shortValue,\\n      totalValueLockedInMarket\\n    );\\n\\n    uint256 marketAmount = IYieldManager(yieldManagers[marketIndex])\\n      .distributeYieldForTreasuryAndReturnMarketAllocation(\\n        totalValueLockedInMarket,\\n        treasuryYieldPercent_e18\\n      );\\n\\n    if (marketAmount > 0) {\\n      if (isLongSideUnderbalanced) {\\n        longValue += marketAmount;\\n      } else {\\n        shortValue += marketAmount;\\n      }\\n    }\\n\\n    // Adjusting value of long and short pool based on price movement\\n    // The side/position with less liquidity has 100% percent exposure to the price movement.\\n    // The side/position with more liquidity will have exposure < 100% to the price movement.\\n    // I.e. Imagine $100 in longValue and $50 shortValue\\n    // long side would have $50/$100 = 50% exposure to price movements based on the liquidity imbalance.\\n    // min(longValue, shortValue) = $50 , therefore if the price change was -10% then\\n    // $50 * 10% = $5 gained for short side and conversely $5 lost for long side.\\n    int256 underbalancedSideValue = int256(Math.min(longValue, shortValue));\\n\\n    // See this equation in latex: https://ipfs.io/ipfs/QmPeJ3SZdn1GfxqCD4GDYyWTJGPMSHkjPJaxrzk2qTTPSE\\n    // Interact with this equation: https://www.desmos.com/calculator/t8gr6j5vsq\\n    int256 valueChange = ((newAssetPrice - oldAssetPrice) * underbalancedSideValue) / oldAssetPrice;\\n\\n    if (valueChange < 0) {\\n      valueChange = -valueChange; // make value change positive\\n\\n      // handle 'impossible' edge case where underlying price feed changes more than 100% downwards gracefully.\\n      if (uint256(valueChange) > longValue) {\\n        valueChange = (int256(longValue) * 99999) / 100000;\\n      }\\n      longValue -= uint256(valueChange);\\n      shortValue += uint256(valueChange);\\n    } else {\\n      // handle 'impossible' edge case where underlying price feed changes more than 100% upwards gracefully.\\n      if (uint256(valueChange) > shortValue) {\\n        valueChange = (int256(shortValue) * 99999) / 100000;\\n      }\\n      longValue += uint256(valueChange);\\n      shortValue -= uint256(valueChange);\\n    }\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551     UPDATING SYSTEM STATE     \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Updates the value of the long and short sides to account for latest oracle price updates\\n  /// and batches all next price actions.\\n  /// @dev To prevent front-running only executes on price change from an oracle.\\n  /// We assume the function will be called for each market at least once per price update.\\n  /// Note Even if not called on every price update, this won't affect security, it will only affect how closely\\n  /// the synthetic asset actually tracks the underlying asset.\\n  /// @param marketIndex The market index for which to update.\\n  function _updateSystemStateInternal(uint32 marketIndex)\\n    internal\\n    virtual\\n    requireMarketExists(marketIndex)\\n  {\\n    // If a negative int is return this should fail.\\n    int256 newAssetPrice = IOracleManager(oracleManagers[marketIndex]).updatePrice();\\n\\n    uint256 currentMarketIndex = marketUpdateIndex[marketIndex];\\n\\n    bool assetPriceHasChanged = assetPrice[marketIndex] != newAssetPrice;\\n\\n    if (assetPriceHasChanged) {\\n      uint256 syntheticTokenPrice_inPaymentTokens_long = syntheticToken_priceSnapshot[marketIndex][\\n        true\\n      ][currentMarketIndex];\\n      uint256 syntheticTokenPrice_inPaymentTokens_short = syntheticToken_priceSnapshot[marketIndex][\\n        false\\n      ][currentMarketIndex];\\n      // if there is a price change and the 'staker' contract has pending updates, push the stakers price snapshot index to the staker\\n      // (so the staker can handle its internal accounting)\\n\\n      (\\n        uint256 newLongPoolValue,\\n        uint256 newShortPoolValue\\n      ) = _claimAndDistributeYieldThenRebalanceMarket(marketIndex, newAssetPrice);\\n\\n      syntheticTokenPrice_inPaymentTokens_long = _getSyntheticTokenPrice(\\n        newLongPoolValue,\\n        ISyntheticToken(syntheticTokens[marketIndex][true]).totalSupply()\\n      );\\n      syntheticTokenPrice_inPaymentTokens_short = _getSyntheticTokenPrice(\\n        newShortPoolValue,\\n        ISyntheticToken(syntheticTokens[marketIndex][false]).totalSupply()\\n      );\\n\\n      assetPrice[marketIndex] = newAssetPrice;\\n\\n      currentMarketIndex++;\\n      marketUpdateIndex[marketIndex] = currentMarketIndex;\\n\\n      syntheticToken_priceSnapshot[marketIndex][true][\\n        currentMarketIndex\\n      ] = syntheticTokenPrice_inPaymentTokens_long;\\n\\n      syntheticToken_priceSnapshot[marketIndex][false][\\n        currentMarketIndex\\n      ] = syntheticTokenPrice_inPaymentTokens_short;\\n\\n      (\\n        int256 long_changeInMarketValue_inPaymentToken,\\n        int256 short_changeInMarketValue_inPaymentToken\\n      ) = _batchConfirmOutstandingPendingActions(\\n          marketIndex,\\n          syntheticTokenPrice_inPaymentTokens_long,\\n          syntheticTokenPrice_inPaymentTokens_short\\n        );\\n\\n      newLongPoolValue = uint256(\\n        int256(newLongPoolValue) + long_changeInMarketValue_inPaymentToken\\n      );\\n      newShortPoolValue = uint256(\\n        int256(newShortPoolValue) + short_changeInMarketValue_inPaymentToken\\n      );\\n      marketSideValueInPaymentToken[marketIndex][true] = newLongPoolValue;\\n      marketSideValueInPaymentToken[marketIndex][false] = newShortPoolValue;\\n\\n      IStaker(staker).pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations(\\n        marketIndex,\\n        currentMarketIndex,\\n        syntheticTokenPrice_inPaymentTokens_long,\\n        syntheticTokenPrice_inPaymentTokens_short,\\n        newLongPoolValue,\\n        newShortPoolValue\\n      );\\n\\n      emit SystemStateUpdated(\\n        marketIndex,\\n        currentMarketIndex,\\n        newAssetPrice,\\n        newLongPoolValue,\\n        newShortPoolValue,\\n        syntheticTokenPrice_inPaymentTokens_long,\\n        syntheticTokenPrice_inPaymentTokens_short\\n      );\\n    }\\n  }\\n\\n  /// @notice Updates the state of a market to account for the latest oracle price update.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  function updateSystemState(uint32 marketIndex) external override {\\n    _updateSystemStateInternal(marketIndex);\\n  }\\n\\n  /// @notice Updates the state of multiples markets to account for their latest oracle price updates.\\n  /// @param marketIndexes An array of int32s which uniquely identify markets.\\n  function updateSystemStateMulti(uint32[] calldata marketIndexes) external override {\\n    uint256 length = marketIndexes.length;\\n    for (uint256 i = 0; i < length; i++) {\\n      _updateSystemStateInternal(marketIndexes[i]);\\n    }\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551          DEPOSIT          \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Transfers payment tokens for a market from msg.sender to this contract.\\n  /// @dev Tokens are transferred directly to this contract to be deposited by the yield manager in the batch to earn yield.\\n  ///      Since we check the return value of the transferFrom method, all payment tokens we use must conform to the ERC20 standard.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amount Amount of payment tokens in that token's lowest denominationto deposit.\\n  function _transferPaymentTokensFromUserToYieldManager(uint32 marketIndex, uint256 amount)\\n    internal\\n    virtual\\n  {\\n    IERC20(paymentTokens[marketIndex]).safeTransferFrom(\\n      msg.sender,\\n      yieldManagers[marketIndex],\\n      amount\\n    );\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       MINT POSITION       \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Allows users to mint synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.\\n  /// @dev Called by external functions to mint either long or short. If a user mints multiple times before a price update, these are treated as a single mint.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amount Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.\\n  /// @param isLong Whether the mint is for a long or short synth.\\n  function _mintNextPrice(\\n    uint32 marketIndex,\\n    uint256 amount,\\n    bool isLong\\n  )\\n    internal\\n    virtual\\n    updateSystemStateMarketAndExecuteOutstandingNextPriceSettlements(msg.sender, marketIndex)\\n  {\\n    _transferPaymentTokensFromUserToYieldManager(marketIndex, amount);\\n\\n    batched_amountPaymentToken_deposit[marketIndex][isLong] += amount;\\n    userNextPrice_paymentToken_depositAmount[marketIndex][isLong][msg.sender] += amount;\\n    uint256 nextUpdateIndex = marketUpdateIndex[marketIndex] + 1;\\n    userNextPrice_currentUpdateIndex[marketIndex][msg.sender] = nextUpdateIndex;\\n\\n    emit NextPriceDeposit(marketIndex, isLong, amount, msg.sender, nextUpdateIndex);\\n  }\\n\\n  /// @notice Allows users to mint long synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amount Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.\\n  function mintLongNextPrice(uint32 marketIndex, uint256 amount) external override {\\n    _mintNextPrice(marketIndex, amount, true);\\n  }\\n\\n  /// @notice Allows users to mint short synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amount Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.\\n  function mintShortNextPrice(uint32 marketIndex, uint256 amount) external override {\\n    _mintNextPrice(marketIndex, amount, false);\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551      REDEEM POSITION      \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Allows users to redeem their synthetic tokens for payment tokens. To prevent front-running these redeems are executed on the next price update from the oracle.\\n  /// @dev Called by external functions to redeem either long or short. Payment tokens are actually transferred to the user when executeOutstandingNextPriceSettlements is called from a function call by the user.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param tokens_redeem Amount in wei of synth tokens to redeem.\\n  /// @param isLong Whether this redeem is for a long or short synth.\\n  function _redeemNextPrice(\\n    uint32 marketIndex,\\n    uint256 tokens_redeem,\\n    bool isLong\\n  )\\n    internal\\n    virtual\\n    updateSystemStateMarketAndExecuteOutstandingNextPriceSettlements(msg.sender, marketIndex)\\n  {\\n    ISyntheticToken(syntheticTokens[marketIndex][isLong]).transferFrom(\\n      msg.sender,\\n      address(this),\\n      tokens_redeem\\n    );\\n\\n    userNextPrice_syntheticToken_redeemAmount[marketIndex][isLong][msg.sender] += tokens_redeem;\\n    uint256 nextUpdateIndex = marketUpdateIndex[marketIndex] + 1;\\n    userNextPrice_currentUpdateIndex[marketIndex][msg.sender] = nextUpdateIndex;\\n\\n    batched_amountSyntheticToken_redeem[marketIndex][isLong] += tokens_redeem;\\n\\n    emit NextPriceRedeem(marketIndex, isLong, tokens_redeem, msg.sender, nextUpdateIndex);\\n  }\\n\\n  /// @notice  Allows users to redeem long synthetic assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param tokens_redeem Amount in wei of synth tokens to redeem at the next oracle price.\\n  function redeemLongNextPrice(uint32 marketIndex, uint256 tokens_redeem) external {\\n    _redeemNextPrice(marketIndex, tokens_redeem, true);\\n  }\\n\\n  /// @notice  Allows users to redeem short synthetic assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param tokens_redeem Amount in wei of synth tokens to redeem at the next oracle price.\\n  function redeemShortNextPrice(uint32 marketIndex, uint256 tokens_redeem) external {\\n    _redeemNextPrice(marketIndex, tokens_redeem, false);\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       SHIFT POSITION      \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice  Allows users to shift their position from one side of the market to the other in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle.\\n  /// @dev Called by external functions to shift either way. Intended for primary use by Staker.sol\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amountSyntheticTokensToShift Amount in wei of synthetic tokens to shift from the one side to the other at the next oracle price update.\\n  /// @param isShiftFromLong Whether the token shift is from long to short (true), or short to long (false).\\n  function shiftPositionNextPrice(\\n    uint32 marketIndex,\\n    uint256 amountSyntheticTokensToShift,\\n    bool isShiftFromLong\\n  )\\n    public\\n    virtual\\n    override\\n    updateSystemStateMarketAndExecuteOutstandingNextPriceSettlements(msg.sender, marketIndex)\\n  {\\n    require(\\n      ISyntheticToken(syntheticTokens[marketIndex][isShiftFromLong]).transferFrom(\\n        msg.sender,\\n        address(this),\\n        amountSyntheticTokensToShift\\n      )\\n    );\\n\\n    userNextPrice_syntheticToken_toShiftAwayFrom_marketSide[marketIndex][isShiftFromLong][\\n      msg.sender\\n    ] += amountSyntheticTokensToShift;\\n    uint256 nextUpdateIndex = marketUpdateIndex[marketIndex] + 1;\\n    userNextPrice_currentUpdateIndex[marketIndex][msg.sender] = nextUpdateIndex;\\n\\n    batched_amountSyntheticToken_toShiftAwayFrom_marketSide[marketIndex][\\n      isShiftFromLong\\n    ] += amountSyntheticTokensToShift;\\n\\n    emit NextPriceSyntheticPositionShift(\\n      marketIndex,\\n      isShiftFromLong,\\n      amountSyntheticTokensToShift,\\n      msg.sender,\\n      nextUpdateIndex\\n    );\\n  }\\n\\n  /// @notice Allows users to shift their position from long to short in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amountSyntheticTokensToShift Amount in wei of synthetic tokens to shift from long to short the next oracle price update.\\n  function shiftPositionFromLongNextPrice(uint32 marketIndex, uint256 amountSyntheticTokensToShift)\\n    external\\n    override\\n  {\\n    shiftPositionNextPrice(marketIndex, amountSyntheticTokensToShift, true);\\n  }\\n\\n  /// @notice Allows users to shift their position from short to long in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amountSyntheticTokensToShift Amount in wei of synthetic tokens to shift from the short to long at the next oracle price update.\\n  function shiftPositionFromShortNextPrice(uint32 marketIndex, uint256 amountSyntheticTokensToShift)\\n    external\\n    override\\n  {\\n    shiftPositionNextPrice(marketIndex, amountSyntheticTokensToShift, false);\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551     NEXT PRICE SETTLEMENTS     \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Transfers outstanding synth tokens from a next price mint to the user.\\n  /// @dev The outstanding synths should already be reflected for the user due to balanceOf in SyntheticToken.sol, this just does the accounting.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param user The address of the user for whom to execute the function for.\\n  /// @param isLong Whether this is for the long or short synth for the market.\\n  function _executeOutstandingNextPriceMints(\\n    uint32 marketIndex,\\n    address user,\\n    bool isLong\\n  ) internal virtual {\\n    uint256 currentPaymentTokenDepositAmount = userNextPrice_paymentToken_depositAmount[\\n      marketIndex\\n    ][isLong][user];\\n    if (currentPaymentTokenDepositAmount > 0) {\\n      userNextPrice_paymentToken_depositAmount[marketIndex][isLong][user] = 0;\\n      uint256 amountSyntheticTokensToTransferToUser = _getAmountSyntheticToken(\\n        currentPaymentTokenDepositAmount,\\n        syntheticToken_priceSnapshot[marketIndex][isLong][\\n          userNextPrice_currentUpdateIndex[marketIndex][user]\\n        ]\\n      );\\n      ISyntheticToken(syntheticTokens[marketIndex][isLong]).transfer(\\n        user,\\n        amountSyntheticTokensToTransferToUser\\n      );\\n    }\\n  }\\n\\n  /// @notice Transfers outstanding payment tokens from a next price redemption to the user.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param user The address of the user for whom to execute the function for.\\n  /// @param isLong Whether this is for the long or short synth for the market.\\n  function _executeOutstandingNextPriceRedeems(\\n    uint32 marketIndex,\\n    address user,\\n    bool isLong\\n  ) internal virtual {\\n    uint256 currentSyntheticTokenRedemptions = userNextPrice_syntheticToken_redeemAmount[\\n      marketIndex\\n    ][isLong][user];\\n    if (currentSyntheticTokenRedemptions > 0) {\\n      userNextPrice_syntheticToken_redeemAmount[marketIndex][isLong][user] = 0;\\n      uint256 amountPaymentToken_toRedeem = _getAmountPaymentToken(\\n        currentSyntheticTokenRedemptions,\\n        syntheticToken_priceSnapshot[marketIndex][isLong][\\n          userNextPrice_currentUpdateIndex[marketIndex][user]\\n        ]\\n      );\\n\\n      IYieldManager(yieldManagers[marketIndex]).transferPaymentTokensToUser(\\n        user,\\n        amountPaymentToken_toRedeem\\n      );\\n    }\\n  }\\n\\n  /// @notice Transfers outstanding synth tokens from a next price position shift to the user.\\n  /// @dev The outstanding synths should already be reflected for the user due to balanceOf in SyntheticToken.sol, this just does the accounting.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param user The address of the user for whom to execute the function for.\\n  /// @param isShiftFromLong Whether the token shift was from long to short (true), or short to long (false).\\n  function _executeOutstandingNextPriceTokenShifts(\\n    uint32 marketIndex,\\n    address user,\\n    bool isShiftFromLong\\n  ) internal virtual {\\n    uint256 syntheticToken_toShiftAwayFrom_marketSide = userNextPrice_syntheticToken_toShiftAwayFrom_marketSide[\\n        marketIndex\\n      ][isShiftFromLong][user];\\n    if (syntheticToken_toShiftAwayFrom_marketSide > 0) {\\n      uint256 syntheticToken_toShiftTowardsTargetSide = getAmountSyntheticTokenToMintOnTargetSide(\\n        marketIndex,\\n        syntheticToken_toShiftAwayFrom_marketSide,\\n        isShiftFromLong,\\n        userNextPrice_currentUpdateIndex[marketIndex][user]\\n      );\\n\\n      userNextPrice_syntheticToken_toShiftAwayFrom_marketSide[marketIndex][isShiftFromLong][\\n        user\\n      ] = 0;\\n\\n      require(\\n        ISyntheticToken(syntheticTokens[marketIndex][!isShiftFromLong]).transfer(\\n          user,\\n          syntheticToken_toShiftTowardsTargetSide\\n        )\\n      );\\n    }\\n  }\\n\\n  /// @notice After markets have been batched updated on a new oracle price, transfers any owed tokens to a user from their next price actions for that update to that user.\\n  /// @dev Once the market has updated for the next price, should be guaranteed (through modifiers) to execute for a user before user initiation of new next price actions.\\n  /// @param user The address of the user for whom to execute the function.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  function _executeOutstandingNextPriceSettlements(address user, uint32 marketIndex)\\n    internal\\n    virtual\\n  {\\n    uint256 userCurrentUpdateIndex = userNextPrice_currentUpdateIndex[marketIndex][user];\\n    if (userCurrentUpdateIndex != 0 && userCurrentUpdateIndex <= marketUpdateIndex[marketIndex]) {\\n      _executeOutstandingNextPriceMints(marketIndex, user, true);\\n      _executeOutstandingNextPriceMints(marketIndex, user, false);\\n      _executeOutstandingNextPriceRedeems(marketIndex, user, true);\\n      _executeOutstandingNextPriceRedeems(marketIndex, user, false);\\n      _executeOutstandingNextPriceTokenShifts(marketIndex, user, true);\\n      _executeOutstandingNextPriceTokenShifts(marketIndex, user, false);\\n\\n      userNextPrice_currentUpdateIndex[marketIndex][user] = 0;\\n\\n      emit ExecuteNextPriceSettlementsUser(user, marketIndex);\\n    }\\n  }\\n\\n  /// @notice After markets have been batched updated on a new oracle price, transfers any owed tokens to a user from their next price actions for that update to that user.\\n  /// @param user The address of the user for whom to execute the function.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  function executeOutstandingNextPriceSettlementsUser(address user, uint32 marketIndex)\\n    external\\n    override\\n  {\\n    _executeOutstandingNextPriceSettlements(user, marketIndex);\\n  }\\n\\n  /// @notice Executes outstanding next price settlements for a user for multiple markets.\\n  /// @param user The address of the user for whom to execute the function.\\n  /// @param marketIndexes An array of int32s which each uniquely identify a market.\\n  function executeOutstandingNextPriceSettlementsUserMulti(\\n    address user,\\n    uint32[] memory marketIndexes\\n  ) external {\\n    uint256 length = marketIndexes.length;\\n    for (uint256 i = 0; i < length; i++) {\\n      _executeOutstandingNextPriceSettlements(user, marketIndexes[i]);\\n    }\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551   BATCHED NEXT PRICE SETTLEMENT ACTIONS   \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Either transfers funds from the yield manager to this contract if redeems > deposits,\\n  /// and vice versa. The yield manager handles depositing and withdrawing the funds from a yield market.\\n  /// @dev When all batched next price actions are handled the total value in the market can either increase or decrease based on the value of mints and redeems.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param totalPaymentTokenValueChangeForMarket An int256 which indicates the magnitude and direction of the change in market value.\\n  function _handleTotalPaymentTokenValueChangeForMarketWithYieldManager(\\n    uint32 marketIndex,\\n    int256 totalPaymentTokenValueChangeForMarket\\n  ) internal virtual {\\n    if (totalPaymentTokenValueChangeForMarket > 0) {\\n      IYieldManager(yieldManagers[marketIndex]).depositPaymentToken(\\n        uint256(totalPaymentTokenValueChangeForMarket)\\n      );\\n    } else if (totalPaymentTokenValueChangeForMarket < 0) {\\n      // NB there will be issues here if not enough liquidity exists to withdraw\\n      // Boolean should be returned from yield manager and think how to appropriately handle this\\n      IYieldManager(yieldManagers[marketIndex]).removePaymentTokenFromMarket(\\n        uint256(-totalPaymentTokenValueChangeForMarket)\\n      );\\n    }\\n  }\\n\\n  /// @notice Given a desired change in synth token supply, either mints or burns tokens to achieve that desired change.\\n  /// @dev When all batched next price actions are executed total supply for a synth can either increase or decrease.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param isLong Whether this function should execute for the long or short synth for the market.\\n  /// @param changeInSyntheticTokensTotalSupply The amount in wei by which synth token supply should change.\\n  function _handleChangeInSyntheticTokensTotalSupply(\\n    uint32 marketIndex,\\n    bool isLong,\\n    int256 changeInSyntheticTokensTotalSupply\\n  ) internal virtual {\\n    if (changeInSyntheticTokensTotalSupply > 0) {\\n      ISyntheticToken(syntheticTokens[marketIndex][isLong]).mint(\\n        address(this),\\n        uint256(changeInSyntheticTokensTotalSupply)\\n      );\\n    } else if (changeInSyntheticTokensTotalSupply < 0) {\\n      ISyntheticToken(syntheticTokens[marketIndex][isLong]).burn(\\n        uint256(-changeInSyntheticTokensTotalSupply)\\n      );\\n    }\\n  }\\n\\n  /**\\n  @notice Performs all batched next price actions on an oracle price update.\\n  @dev Mints or burns all synthetic tokens for this contract.\\n\\n    After this function is executed all user actions in that batch are confirmed and can be settled individually by\\n      calling _executeOutstandingNexPriceSettlements for a given user.\\n\\n    The maths here is safe from rounding errors since it always over estimates on the batch with division.\\n      (as an example (5/3) + (5/3) = 2 but (5+5)/3 = 10/3 = 3, so the batched action would mint one more)\\n  @param marketIndex An uint32 which uniquely identifies a market.\\n  @param syntheticTokenPrice_inPaymentTokens_long The long synthetic token price for this oracle price update.\\n  @param syntheticTokenPrice_inPaymentTokens_short The short synthetic token price for this oracle price update.\\n  @return long_changeInMarketValue_inPaymentToken The total value change for the long side after all batched actions are executed.\\n  @return short_changeInMarketValue_inPaymentToken The total value change for the short side after all batched actions are executed.\\n  */\\n  function _batchConfirmOutstandingPendingActions(\\n    uint32 marketIndex,\\n    uint256 syntheticTokenPrice_inPaymentTokens_long,\\n    uint256 syntheticTokenPrice_inPaymentTokens_short\\n  )\\n    internal\\n    virtual\\n    returns (\\n      int256 long_changeInMarketValue_inPaymentToken,\\n      int256 short_changeInMarketValue_inPaymentToken\\n    )\\n  {\\n    int256 changeInSupply_syntheticToken_long;\\n    int256 changeInSupply_syntheticToken_short;\\n\\n    // NOTE: the only reason we are reusing amountForCurrentAction_workingVariable for all actions (redeemLong, redeemShort, mintLong, mintShort, shiftFromLong, shiftFromShort) is to reduce stack usage\\n    uint256 amountForCurrentAction_workingVariable = batched_amountPaymentToken_deposit[\\n      marketIndex\\n    ][true];\\n\\n    // Handle batched deposits LONG\\n    if (amountForCurrentAction_workingVariable > 0) {\\n      long_changeInMarketValue_inPaymentToken = int256(amountForCurrentAction_workingVariable);\\n\\n      batched_amountPaymentToken_deposit[marketIndex][true] = 0;\\n\\n      changeInSupply_syntheticToken_long = int256(\\n        _getAmountSyntheticToken(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_long\\n        )\\n      );\\n    }\\n\\n    // Handle batched deposits SHORT\\n    amountForCurrentAction_workingVariable = batched_amountPaymentToken_deposit[marketIndex][false];\\n    if (amountForCurrentAction_workingVariable > 0) {\\n      short_changeInMarketValue_inPaymentToken = int256(amountForCurrentAction_workingVariable);\\n\\n      batched_amountPaymentToken_deposit[marketIndex][false] = 0;\\n\\n      changeInSupply_syntheticToken_short = int256(\\n        _getAmountSyntheticToken(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_short\\n        )\\n      );\\n    }\\n\\n    // Handle shift tokens from LONG to SHORT\\n    amountForCurrentAction_workingVariable = batched_amountSyntheticToken_toShiftAwayFrom_marketSide[\\n      marketIndex\\n    ][true];\\n\\n    if (amountForCurrentAction_workingVariable > 0) {\\n      int256 paymentTokenValueChangeForShiftToShort = int256(\\n        _getAmountPaymentToken(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_long\\n        )\\n      );\\n\\n      long_changeInMarketValue_inPaymentToken -= paymentTokenValueChangeForShiftToShort;\\n      short_changeInMarketValue_inPaymentToken += paymentTokenValueChangeForShiftToShort;\\n\\n      changeInSupply_syntheticToken_long -= int256(amountForCurrentAction_workingVariable);\\n      changeInSupply_syntheticToken_short += int256(\\n        _getEquivalentAmountSyntheticTokensOnTargetSide(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_long,\\n          syntheticTokenPrice_inPaymentTokens_short\\n        )\\n      );\\n\\n      batched_amountSyntheticToken_toShiftAwayFrom_marketSide[marketIndex][true] = 0;\\n    }\\n\\n    // Handle shift tokens from SHORT to LONG\\n    amountForCurrentAction_workingVariable = batched_amountSyntheticToken_toShiftAwayFrom_marketSide[\\n      marketIndex\\n    ][false];\\n    if (amountForCurrentAction_workingVariable > 0) {\\n      int256 paymentTokenValueChangeForShiftToLong = int256(\\n        _getAmountPaymentToken(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_short\\n        )\\n      );\\n\\n      short_changeInMarketValue_inPaymentToken -= paymentTokenValueChangeForShiftToLong;\\n      long_changeInMarketValue_inPaymentToken += paymentTokenValueChangeForShiftToLong;\\n\\n      changeInSupply_syntheticToken_short -= int256(amountForCurrentAction_workingVariable);\\n      changeInSupply_syntheticToken_long += int256(\\n        _getEquivalentAmountSyntheticTokensOnTargetSide(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_short,\\n          syntheticTokenPrice_inPaymentTokens_long\\n        )\\n      );\\n\\n      batched_amountSyntheticToken_toShiftAwayFrom_marketSide[marketIndex][false] = 0;\\n    }\\n\\n    // Handle batched redeems LONG\\n    amountForCurrentAction_workingVariable = batched_amountSyntheticToken_redeem[marketIndex][true];\\n    if (amountForCurrentAction_workingVariable > 0) {\\n      long_changeInMarketValue_inPaymentToken -= int256(\\n        _getAmountPaymentToken(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_long\\n        )\\n      );\\n      changeInSupply_syntheticToken_long -= int256(amountForCurrentAction_workingVariable);\\n\\n      batched_amountSyntheticToken_redeem[marketIndex][true] = 0;\\n    }\\n\\n    // Handle batched redeems SHORT\\n    amountForCurrentAction_workingVariable = batched_amountSyntheticToken_redeem[marketIndex][\\n      false\\n    ];\\n    if (amountForCurrentAction_workingVariable > 0) {\\n      short_changeInMarketValue_inPaymentToken -= int256(\\n        _getAmountPaymentToken(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_short\\n        )\\n      );\\n      changeInSupply_syntheticToken_short -= int256(amountForCurrentAction_workingVariable);\\n\\n      batched_amountSyntheticToken_redeem[marketIndex][false] = 0;\\n    }\\n\\n    // Batch settle payment tokens\\n    _handleTotalPaymentTokenValueChangeForMarketWithYieldManager(\\n      marketIndex,\\n      long_changeInMarketValue_inPaymentToken + short_changeInMarketValue_inPaymentToken\\n    );\\n    // Batch settle synthetic tokens\\n    _handleChangeInSyntheticTokensTotalSupply(\\n      marketIndex,\\n      true,\\n      changeInSupply_syntheticToken_long\\n    );\\n    _handleChangeInSyntheticTokensTotalSupply(\\n      marketIndex,\\n      false,\\n      changeInSupply_syntheticToken_short\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x6ece3776b4eecd66b0c8b7175f2caea21a036f7a28c4314be90d453388db993b\",\"license\":\"BUSL-1.1\"},\"contracts/abstract/AccessControlledAndUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nabstract contract AccessControlledAndUpgradeable is\\n  Initializable,\\n  AccessControlUpgradeable,\\n  UUPSUpgradeable\\n{\\n  bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n  bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n  /// @notice Initializes the contract when called by parent initializers.\\n  /// @param initialAdmin The initial admin who will hold all roles.\\n  function _AccessControlledAndUpgradeable_init(address initialAdmin) internal initializer {\\n    __AccessControl_init();\\n    __UUPSUpgradeable_init();\\n    _AccessControlledAndUpgradeable_init_unchained(initialAdmin);\\n  }\\n\\n  /// @notice Initializes the contract for contracts that already call both __AccessControl_init\\n  ///         and _UUPSUpgradeable_init when initializing.\\n  /// @param initialAdmin The initial admin who will hold all roles.\\n  function _AccessControlledAndUpgradeable_init_unchained(address initialAdmin)\\n    internal\\n    initializer\\n  {\\n    require(initialAdmin != address(0));\\n    _setupRole(DEFAULT_ADMIN_ROLE, initialAdmin);\\n    _setupRole(ADMIN_ROLE, initialAdmin);\\n    _setupRole(UPGRADER_ROLE, initialAdmin);\\n  }\\n\\n  /// @notice Authorizes an upgrade to a new address.\\n  /// @dev Can only be called by addresses wih UPGRADER_ROLE\\n  function _authorizeUpgrade(address) internal override onlyRole(UPGRADER_ROLE) {}\\n}\\n\",\"keccak256\":\"0x1e82a4f784ef106965824647b8498fd8a93bdb75ea46d0cdefd27d08af0b75fe\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILongShort.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.3;\\n\\ninterface ILongShort {\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551           EVENTS           \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  event LongShortV1(address admin, address tokenFactory, address staker);\\n\\n  event SystemStateUpdated(\\n    uint32 marketIndex,\\n    uint256 updateIndex,\\n    int256 underlyingAssetPrice,\\n    uint256 longValue,\\n    uint256 shortValue,\\n    uint256 longPrice,\\n    uint256 shortPrice\\n  );\\n\\n  event SyntheticMarketCreated(\\n    uint32 marketIndex,\\n    address longTokenAddress,\\n    address shortTokenAddress,\\n    address paymentToken,\\n    int256 initialAssetPrice,\\n    string name,\\n    string symbol,\\n    address oracleAddress,\\n    address yieldManagerAddress\\n  );\\n\\n  event NextPriceRedeem(\\n    uint32 marketIndex,\\n    bool isLong,\\n    uint256 synthRedeemed,\\n    address user,\\n    uint256 oracleUpdateIndex\\n  );\\n\\n  event NextPriceSyntheticPositionShift(\\n    uint32 marketIndex,\\n    bool isShiftFromLong,\\n    uint256 synthShifted,\\n    address user,\\n    uint256 oracleUpdateIndex\\n  );\\n\\n  event NextPriceDeposit(\\n    uint32 marketIndex,\\n    bool isLong,\\n    uint256 depositAdded,\\n    address user,\\n    uint256 oracleUpdateIndex\\n  );\\n\\n  event OracleUpdated(uint32 marketIndex, address oldOracleAddress, address newOracleAddress);\\n\\n  event NewMarketLaunchedAndSeeded(uint32 marketIndex, uint256 initialSeed);\\n\\n  event ExecuteNextPriceSettlementsUser(address user, uint32 marketIndex);\\n\\n  function syntheticTokens(uint32, bool) external view returns (address);\\n\\n  function marketUpdateIndex(uint32) external view returns (uint256);\\n\\n  function syntheticToken_priceSnapshot(\\n    uint32,\\n    bool,\\n    uint256\\n  ) external view returns (uint256);\\n\\n  function marketSideValueInPaymentToken(uint32 marketIndex, bool isLong)\\n    external\\n    view\\n    returns (uint256 marketSideValueInPaymentToken);\\n\\n  function updateSystemState(uint32 marketIndex) external;\\n\\n  function updateSystemStateMulti(uint32[] calldata marketIndex) external;\\n\\n  function getUsersConfirmedButNotSettledSynthBalance(\\n    address user,\\n    uint32 marketIndex,\\n    bool isLong\\n  ) external view returns (uint256 confirmedButNotSettledBalance);\\n\\n  function executeOutstandingNextPriceSettlementsUser(address user, uint32 marketIndex) external;\\n\\n  function shiftPositionNextPrice(\\n    uint32 marketIndex,\\n    uint256 amountSyntheticTokensToShift,\\n    bool isShiftFromLong\\n  ) external;\\n\\n  function shiftPositionFromLongNextPrice(uint32 marketIndex, uint256 amountSyntheticTokensToShift)\\n    external;\\n\\n  function shiftPositionFromShortNextPrice(uint32 marketIndex, uint256 amountSyntheticTokensToShift)\\n    external;\\n\\n  function getAmountSyntheticTokenToMintOnTargetSide(\\n    uint32 marketIndex,\\n    uint256 amountSyntheticTokenShiftedFromOneSide,\\n    bool isShiftFromLong,\\n    uint256 priceSnapshotIndex\\n  ) external view returns (uint256 amountSynthShiftedToOtherSide);\\n\\n  function mintLongNextPrice(uint32 marketIndex, uint256 amount) external;\\n\\n  function mintShortNextPrice(uint32 marketIndex, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xb22cae43ef42ace257552d7814c6ad52440ae21274f5d01337a4014979ec11d2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOracleManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.3;\\n\\n/*\\n * Manages price feeds from different oracle implementations.\\n */\\ninterface IOracleManager {\\n  function updatePrice() external returns (int256);\\n\\n  /*\\n   *Returns the latest price from the oracle feed.\\n   */\\n  function getLatestPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x257b71cc5a9394ba0ea022556bf1f38012046c5ca568ff0d73ce6cf95c278376\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStaker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.3;\\n\\ninterface IStaker {\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551           EVENTS           \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  event StakerV1(\\n    address admin,\\n    address floatTreasury,\\n    address floatCapital,\\n    address floatToken,\\n    uint256 floatPercentage\\n  );\\n\\n  event MarketAddedToStaker(\\n    uint32 marketIndex,\\n    uint256 exitFee_e18,\\n    uint256 period,\\n    uint256 multiplier,\\n    uint256 balanceIncentiveExponent,\\n    int256 balanceIncentiveEquilibriumOffset,\\n    uint256 safeExponentBitShifting\\n  );\\n\\n  event AccumulativeIssuancePerStakedSynthSnapshotCreated(\\n    uint32 marketIndex,\\n    uint256 accumulativeFloatIssuanceSnapshotIndex,\\n    uint256 accumulativeLong,\\n    uint256 accumulativeShort\\n  );\\n\\n  event StakeAdded(address user, address token, uint256 amount, uint256 lastMintIndex);\\n\\n  event StakeWithdrawn(address user, address token, uint256 amount);\\n\\n  // Note: the `amountFloatMinted` isn't strictly needed by the graph, but it is good to add it to validate calculations are accurate.\\n  event FloatMinted(address user, uint32 marketIndex, uint256 amountFloatMinted);\\n\\n  event MarketLaunchIncentiveParametersChanges(\\n    uint32 marketIndex,\\n    uint256 period,\\n    uint256 multiplier\\n  );\\n\\n  event StakeWithdrawalFeeUpdated(uint32 marketIndex, uint256 stakeWithdralFee);\\n\\n  event BalanceIncentiveParamsUpdated(\\n    uint32 marketIndex,\\n    uint256 balanceIncentiveExponent,\\n    int256 balanceIncentiveCurve_equilibriumOffset,\\n    uint256 safeExponentBitShifting\\n  );\\n\\n  event FloatPercentageUpdated(uint256 floatPercentage);\\n\\n  event NextPriceStakeShift(\\n    address user,\\n    uint32 marketIndex,\\n    uint256 amount,\\n    bool isShiftFromLong,\\n    uint256 userShiftIndex\\n  );\\n\\n  // only for graph validation\\n  event StakeShifted(\\n    address user,\\n    uint32 marketIndex,\\n    uint256 newAmountStakedLong,\\n    uint256 newAmountStakedShort\\n  );\\n\\n  function userAmountStaked(address, address) external view returns (uint256);\\n\\n  function addNewStakingFund(\\n    uint32 marketIndex,\\n    address longTokenAddress,\\n    address shortTokenAddress,\\n    uint256 kInitialMultiplier,\\n    uint256 kPeriod,\\n    uint256 unstakeFee_e18,\\n    uint256 _balanceIncentiveCurve_exponent,\\n    int256 _balanceIncentiveCurve_equilibriumOffset\\n  ) external;\\n\\n  function pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations(\\n    uint32 marketIndex,\\n    uint256 marketUpdateIndex,\\n    uint256 longTokenPrice,\\n    uint256 shortTokenPrice,\\n    uint256 longValue,\\n    uint256 shortValue\\n  ) external;\\n\\n  function stakeFromUser(address from, uint256 amount) external;\\n\\n  function shiftTokens(\\n    uint256 amountSyntheticTokensToShift,\\n    uint32 marketIndex,\\n    bool isShiftFromLong\\n  ) external;\\n}\\n\",\"keccak256\":\"0x20995aa36f54d4019dd0e685b3f827342f03c47b8b17a0f97918d40177c36669\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.3;\\n\\n/**\\n@title SyntheticToken\\n@notice An ERC20 token that tracks or inversely tracks the price of an\\n        underlying asset with floating exposure.\\n*/\\ninterface ISyntheticToken {\\n  // function MINTER_ROLE() external returns (bytes32);\\n\\n  /// @notice Allows users to stake their synthetic tokens to earn Float.\\n  function stake(uint256) external;\\n\\n  function mint(address, uint256) external;\\n\\n  function totalSupply() external returns (uint256);\\n\\n  function transferFrom(\\n    address,\\n    address,\\n    uint256\\n  ) external returns (bool);\\n\\n  function transfer(address, uint256) external returns (bool);\\n\\n  function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xba1a2c66bf11e22077a46f8037498ec577250e7de27268d88f4ea989c7532040\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.3;\\n\\ninterface ITokenFactory {\\n  function createSyntheticToken(\\n    string calldata syntheticName,\\n    string calldata syntheticSymbol,\\n    address staker,\\n    uint32 marketIndex,\\n    bool isLong\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x90e4adf1a78ded36d804731a69137b3a4b6c4a6e9c9af46c7ccfa8d91b976e2e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IYieldManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.3;\\n\\n/// @notice Manages yield accumulation for the LongShort contract. Each market is deployed with its own yield manager to simplify the bookkeeping, as different markets may share a payment token and yield pool.\\nabstract contract IYieldManager {\\n  event ClaimAaveRewardTokenToTreasury(uint256 amount);\\n\\n  event YieldDistributed(uint256 unrealizedYield, uint256 treasuryYieldPercent_e18);\\n\\n  /// @dev This is purely saving some gas, but the subgraph will know how much is due for the treasury at all times - no need to include in event.\\n  event WithdrawTreasuryFunds();\\n\\n  /// @notice distributed yield not yet transferred to the treasury\\n  function totalReservedForTreasury() external virtual returns (uint256);\\n\\n  /// @notice Deposits the given amount of payment tokens into this yield manager.\\n  /// @param amount Amount of payment token to deposit\\n  function depositPaymentToken(uint256 amount) external virtual;\\n\\n  /// @notice Allows the LongShort pay out a user from tokens already withdrawn from Aave\\n  /// @param user User to recieve the payout\\n  /// @param amount Amount of payment token to pay to user\\n  function transferPaymentTokensToUser(address user, uint256 amount) external virtual;\\n\\n  /// @notice Withdraws the given amount of tokens from this yield manager.\\n  /// @param amount Amount of payment token to withdraw\\n  function removePaymentTokenFromMarket(uint256 amount) external virtual;\\n\\n  /**    \\n    @notice Calculates and updates the yield allocation to the treasury and the market\\n    @dev treasuryPercent = 1 - marketPercent\\n    @param totalValueRealizedForMarket total value of long and short side of the market\\n    @param treasuryYieldPercent_e18 Percentage of yield in base 1e18 that is allocated to the treasury\\n    @return amountForMarketIncentives The market allocation of the yield\\n  */\\n  function distributeYieldForTreasuryAndReturnMarketAllocation(\\n    uint256 totalValueRealizedForMarket,\\n    uint256 treasuryYieldPercent_e18\\n  ) external virtual returns (uint256 amountForMarketIncentives);\\n\\n  /// @notice Withdraw treasury allocated accrued yield from the lending pool to the treasury contract\\n  function withdrawTreasuryFunds() external virtual;\\n\\n  /// @notice Initializes a specific yield manager to a given market\\n  function initializeForMarket() external virtual;\\n}\\n\",\"keccak256\":\"0x20116e375d536c6ee7bec74d1ee5c1a552465a79fc8f1f2a9e2428078d3648f6\",\"license\":\"BUSL-1.1\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614c5a806100206000396000f3fe6080604052600436106102e45760003560e01c8063867dfc6d11610190578063c0c53b8b116100dc578063e6b604e011610095578063f41cb1951161006f578063f41cb19514610aa2578063f68a327f14610ad9578063f72c0d8b14610af9578063f80c9b9214610b2d576102e4565b8063e6b604e014610a41578063e77772fe14610a61578063eeb0235214610a82576102e4565b8063c0c53b8b14610962578063c2b8007214610982578063c2e12471146109c1578063d547741f146109e1578063d88905c914610a01578063da04ce1414610a21576102e4565b80639c5b0ee311610149578063b054c4a111610123578063b054c4a11461088e578063b36f5374146108d0578063b3c7e21814610901578063bb0a45291461093a576102e4565b80639c5b0ee3146108095780639dc39e0f14610840578063a217fddf14610879576102e4565b8063867dfc6d1461073b5780638900bdfa1461075b578063897a07861461078957806391a9fa61146107a957806391d14854146107c957806392f6fe80146107e9576102e4565b80633d6a2b3f1161024f57806364e4a81d116102085780636f486c5b116101e25780636f486c5b1461068857806371fd9623146106c757806375b238fc146106e75780637a0e94f01461071b576102e4565b806364e4a81d1461060f578063682ad286146106485780636c8d2b9714610668576102e4565b80633d6a2b3f14610540578063414ffd50146105605780634f1ef286146105805780635ebaf1db14610593578063636190c8146105bc57806364d16f53146105ef576102e4565b8063248a9ca3116102a1578063248a9ca3146104385780632f2ff15d14610468578063348986841461048857806334daaa25146104c757806336568abe146105005780633659cfe614610520576102e4565b806301ffc9a7146102e957806305c8146f1461031e5780630e5140dc1461034057806314c88ffa1461038d5780631badf5c0146103bb57806321658e481461040a575b600080fd5b3480156102f557600080fd5b506103096103043660046142d1565b610b66565b60405190151581526020015b60405180910390f35b34801561032a57600080fd5b5061033e610339366004614481565b610b9f565b005b34801561034c57600080fd5b5061037f61035b3660046144f1565b61016760209081526000938452604080852082529284528284209052825290205481565b604051908152602001610315565b34801561039957600080fd5b5061037f6103a8366004614481565b6101596020526000908152604090205481565b3480156103c757600080fd5b506103f26103d6366004614481565b61015c602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610315565b34801561041657600080fd5b5061037f610425366004614481565b61015d6020526000908152604090205481565b34801561044457600080fd5b5061037f61045336600461428a565b60009081526065602052604090206001015490565b34801561047457600080fd5b5061033e6104833660046142a2565b610bab565b34801561049457600080fd5b5061037f6104a33660046144f1565b61016660209081526000938452604080852082529284528284209052825290205481565b3480156104d357600080fd5b5061037f6104e23660046144c6565b61016260209081526000928352604080842090915290825290205481565b34801561050c57600080fd5b5061033e61051b3660046142a2565b610bd7565b34801561052c57600080fd5b5061033e61053b366004613fa5565b610c5a565b34801561054c57600080fd5b5061033e61055b3660046143b7565b610c7e565b34801561056c57600080fd5b5061033e61057b3660046145fe565b610ea5565b61033e61058e3660046140eb565b61113c565b34801561059f57600080fd5b50610128546103f29064010000000090046001600160a01b031681565b3480156105c857600080fd5b50610128546105da9063ffffffff1681565b60405163ffffffff9091168152602001610315565b3480156105fb57600080fd5b5061033e61060a36600461449b565b611151565b34801561061b57600080fd5b5061037f61062a3660046144c6565b61016160209081526000928352604080842090915290825290205481565b34801561065457600080fd5b5061033e61066336600461455c565b6111d7565b34801561067457600080fd5b5061033e6106833660046141fe565b6111e3565b34801561069457600080fd5b5061037f6106a336600461451e565b61016060209081526000938452604080852082529284528284209052825290205481565b3480156106d357600080fd5b5061033e6106e2366004614585565b611244565b3480156106f357600080fd5b5061037f7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b34801561072757600080fd5b5061033e610736366004614027565b61140b565b34801561074757600080fd5b5061033e61075636600461455c565b61145b565b34801561076757600080fd5b5061037f610776366004614481565b6101586020526000908152604090205481565b34801561079557600080fd5b5061033e6107a436600461418d565b611467565b3480156107b557600080fd5b5061033e6107c436600461455c565b611471565b3480156107d557600080fd5b506103096107e43660046142a2565b61147d565b3480156107f557600080fd5b5061037f6108043660046145b9565b6114a8565b34801561081557600080fd5b506103f2610824366004614481565b61015b602052600090815260409020546001600160a01b031681565b34801561084c57600080fd5b5061037f61085b36600461449b565b61016460209081526000928352604080842090915290825290205481565b34801561088557600080fd5b5061037f600081565b34801561089a57600080fd5b506103f26108a93660046144c6565b61015e6020908152600092835260408084209091529082529020546001600160a01b031681565b3480156108dc57600080fd5b506103096108eb366004614481565b6101576020526000908152604090205460ff1681565b34801561090d57600080fd5b5061037f61091c3660046144c6565b61015f60209081526000928352604080842090915290825290205481565b34801561094657600080fd5b506103f273f10a7f10a7f10a7f10a7f10a7f10a7f10a7f10a781565b34801561096e57600080fd5b5061033e61097d366004613fdd565b6114fe565b34801561098e57600080fd5b5061037f61099d3660046144f1565b61016560209081526000938452604080852082529284528284209052825290205481565b3480156109cd57600080fd5b5061033e6109dc36600461455c565b61163a565b3480156109ed57600080fd5b5061033e6109fc3660046142a2565b611646565b348015610a0d57600080fd5b5061033e610a1c366004614311565b61166c565b348015610a2d57600080fd5b5061033e610a3c36600461455c565b611b3a565b348015610a4d57600080fd5b5061033e610a5c36600461455c565b611b5c565b348015610a6d57600080fd5b50610129546103f2906001600160a01b031681565b348015610a8e57600080fd5b5061033e610a9d36600461455c565b611b68565b348015610aae57600080fd5b506103f2610abd366004614481565b61015a602052600090815260409020546001600160a01b031681565b348015610ae557600080fd5b5061037f610af43660046141c1565b611b74565b348015610b0557600080fd5b5061037f7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b348015610b3957600080fd5b5061037f610b483660046144c6565b61016360209081526000928352604080842090915290825290205481565b60006001600160e01b03198216637965db0b60e01b1480610b9757506301ffc9a760e01b6001600160e01b03198316145b90505b919050565b610ba881611ce0565b50565b600082815260656020526040902060010154610bc881335b6120d4565b610bd28383612138565b505050565b6001600160a01b0381163314610c4c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610c5682826121be565b5050565b610c6381612225565b610ba881604051806020016040528060008152506000612250565b610c866123d1565b6101288054600091908290610ca09063ffffffff16614b5a565b91906101000a81548163ffffffff021916908363ffffffff16021790559050816001600160a01b031663edf565cc6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610cfa57600080fd5b505af1158015610d0e573d6000803e3d6000fd5b5050505063ffffffff8116600081815261015e6020908152604080832060018452825280832080546001600160a01b03199081166001600160a01b038d811691909117909255848052828520805482168c841617905594845261015a8352818420805486168a831617905561015b83528184208054861688831617905561015c835281842080549095169088169081179094558051630ce74fc560e31b8152905163673a7e2893600480840194938390030190829087803b158015610dd257600080fd5b505af1158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a91906142f9565b61015860008363ffffffff1663ffffffff168152602001908152602001600020819055507f901e73890694712ca72bdc627d356f05f11be45e7ccf490a8d4924c393bcb5658187878761015860008763ffffffff1663ffffffff168152602001908152602001600020548f8f8f8f8c8c604051610e919b9a99989796959493929190614880565b60405180910390a150505050505050505050565b610ead6123d1565b8615801590610ebb57508415155b8015610ec657508315155b8015610ed157508215155b8015610edc57508015155b610ee557600080fd5b63ffffffff88166000908152610157602052604090205460ff1615610f425760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610c43565b6101285463ffffffff9081169089161115610f905760405162461bcd60e51b815260206004820152600e60248201526d0d2dcc8caf040e8dede40d0d2ced60931b6044820152606401610c43565b63ffffffff8816600090815261015760209081526040808320805460ff1916600190811790915561015d835281842085905561015990925290912055610fd684896123fd565b6101285463ffffffff8916600081815261015e6020908152604080832060018452909152808220548280529181902054905163b0956b5f60e01b815260048101939093526001600160a01b03918216602484015281166044830152606482018a90526084820189905260a4820188905260c4820186905260e482018590526401000000009092049091169063b0956b5f9061010401600060405180830381600087803b15801561108557600080fd5b505af1158015611099573d6000803e3d6000fd5b5050610128546040516317b4d3fb60e31b815263ffffffff8c16600482015260016024820152670de0b6b3a76400006044820181905260648201526084810188905260a481018890526401000000009091046001600160a01b0316925063bda69fd8915060c401600060405180830381600087803b15801561111a57600080fd5b505af115801561112e573d6000803e3d6000fd5b505050505050505050505050565b61114582612225565b610c5682826001612250565b6111596123d1565b63ffffffff8216600081815261015c602090815260409182902080546001600160a01b038681166001600160a01b03198316811790935584519586521691840182905291830191909152907ffc4d69f373858d480cfc3f12e7cc7f9b12201291753ffc3babef0e7a8041979f906060015b60405180910390a1505050565b610c5682826000611244565b8060005b8181101561123e5761122c84848381811061121257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906112279190614481565b611ce0565b8061123681614b3f565b9150506111e7565b50505050565b338361124f81611ce0565b6112598282612673565b63ffffffff8516600090815261015e602090815260408083208615158452909152908190205490516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156112cd57600080fd5b505af11580156112e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611305919061426e565b61130e57600080fd5b63ffffffff851660009081526101676020908152604080832086151584528252808320338452909152812080548692906113499084906149aa565b909155505063ffffffff8516600090815261015960205260408120546113709060016149aa565b63ffffffff87166000818152610164602090815260408083203384528252808320859055928252610163815282822088151583529052908120805492935087929091906113be9084906149aa565b90915550506040517fd850f5d8405edb0730cd72e6bb9e228043c91fd591562543ea553efda14970b6906113fb9088908790899033908790614904565b60405180910390a1505050505050565b805160005b8181101561123e576114498484838151811061143c57634e487b7160e01b600052603260045260246000fd5b6020026020010151612673565b8061145381614b3f565b915050611410565b610c5682826001612774565b610c568282612673565b610c5682826000612774565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b63ffffffff84166000908152610160602090815260408083208515801585528184528285208686528452828520549085529083528184208585529092528220546114f386838361288b565b979650505050505050565b600054610100900460ff1680611517575060005460ff16155b6115335760405162461bcd60e51b8152600401610c4390614832565b600054610100900460ff16158015611555576000805461ffff19166101011790555b6001600160a01b0384161580159061157557506001600160a01b03831615155b801561158957506001600160a01b03821615155b61159257600080fd5b61159b846128aa565b61012980546001600160a01b0319166001600160a01b038581169182179092556101288054640100000000600160c01b031916640100000000868516908102919091179091556040805193881684526020840192909252908201527f48aa6e6153c5dedbe00925ab3c8e28c6ce0c1a80652b3369f176065e797b45079060600160405180910390a1801561123e576000805461ff001916905550505050565b610c568282600161292f565b6000828152606560205260409020600101546116628133610bc3565b610bd283836121be565b6116746123d1565b6001600160a01b0383161580159061169457506001600160a01b03821615155b80156116a857506001600160a01b03811615155b6116b157600080fd5b61012880546000919082906116cb9063ffffffff16614b5a565b91906101000a81548163ffffffff021916908363ffffffff16021790559050600061012860049054906101000a90046001600160a01b03169050826001600160a01b031663edf565cc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561174057600080fd5b505af1158015611754573d6000803e3d6000fd5b5050610129546040516001600160a01b03909116925063e6d304679150611781908c908c906020016147a4565b60405160208183030381529060405289896040516020016117a3929190614711565b604051602081830303815290604052848660016040518663ffffffff1660e01b81526004016117d69594939291906147de565b602060405180830381600087803b1580156117f057600080fd5b505af1158015611804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118289190613fc1565b63ffffffff8316600090815261015e602090815260408083206001845282529182902080546001600160a01b0319166001600160a01b03948516179055610129549151919092169163e6d3046791611884918d918d91016146e9565b60405160208183030381529060405289896040516020016118a69291906146cb565b604051602081830303815290604052848660006040518663ffffffff1660e01b81526004016118d99594939291906147de565b602060405180830381600087803b1580156118f357600080fd5b505af1158015611907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b9190613fc1565b63ffffffff8316600081815261015e60209081526040808320838052825280832080546001600160a01b03199081166001600160a01b039788161790915593835261015a8252808320805485168b871617905561015b82528083208054851689871617905561015c825280832080549094169489169485179093558251630ce74fc560e31b8152925163673a7e2893600480820194918390030190829087803b1580156119d757600080fd5b505af11580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0f91906142f9565b61015860008463ffffffff1663ffffffff168152602001908152602001600020819055507f901e73890694712ca72bdc627d356f05f11be45e7ccf490a8d4924c393bcb5658261015e60008563ffffffff1663ffffffff1681526020019081526020016000206000600115151515815260200190815260200160002060009054906101000a90046001600160a01b031661015e60008663ffffffff1663ffffffff16815260200190815260200160002060008015151515815260200190815260200160002060009054906101000a90046001600160a01b03168861015860008863ffffffff1663ffffffff168152602001908152602001600020548e8e8e8e8d8d604051611b279b9a99989796959493929190614880565b60405180910390a1505050505050505050565b611b426123d1565b63ffffffff909116600090815261015d6020526040902055565b610c568282600061292f565b610c5682826001611244565b600082611b8081612ade565b63ffffffff84166000908152610159602090815260408083205461016483528184206001600160a01b038a168552909252909120548015801590611bc45750818111155b15611cd65763ffffffff8616600090815261016560209081526040808320881515845282528083206001600160a01b038b1684529091529020548015611c3e5763ffffffff871660009081526101606020908152604080832089151584528252808320858452909152902054611c3a8282612b3b565b9550505b63ffffffff87166000908152610167602090815260408083208915845282528083206001600160a01b038c1684529091529020548015611cd35763ffffffff88166000908152610160602090815260408083208a158085528184528285208886528452828520549015855290835281842087855290925290912054611cc483838361288b565b611cce90896149aa565b975050505b50505b5050509392505050565b80611cea81612ade565b63ffffffff8216600090815261015c60209081526040808320548151630ce74fc560e31b815291516001600160a01b039091169263673a7e28926004808201939182900301818787803b158015611d4057600080fd5b505af1158015611d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7891906142f9565b63ffffffff841660009081526101596020908152604080832054610158909252909120549192509082148015906120cd5763ffffffff851660009081526101606020908152604080832060018452808352818420868552835281842054848052908352818420868552909252822054909180611df48988612b61565b63ffffffff8b16600090815261015e602090815260408083206001845282528083205481516318160ddd60e01b81529151959750939550611e9e9487946001600160a01b0316936318160ddd93600480850194919392918390030190829087803b158015611e6157600080fd5b505af1158015611e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9991906142f9565b612b3b565b63ffffffff8a16600090815261015e6020908152604080832083805282528083205481516318160ddd60e01b81529151949850611f099486946001600160a01b03909216936318160ddd93600480820194929392918390030190829087803b158015611e6157600080fd5b63ffffffff8a16600090815261015860205260409020889055925085611f2e81614b3f565b63ffffffff8b1660009081526101596020908152604080832084905561016082528083206001845280835281842085855283528184208a905583805282528083208484529091528120869055909750905080611f8b8b8787612d56565b9092509050611f9a8285614969565b9350611fa68184614969565b63ffffffff8c16600081815261015f6020908152604080832060018452909152808220889055818052908190208390556101285490516317b4d3fb60e31b81526004810192909252602482018b905260448201899052606482018890526084820187905260a482018390529194506401000000009091046001600160a01b03169063bda69fd89060c401600060405180830381600087803b15801561204a57600080fd5b505af115801561205e573d6000803e3d6000fd5b50506040805163ffffffff8f168152602081018c90529081018c9052606081018790526080810186905260a0810189905260c081018890527f69e662f95898affac086a5bc1177755bdaf7f4a40a3880364c48012170ee57fe925060e001905060405180910390a15050505050505b5050505050565b6120de828261147d565b610c56576120f6816001600160a01b03166014613055565b612101836020613055565b60405160200161211292919061472f565b60408051601f198184030181529082905262461bcd60e51b8252610c43916004016147cb565b612142828261147d565b610c565760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561217a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6121c8828261147d565b15610c565760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610c568133610bc3565b60006122837f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905061228e84613237565b60008351118061229b5750815b156122ac576122aa84846132dc565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166120cd57805460ff191660011781556040516001600160a01b038316602482015261232b90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526132dc565b50805460ff191681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b038381169116146123c85760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610c43565b6120cd856133c7565b6123fb7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336120d4565b565b670de0b6b3a76400008210156124555760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206d61726b6574207365656400000000000000006044820152606401610c43565b6000612462836002614a87565b905061246e8282613407565b63ffffffff8216600090815261015b6020526040908190205490516304831f7160e51b8152600481018390526001600160a01b0390911690639063ee2090602401600060405180830381600087803b1580156124c957600080fd5b505af11580156124dd573d6000803e3d6000fd5b5050505063ffffffff8216600090815261015e6020908152604080832060018452909152908190205490516340c10f1960e01b815273f10a7f10a7f10a7f10a7f10a7f10a7f10a7f10a76004820152602481018590526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561256257600080fd5b505af1158015612576573d6000803e3d6000fd5b5050505063ffffffff8216600090815261015e60209081526040808320838052909152908190205490516340c10f1960e01b815273f10a7f10a7f10a7f10a7f10a7f10a7f10a7f10a76004820152602481018590526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156125fa57600080fd5b505af115801561260e573d6000803e3d6000fd5b5050505063ffffffff8216600081815261015f6020908152604080832060018452825280832087905582805291829020869055815192835282018590527f6b73d8f672e796176444c21cb5429d8ea426e6f0f8a3b34e7057a808be5d19c691016111ca565b63ffffffff81166000908152610164602090815260408083206001600160a01b038616845290915290205480158015906126c3575063ffffffff8216600090815261015960205260409020548111155b15610bd2576126d482846001613448565b6126e082846000613448565b6126ec828460016135ac565b6126f8828460006135ac565b612704828460016136e2565b612710828460006136e2565b63ffffffff82166000818152610164602090815260408083206001600160a01b038816808552908352818420939093558051928352908201929092527fe03aa867e2345cc967d98e4c81f6b0707b5ef082d9d20bac3dcf95540acdeae491016111ca565b338361277f81611ce0565b6127898282612673565b6127938585613407565b63ffffffff85166000908152610161602090815260408083208615158452909152812080548692906127c69084906149aa565b909155505063ffffffff851660009081526101656020908152604080832086151584528252808320338452909152812080548692906128069084906149aa565b909155505063ffffffff85166000908152610159602052604081205461282d9060016149aa565b63ffffffff87166000908152610164602090815260408083203380855292529182902083905590519192507f50b8727b538cf16daeb79894e8bde5c1e975985071be8a8d7620675a5dddfc6b916113fb91899188918a918790614904565b6000816128988486614a87565b6128a291906149f0565b949350505050565b600054610100900460ff16806128c3575060005460ff16155b6128df5760405162461bcd60e51b8152600401610c4390614832565b600054610100900460ff16158015612901576000805461ffff19166101011790555b61290961382c565b6129116138af565b61291a8261390d565b8015610c56576000805461ff00191690555050565b338361293a81611ce0565b6129448282612673565b63ffffffff8516600090815261015e602090815260408083208615158452909152908190205490516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156129b857600080fd5b505af11580156129cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f0919061426e565b5063ffffffff85166000908152610166602090815260408083208615158452825280832033845290915281208054869290612a2c9084906149aa565b909155505063ffffffff851660009081526101596020526040812054612a539060016149aa565b63ffffffff8716600081815261016460209081526040808320338452825280832085905592825261016281528282208815158352905290812080549293508792909190612aa19084906149aa565b90915550506040517f191d5f0d51691cdc223884e5321013c9663c6b337a07d550c538d9dcbbd66203906113fb9088908790899033908790614904565b63ffffffff81166000908152610157602052604090205460ff16610ba85760405162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08191bd95cdb89dd08195e1a5cdd60621b6044820152606401610c43565b600081612b5084670de0b6b3a7640000614a87565b612b5a91906149f0565b9392505050565b63ffffffff82166000908152610158602090815260408083205461015f835281842060018552808452828520548580529352908320549192612ba383856149aa565b9050600080612bb4888787866139d6565b63ffffffff8a16600090815261015b602052604080822054905163452accd960e11b81526004810188905260248101849052939550919350916001600160a01b0390911690638a5599b290604401602060405180830381600087803b158015612c1c57600080fd5b505af1158015612c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5491906142f9565b90508015612c80578215612c7357612c6c81886149aa565b9650612c80565b612c7d81876149aa565b95505b6000612c8c8888613a4e565b905060008682612c9c828d614aa6565b612ca69190614a04565b612cb091906149c2565b90506000811215612d0957612cc481614b7e565b905088811115612cec57620186a0612cdf8a6201869f614a04565b612ce991906149c2565b90505b612cf6818a614ae5565b9850612d0281896149aa565b9750612d48565b87811115612d2f57620186a0612d22896201869f614a04565b612d2c91906149c2565b90505b612d39818a6149aa565b9850612d458189614ae5565b97505b505050505050509250929050565b63ffffffff8316600090815261016160209081526040808320600184529091528120548190819081908015612db85763ffffffff881660009081526101616020908152604080832060018452909152812055935083612db58188612b3b565b92505b5063ffffffff87166000908152610161602090815260408083208380529091529020548015612e135763ffffffff8816600090815261016160209081526040808320838052909152812055925082612e108187612b3b565b91505b5063ffffffff8716600090815261016360209081526040808320600184529091529020548015612eab576000612e498289613a64565b9050612e558187614aa6565b9550612e618186614969565b9450612e6d8285614aa6565b9350612e7a82898961288b565b612e849084614969565b63ffffffff8a16600090815261016360209081526040808320600184529091528120559250505b5063ffffffff87166000908152610163602090815260408083208380529091529020548015612f41576000612ee08288613a64565b9050612eec8186614aa6565b9450612ef88187614969565b9550612f048284614aa6565b9250612f1182888a61288b565b612f1b9085614969565b63ffffffff8a166000908152610163602090815260408083208380529091528120559350505b5063ffffffff8716600090815261016260209081526040808320600184529091529020548015612fb157612f758188613a64565b612f7f9086614aa6565b9450612f8b8184614aa6565b63ffffffff89166000908152610162602090815260408083206001845290915281205592505b5063ffffffff8716600090815261016260209081526040808320838052909152902054801561301f57612fe48187613a64565b612fee9085614aa6565b9350612ffa8183614aa6565b63ffffffff891660009081526101626020908152604080832083805290915281205591505b6130328861302d8688614969565b613a79565b61303e88600185613b7d565b61304a88600084613b7d565b505050935093915050565b60606000613064836002614a87565b61306f9060026149aa565b67ffffffffffffffff81111561309557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156130bf576020820181803683370190505b509050600360fc1b816000815181106130e857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061312557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000613149846002614a87565b6131549060016149aa565b90505b60018111156131e8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061319657634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106131ba57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936131e181614b28565b9050613157565b508315612b5a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c43565b803b61329b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610c43565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61333b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610c43565b600080846001600160a01b03168460405161335691906146af565b600060405180830381855af49150503d8060008114613391576040519150601f19603f3d011682016040523d82523d6000602084013e613396565b606091505b50915091506133be8282604051806060016040528060278152602001614bfe60279139613caa565b95945050505050565b6133d081613237565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b63ffffffff808316600090815261015b602090815260408083205461015a90925290912054610c56926001600160a01b0391821692339216908590613ce316565b63ffffffff8316600090815261016560209081526040808320841515845282528083206001600160a01b0386168452909152902054801561123e5763ffffffff84166000818152610165602090815260408083208615158085529083528184206001600160a01b038916808652908452828520859055858552610160845282852091855290835281842094845261016483528184209084528252808320548352929052908120546134fa908390612b3b565b63ffffffff8616600090815261015e6020908152604080832087151584529091529081902054905163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905292935091169063a9059cbb90604401602060405180830381600087803b15801561356c57600080fd5b505af1158015613580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a4919061426e565b505050505050565b63ffffffff8316600090815261016660209081526040808320841515845282528083206001600160a01b0386168452909152902054801561123e5763ffffffff84166000818152610166602090815260408083208615158085529083528184206001600160a01b0389168086529084528285208590558585526101608452828520918552908352818420948452610164835281842090845282528083205483529290529081205461365e908390613a64565b63ffffffff8616600090815261015b6020526040908190205490516375b5ffd160e11b81526001600160a01b0387811660048301526024820184905292935091169063eb6bffa290604401600060405180830381600087803b1580156136c357600080fd5b505af11580156136d7573d6000803e3d6000fd5b505050505050505050565b63ffffffff8316600090815261016760209081526040808320841515845282528083206001600160a01b0386168452909152902054801561123e5763ffffffff84166000908152610164602090815260408083206001600160a01b0387168452909152812054613757908690849086906114a8565b63ffffffff86166000818152610167602090815260408083208815801585529083528184206001600160a01b038b811680875291855283862086905595855261015e845282852091855292529182902054915163a9059cbb60e01b8152600481019190915260248101849052929350169063a9059cbb90604401602060405180830381600087803b1580156137eb57600080fd5b505af11580156137ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613823919061426e565b6120cd57600080fd5b600054610100900460ff1680613845575060005460ff16155b6138615760405162461bcd60e51b8152600401610c4390614832565b600054610100900460ff16158015613883576000805461ffff19166101011790555b61388b613d3d565b613893613d3d565b61389b613d3d565b8015610ba8576000805461ff001916905550565b600054610100900460ff16806138c8575060005460ff16155b6138e45760405162461bcd60e51b8152600401610c4390614832565b600054610100900460ff1615801561388b576000805461ffff1916610101179055613893613d3d565b600054610100900460ff1680613926575060005460ff16155b6139425760405162461bcd60e51b8152600401610c4390614832565b600054610100900460ff16158015613964576000805461ffff19166101011790555b6001600160a01b03821661397757600080fd5b613982600083613da7565b6139ac7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177583613da7565b61291a7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e383613da7565b81831060008082156139eb57508484036139f0565b508385035b63ffffffff8716600090815261015d60205260408120548590613a139084614a87565b613a1d91906149f0565b90506000613a3382670de0b6b3a7640000613a4e565b905080670de0b6b3a764000003935050505094509492505050565b6000818310613a5d5781612b5a565b5090919050565b6000670de0b6b3a7640000612b508385614a87565b6000811315613afa5763ffffffff8216600090815261015b6020526040908190205490516304831f7160e51b8152600481018390526001600160a01b0390911690639063ee2090602401600060405180830381600087803b158015613add57600080fd5b505af1158015613af1573d6000803e3d6000fd5b50505050610c56565b6000811215610c565763ffffffff8216600090815261015b60205260409020546001600160a01b0316631c499b55613b3183614b7e565b6040518263ffffffff1660e01b8152600401613b4f91815260200190565b600060405180830381600087803b158015613b6957600080fd5b505af11580156135a4573d6000803e3d6000fd5b6000811315613c115763ffffffff8316600090815261015e602090815260408083208515158452909152908190205490516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015613bf457600080fd5b505af1158015613c08573d6000803e3d6000fd5b50505050610bd2565b6000811215610bd25763ffffffff8316600090815261015e6020908152604080832085151584529091529020546001600160a01b03166342966c68613c5583614b7e565b6040518263ffffffff1660e01b8152600401613c7391815260200190565b600060405180830381600087803b158015613c8d57600080fd5b505af1158015613ca1573d6000803e3d6000fd5b50505050505050565b60608315613cb9575081612b5a565b825115613cc95782518084602001fd5b8160405162461bcd60e51b8152600401610c4391906147cb565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261123e908590613db1565b600054610100900460ff1680613d56575060005460ff16155b613d725760405162461bcd60e51b8152600401610c4390614832565b600054610100900460ff1615801561389b576000805461ffff19166101011790558015610ba8576000805461ff001916905550565b610c568282612138565b6000613e06826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613e839092919063ffffffff16565b805190915015610bd25780806020019051810190613e24919061426e565b610bd25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c43565b60606128a2848460008585843b613edc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c43565b600080866001600160a01b03168587604051613ef891906146af565b60006040518083038185875af1925050503d8060008114613f35576040519150601f19603f3d011682016040523d82523d6000602084013e613f3a565b606091505b50915091506114f3828286613caa565b60008083601f840112613f5b578182fd5b50813567ffffffffffffffff811115613f72578182fd5b602083019150836020828501011115613f8a57600080fd5b9250929050565b803563ffffffff81168114610b9a57600080fd5b600060208284031215613fb6578081fd5b8135612b5a81614bda565b600060208284031215613fd2578081fd5b8151612b5a81614bda565b600080600060608486031215613ff1578182fd5b8335613ffc81614bda565b9250602084013561400c81614bda565b9150604084013561401c81614bda565b809150509250925092565b60008060408385031215614039578182fd5b823561404481614bda565b915060208381013567ffffffffffffffff80821115614061578384fd5b818601915086601f830112614074578384fd5b81358181111561408657614086614bc4565b8060051b9150614097848301614938565b8181528481019084860184860187018b10156140b1578788fd5b8795505b838610156140da576140c681613f91565b8352600195909501949186019186016140b5565b508096505050505050509250929050565b600080604083850312156140fd578182fd5b823561410881614bda565b915060208381013567ffffffffffffffff80821115614125578384fd5b818601915086601f830112614138578384fd5b81358181111561414a5761414a614bc4565b61415c601f8201601f19168501614938565b91508082528784828501011115614171578485fd5b8084840185840137810190920192909252919491935090915050565b6000806040838503121561419f578182fd5b82356141aa81614bda565b91506141b860208401613f91565b90509250929050565b6000806000606084860312156141d5578283fd5b83356141e081614bda565b92506141ee60208501613f91565b9150604084013561401c81614bef565b60008060208385031215614210578182fd5b823567ffffffffffffffff80821115614227578384fd5b818501915085601f83011261423a578384fd5b813581811115614248578485fd5b8660208260051b850101111561425c578485fd5b60209290920196919550909350505050565b60006020828403121561427f578081fd5b8151612b5a81614bef565b60006020828403121561429b578081fd5b5035919050565b600080604083850312156142b4578182fd5b8235915060208301356142c681614bda565b809150509250929050565b6000602082840312156142e2578081fd5b81356001600160e01b031981168114612b5a578182fd5b60006020828403121561430a578081fd5b5051919050565b600080600080600080600060a0888a03121561432b578485fd5b873567ffffffffffffffff80821115614342578687fd5b61434e8b838c01613f4a565b909950975060208a0135915080821115614366578687fd5b506143738a828b01613f4a565b909650945050604088013561438781614bda565b9250606088013561439781614bda565b915060808801356143a781614bda565b8091505092959891949750929550565b600080600080600080600080600060e08a8c0312156143d4578283fd5b893567ffffffffffffffff808211156143eb578485fd5b6143f78d838e01613f4a565b909b50995060208c013591508082111561440f578485fd5b5061441c8c828d01613f4a565b90985096505060408a013561443081614bda565b945060608a013561444081614bda565b935060808a013561445081614bda565b925060a08a013561446081614bda565b915060c08a013561447081614bda565b809150509295985092959850929598565b600060208284031215614492578081fd5b612b5a82613f91565b600080604083850312156144ad578182fd5b6144b683613f91565b915060208301356142c681614bda565b600080604083850312156144d8578182fd5b6144e183613f91565b915060208301356142c681614bef565b600080600060608486031215614505578081fd5b61450e84613f91565b9250602084013561400c81614bef565b600080600060608486031215614532578081fd5b61453b84613f91565b9250602084013561454b81614bef565b929592945050506040919091013590565b6000806040838503121561456e578182fd5b61457783613f91565b946020939093013593505050565b600080600060608486031215614599578081fd5b6145a284613f91565b925060208401359150604084013561401c81614bef565b600080600080608085870312156145ce578182fd5b6145d785613f91565b93506020850135925060408501356145ee81614bef565b9396929550929360600135925050565b600080600080600080600080610100898b03121561461a578182fd5b61462389613f91565b9a60208a01359a5060408a013599606081013599506080810135985060a0810135975060c0810135965060e00135945092505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000815180845261469b816020860160208601614afc565b601f01601f19169290920160200192915050565b600082516146c1818460208701614afc565b9190910192915050565b600061667360f01b8252828460028401379101600201908152919050565b60006b0233637b0ba1029b437b93a160a51b82528284600c8401379101600c01908152919050565b600061199b60f21b8252828460028401379101600201908152919050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351614767816017850160208801614afc565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614798816028840160208801614afc565b01602801949350505050565b60006a0233637b0ba102637b733960ad1b82528284600b8401379101600b01908152919050565b600060208252612b5a6020830184614683565b600060a082526147f160a0830188614683565b82810360208401526148038188614683565b6001600160a01b03969096166040840152505063ffffffff929092166060830152151560809091015292915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b63ffffffff8c1681526001600160a01b038b811660208301528a8116604083015289811660608301526080820189905261012060a083018190526000916148ca8483018a8c614659565b915083820360c08501526148df82888a614659565b925080861660e085015280851661010085015250509c9b505050505050505050505050565b63ffffffff959095168552921515602085015260408401919091526001600160a01b03166060830152608082015260a00190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561496157614961614bc4565b604052919050565b600080821280156001600160ff1b038490038513161561498b5761498b614b98565b600160ff1b83900384128116156149a4576149a4614b98565b50500190565b600082198211156149bd576149bd614b98565b500190565b6000826149d1576149d1614bae565b600160ff1b8214600019841416156149eb576149eb614b98565b500590565b6000826149ff576149ff614bae565b500490565b60006001600160ff1b0381841382841380821686840486111615614a2a57614a2a614b98565b600160ff1b84871282811687830589121615614a4857614a48614b98565b858712925087820587128484161615614a6357614a63614b98565b87850587128184161615614a7957614a79614b98565b505050929093029392505050565b6000816000190483118215151615614aa157614aa1614b98565b500290565b60008083128015600160ff1b850184121615614ac457614ac4614b98565b6001600160ff1b0384018313811615614adf57614adf614b98565b50500390565b600082821015614af757614af7614b98565b500390565b60005b83811015614b17578181015183820152602001614aff565b8381111561123e5750506000910152565b600081614b3757614b37614b98565b506000190190565b6000600019821415614b5357614b53614b98565b5060010190565b600063ffffffff80831681811415614b7457614b74614b98565b6001019392505050565b6000600160ff1b821415614b9457614b94614b98565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ba857600080fd5b8015158114610ba857600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122017e6657cb5f2a2edd363f8a6e920712ee9dc101dad59a5b397a3e069b88aa0eb64736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106102e45760003560e01c8063867dfc6d11610190578063c0c53b8b116100dc578063e6b604e011610095578063f41cb1951161006f578063f41cb19514610aa2578063f68a327f14610ad9578063f72c0d8b14610af9578063f80c9b9214610b2d576102e4565b8063e6b604e014610a41578063e77772fe14610a61578063eeb0235214610a82576102e4565b8063c0c53b8b14610962578063c2b8007214610982578063c2e12471146109c1578063d547741f146109e1578063d88905c914610a01578063da04ce1414610a21576102e4565b80639c5b0ee311610149578063b054c4a111610123578063b054c4a11461088e578063b36f5374146108d0578063b3c7e21814610901578063bb0a45291461093a576102e4565b80639c5b0ee3146108095780639dc39e0f14610840578063a217fddf14610879576102e4565b8063867dfc6d1461073b5780638900bdfa1461075b578063897a07861461078957806391a9fa61146107a957806391d14854146107c957806392f6fe80146107e9576102e4565b80633d6a2b3f1161024f57806364e4a81d116102085780636f486c5b116101e25780636f486c5b1461068857806371fd9623146106c757806375b238fc146106e75780637a0e94f01461071b576102e4565b806364e4a81d1461060f578063682ad286146106485780636c8d2b9714610668576102e4565b80633d6a2b3f14610540578063414ffd50146105605780634f1ef286146105805780635ebaf1db14610593578063636190c8146105bc57806364d16f53146105ef576102e4565b8063248a9ca3116102a1578063248a9ca3146104385780632f2ff15d14610468578063348986841461048857806334daaa25146104c757806336568abe146105005780633659cfe614610520576102e4565b806301ffc9a7146102e957806305c8146f1461031e5780630e5140dc1461034057806314c88ffa1461038d5780631badf5c0146103bb57806321658e481461040a575b600080fd5b3480156102f557600080fd5b506103096103043660046142d1565b610b66565b60405190151581526020015b60405180910390f35b34801561032a57600080fd5b5061033e610339366004614481565b610b9f565b005b34801561034c57600080fd5b5061037f61035b3660046144f1565b61016760209081526000938452604080852082529284528284209052825290205481565b604051908152602001610315565b34801561039957600080fd5b5061037f6103a8366004614481565b6101596020526000908152604090205481565b3480156103c757600080fd5b506103f26103d6366004614481565b61015c602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610315565b34801561041657600080fd5b5061037f610425366004614481565b61015d6020526000908152604090205481565b34801561044457600080fd5b5061037f61045336600461428a565b60009081526065602052604090206001015490565b34801561047457600080fd5b5061033e6104833660046142a2565b610bab565b34801561049457600080fd5b5061037f6104a33660046144f1565b61016660209081526000938452604080852082529284528284209052825290205481565b3480156104d357600080fd5b5061037f6104e23660046144c6565b61016260209081526000928352604080842090915290825290205481565b34801561050c57600080fd5b5061033e61051b3660046142a2565b610bd7565b34801561052c57600080fd5b5061033e61053b366004613fa5565b610c5a565b34801561054c57600080fd5b5061033e61055b3660046143b7565b610c7e565b34801561056c57600080fd5b5061033e61057b3660046145fe565b610ea5565b61033e61058e3660046140eb565b61113c565b34801561059f57600080fd5b50610128546103f29064010000000090046001600160a01b031681565b3480156105c857600080fd5b50610128546105da9063ffffffff1681565b60405163ffffffff9091168152602001610315565b3480156105fb57600080fd5b5061033e61060a36600461449b565b611151565b34801561061b57600080fd5b5061037f61062a3660046144c6565b61016160209081526000928352604080842090915290825290205481565b34801561065457600080fd5b5061033e61066336600461455c565b6111d7565b34801561067457600080fd5b5061033e6106833660046141fe565b6111e3565b34801561069457600080fd5b5061037f6106a336600461451e565b61016060209081526000938452604080852082529284528284209052825290205481565b3480156106d357600080fd5b5061033e6106e2366004614585565b611244565b3480156106f357600080fd5b5061037f7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b34801561072757600080fd5b5061033e610736366004614027565b61140b565b34801561074757600080fd5b5061033e61075636600461455c565b61145b565b34801561076757600080fd5b5061037f610776366004614481565b6101586020526000908152604090205481565b34801561079557600080fd5b5061033e6107a436600461418d565b611467565b3480156107b557600080fd5b5061033e6107c436600461455c565b611471565b3480156107d557600080fd5b506103096107e43660046142a2565b61147d565b3480156107f557600080fd5b5061037f6108043660046145b9565b6114a8565b34801561081557600080fd5b506103f2610824366004614481565b61015b602052600090815260409020546001600160a01b031681565b34801561084c57600080fd5b5061037f61085b36600461449b565b61016460209081526000928352604080842090915290825290205481565b34801561088557600080fd5b5061037f600081565b34801561089a57600080fd5b506103f26108a93660046144c6565b61015e6020908152600092835260408084209091529082529020546001600160a01b031681565b3480156108dc57600080fd5b506103096108eb366004614481565b6101576020526000908152604090205460ff1681565b34801561090d57600080fd5b5061037f61091c3660046144c6565b61015f60209081526000928352604080842090915290825290205481565b34801561094657600080fd5b506103f273f10a7f10a7f10a7f10a7f10a7f10a7f10a7f10a781565b34801561096e57600080fd5b5061033e61097d366004613fdd565b6114fe565b34801561098e57600080fd5b5061037f61099d3660046144f1565b61016560209081526000938452604080852082529284528284209052825290205481565b3480156109cd57600080fd5b5061033e6109dc36600461455c565b61163a565b3480156109ed57600080fd5b5061033e6109fc3660046142a2565b611646565b348015610a0d57600080fd5b5061033e610a1c366004614311565b61166c565b348015610a2d57600080fd5b5061033e610a3c36600461455c565b611b3a565b348015610a4d57600080fd5b5061033e610a5c36600461455c565b611b5c565b348015610a6d57600080fd5b50610129546103f2906001600160a01b031681565b348015610a8e57600080fd5b5061033e610a9d36600461455c565b611b68565b348015610aae57600080fd5b506103f2610abd366004614481565b61015a602052600090815260409020546001600160a01b031681565b348015610ae557600080fd5b5061037f610af43660046141c1565b611b74565b348015610b0557600080fd5b5061037f7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b348015610b3957600080fd5b5061037f610b483660046144c6565b61016360209081526000928352604080842090915290825290205481565b60006001600160e01b03198216637965db0b60e01b1480610b9757506301ffc9a760e01b6001600160e01b03198316145b90505b919050565b610ba881611ce0565b50565b600082815260656020526040902060010154610bc881335b6120d4565b610bd28383612138565b505050565b6001600160a01b0381163314610c4c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610c5682826121be565b5050565b610c6381612225565b610ba881604051806020016040528060008152506000612250565b610c866123d1565b6101288054600091908290610ca09063ffffffff16614b5a565b91906101000a81548163ffffffff021916908363ffffffff16021790559050816001600160a01b031663edf565cc6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610cfa57600080fd5b505af1158015610d0e573d6000803e3d6000fd5b5050505063ffffffff8116600081815261015e6020908152604080832060018452825280832080546001600160a01b03199081166001600160a01b038d811691909117909255848052828520805482168c841617905594845261015a8352818420805486168a831617905561015b83528184208054861688831617905561015c835281842080549095169088169081179094558051630ce74fc560e31b8152905163673a7e2893600480840194938390030190829087803b158015610dd257600080fd5b505af1158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a91906142f9565b61015860008363ffffffff1663ffffffff168152602001908152602001600020819055507f901e73890694712ca72bdc627d356f05f11be45e7ccf490a8d4924c393bcb5658187878761015860008763ffffffff1663ffffffff168152602001908152602001600020548f8f8f8f8c8c604051610e919b9a99989796959493929190614880565b60405180910390a150505050505050505050565b610ead6123d1565b8615801590610ebb57508415155b8015610ec657508315155b8015610ed157508215155b8015610edc57508015155b610ee557600080fd5b63ffffffff88166000908152610157602052604090205460ff1615610f425760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610c43565b6101285463ffffffff9081169089161115610f905760405162461bcd60e51b815260206004820152600e60248201526d0d2dcc8caf040e8dede40d0d2ced60931b6044820152606401610c43565b63ffffffff8816600090815261015760209081526040808320805460ff1916600190811790915561015d835281842085905561015990925290912055610fd684896123fd565b6101285463ffffffff8916600081815261015e6020908152604080832060018452909152808220548280529181902054905163b0956b5f60e01b815260048101939093526001600160a01b03918216602484015281166044830152606482018a90526084820189905260a4820188905260c4820186905260e482018590526401000000009092049091169063b0956b5f9061010401600060405180830381600087803b15801561108557600080fd5b505af1158015611099573d6000803e3d6000fd5b5050610128546040516317b4d3fb60e31b815263ffffffff8c16600482015260016024820152670de0b6b3a76400006044820181905260648201526084810188905260a481018890526401000000009091046001600160a01b0316925063bda69fd8915060c401600060405180830381600087803b15801561111a57600080fd5b505af115801561112e573d6000803e3d6000fd5b505050505050505050505050565b61114582612225565b610c5682826001612250565b6111596123d1565b63ffffffff8216600081815261015c602090815260409182902080546001600160a01b038681166001600160a01b03198316811790935584519586521691840182905291830191909152907ffc4d69f373858d480cfc3f12e7cc7f9b12201291753ffc3babef0e7a8041979f906060015b60405180910390a1505050565b610c5682826000611244565b8060005b8181101561123e5761122c84848381811061121257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906112279190614481565b611ce0565b8061123681614b3f565b9150506111e7565b50505050565b338361124f81611ce0565b6112598282612673565b63ffffffff8516600090815261015e602090815260408083208615158452909152908190205490516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156112cd57600080fd5b505af11580156112e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611305919061426e565b61130e57600080fd5b63ffffffff851660009081526101676020908152604080832086151584528252808320338452909152812080548692906113499084906149aa565b909155505063ffffffff8516600090815261015960205260408120546113709060016149aa565b63ffffffff87166000818152610164602090815260408083203384528252808320859055928252610163815282822088151583529052908120805492935087929091906113be9084906149aa565b90915550506040517fd850f5d8405edb0730cd72e6bb9e228043c91fd591562543ea553efda14970b6906113fb9088908790899033908790614904565b60405180910390a1505050505050565b805160005b8181101561123e576114498484838151811061143c57634e487b7160e01b600052603260045260246000fd5b6020026020010151612673565b8061145381614b3f565b915050611410565b610c5682826001612774565b610c568282612673565b610c5682826000612774565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b63ffffffff84166000908152610160602090815260408083208515801585528184528285208686528452828520549085529083528184208585529092528220546114f386838361288b565b979650505050505050565b600054610100900460ff1680611517575060005460ff16155b6115335760405162461bcd60e51b8152600401610c4390614832565b600054610100900460ff16158015611555576000805461ffff19166101011790555b6001600160a01b0384161580159061157557506001600160a01b03831615155b801561158957506001600160a01b03821615155b61159257600080fd5b61159b846128aa565b61012980546001600160a01b0319166001600160a01b038581169182179092556101288054640100000000600160c01b031916640100000000868516908102919091179091556040805193881684526020840192909252908201527f48aa6e6153c5dedbe00925ab3c8e28c6ce0c1a80652b3369f176065e797b45079060600160405180910390a1801561123e576000805461ff001916905550505050565b610c568282600161292f565b6000828152606560205260409020600101546116628133610bc3565b610bd283836121be565b6116746123d1565b6001600160a01b0383161580159061169457506001600160a01b03821615155b80156116a857506001600160a01b03811615155b6116b157600080fd5b61012880546000919082906116cb9063ffffffff16614b5a565b91906101000a81548163ffffffff021916908363ffffffff16021790559050600061012860049054906101000a90046001600160a01b03169050826001600160a01b031663edf565cc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561174057600080fd5b505af1158015611754573d6000803e3d6000fd5b5050610129546040516001600160a01b03909116925063e6d304679150611781908c908c906020016147a4565b60405160208183030381529060405289896040516020016117a3929190614711565b604051602081830303815290604052848660016040518663ffffffff1660e01b81526004016117d69594939291906147de565b602060405180830381600087803b1580156117f057600080fd5b505af1158015611804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118289190613fc1565b63ffffffff8316600090815261015e602090815260408083206001845282529182902080546001600160a01b0319166001600160a01b03948516179055610129549151919092169163e6d3046791611884918d918d91016146e9565b60405160208183030381529060405289896040516020016118a69291906146cb565b604051602081830303815290604052848660006040518663ffffffff1660e01b81526004016118d99594939291906147de565b602060405180830381600087803b1580156118f357600080fd5b505af1158015611907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b9190613fc1565b63ffffffff8316600081815261015e60209081526040808320838052825280832080546001600160a01b03199081166001600160a01b039788161790915593835261015a8252808320805485168b871617905561015b82528083208054851689871617905561015c825280832080549094169489169485179093558251630ce74fc560e31b8152925163673a7e2893600480820194918390030190829087803b1580156119d757600080fd5b505af11580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0f91906142f9565b61015860008463ffffffff1663ffffffff168152602001908152602001600020819055507f901e73890694712ca72bdc627d356f05f11be45e7ccf490a8d4924c393bcb5658261015e60008563ffffffff1663ffffffff1681526020019081526020016000206000600115151515815260200190815260200160002060009054906101000a90046001600160a01b031661015e60008663ffffffff1663ffffffff16815260200190815260200160002060008015151515815260200190815260200160002060009054906101000a90046001600160a01b03168861015860008863ffffffff1663ffffffff168152602001908152602001600020548e8e8e8e8d8d604051611b279b9a99989796959493929190614880565b60405180910390a1505050505050505050565b611b426123d1565b63ffffffff909116600090815261015d6020526040902055565b610c568282600061292f565b610c5682826001611244565b600082611b8081612ade565b63ffffffff84166000908152610159602090815260408083205461016483528184206001600160a01b038a168552909252909120548015801590611bc45750818111155b15611cd65763ffffffff8616600090815261016560209081526040808320881515845282528083206001600160a01b038b1684529091529020548015611c3e5763ffffffff871660009081526101606020908152604080832089151584528252808320858452909152902054611c3a8282612b3b565b9550505b63ffffffff87166000908152610167602090815260408083208915845282528083206001600160a01b038c1684529091529020548015611cd35763ffffffff88166000908152610160602090815260408083208a158085528184528285208886528452828520549015855290835281842087855290925290912054611cc483838361288b565b611cce90896149aa565b975050505b50505b5050509392505050565b80611cea81612ade565b63ffffffff8216600090815261015c60209081526040808320548151630ce74fc560e31b815291516001600160a01b039091169263673a7e28926004808201939182900301818787803b158015611d4057600080fd5b505af1158015611d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7891906142f9565b63ffffffff841660009081526101596020908152604080832054610158909252909120549192509082148015906120cd5763ffffffff851660009081526101606020908152604080832060018452808352818420868552835281842054848052908352818420868552909252822054909180611df48988612b61565b63ffffffff8b16600090815261015e602090815260408083206001845282528083205481516318160ddd60e01b81529151959750939550611e9e9487946001600160a01b0316936318160ddd93600480850194919392918390030190829087803b158015611e6157600080fd5b505af1158015611e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9991906142f9565b612b3b565b63ffffffff8a16600090815261015e6020908152604080832083805282528083205481516318160ddd60e01b81529151949850611f099486946001600160a01b03909216936318160ddd93600480820194929392918390030190829087803b158015611e6157600080fd5b63ffffffff8a16600090815261015860205260409020889055925085611f2e81614b3f565b63ffffffff8b1660009081526101596020908152604080832084905561016082528083206001845280835281842085855283528184208a905583805282528083208484529091528120869055909750905080611f8b8b8787612d56565b9092509050611f9a8285614969565b9350611fa68184614969565b63ffffffff8c16600081815261015f6020908152604080832060018452909152808220889055818052908190208390556101285490516317b4d3fb60e31b81526004810192909252602482018b905260448201899052606482018890526084820187905260a482018390529194506401000000009091046001600160a01b03169063bda69fd89060c401600060405180830381600087803b15801561204a57600080fd5b505af115801561205e573d6000803e3d6000fd5b50506040805163ffffffff8f168152602081018c90529081018c9052606081018790526080810186905260a0810189905260c081018890527f69e662f95898affac086a5bc1177755bdaf7f4a40a3880364c48012170ee57fe925060e001905060405180910390a15050505050505b5050505050565b6120de828261147d565b610c56576120f6816001600160a01b03166014613055565b612101836020613055565b60405160200161211292919061472f565b60408051601f198184030181529082905262461bcd60e51b8252610c43916004016147cb565b612142828261147d565b610c565760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561217a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6121c8828261147d565b15610c565760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610c568133610bc3565b60006122837f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905061228e84613237565b60008351118061229b5750815b156122ac576122aa84846132dc565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166120cd57805460ff191660011781556040516001600160a01b038316602482015261232b90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526132dc565b50805460ff191681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b038381169116146123c85760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610c43565b6120cd856133c7565b6123fb7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336120d4565b565b670de0b6b3a76400008210156124555760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206d61726b6574207365656400000000000000006044820152606401610c43565b6000612462836002614a87565b905061246e8282613407565b63ffffffff8216600090815261015b6020526040908190205490516304831f7160e51b8152600481018390526001600160a01b0390911690639063ee2090602401600060405180830381600087803b1580156124c957600080fd5b505af11580156124dd573d6000803e3d6000fd5b5050505063ffffffff8216600090815261015e6020908152604080832060018452909152908190205490516340c10f1960e01b815273f10a7f10a7f10a7f10a7f10a7f10a7f10a7f10a76004820152602481018590526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561256257600080fd5b505af1158015612576573d6000803e3d6000fd5b5050505063ffffffff8216600090815261015e60209081526040808320838052909152908190205490516340c10f1960e01b815273f10a7f10a7f10a7f10a7f10a7f10a7f10a7f10a76004820152602481018590526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156125fa57600080fd5b505af115801561260e573d6000803e3d6000fd5b5050505063ffffffff8216600081815261015f6020908152604080832060018452825280832087905582805291829020869055815192835282018590527f6b73d8f672e796176444c21cb5429d8ea426e6f0f8a3b34e7057a808be5d19c691016111ca565b63ffffffff81166000908152610164602090815260408083206001600160a01b038616845290915290205480158015906126c3575063ffffffff8216600090815261015960205260409020548111155b15610bd2576126d482846001613448565b6126e082846000613448565b6126ec828460016135ac565b6126f8828460006135ac565b612704828460016136e2565b612710828460006136e2565b63ffffffff82166000818152610164602090815260408083206001600160a01b038816808552908352818420939093558051928352908201929092527fe03aa867e2345cc967d98e4c81f6b0707b5ef082d9d20bac3dcf95540acdeae491016111ca565b338361277f81611ce0565b6127898282612673565b6127938585613407565b63ffffffff85166000908152610161602090815260408083208615158452909152812080548692906127c69084906149aa565b909155505063ffffffff851660009081526101656020908152604080832086151584528252808320338452909152812080548692906128069084906149aa565b909155505063ffffffff85166000908152610159602052604081205461282d9060016149aa565b63ffffffff87166000908152610164602090815260408083203380855292529182902083905590519192507f50b8727b538cf16daeb79894e8bde5c1e975985071be8a8d7620675a5dddfc6b916113fb91899188918a918790614904565b6000816128988486614a87565b6128a291906149f0565b949350505050565b600054610100900460ff16806128c3575060005460ff16155b6128df5760405162461bcd60e51b8152600401610c4390614832565b600054610100900460ff16158015612901576000805461ffff19166101011790555b61290961382c565b6129116138af565b61291a8261390d565b8015610c56576000805461ff00191690555050565b338361293a81611ce0565b6129448282612673565b63ffffffff8516600090815261015e602090815260408083208615158452909152908190205490516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd90606401602060405180830381600087803b1580156129b857600080fd5b505af11580156129cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f0919061426e565b5063ffffffff85166000908152610166602090815260408083208615158452825280832033845290915281208054869290612a2c9084906149aa565b909155505063ffffffff851660009081526101596020526040812054612a539060016149aa565b63ffffffff8716600081815261016460209081526040808320338452825280832085905592825261016281528282208815158352905290812080549293508792909190612aa19084906149aa565b90915550506040517f191d5f0d51691cdc223884e5321013c9663c6b337a07d550c538d9dcbbd66203906113fb9088908790899033908790614904565b63ffffffff81166000908152610157602052604090205460ff16610ba85760405162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08191bd95cdb89dd08195e1a5cdd60621b6044820152606401610c43565b600081612b5084670de0b6b3a7640000614a87565b612b5a91906149f0565b9392505050565b63ffffffff82166000908152610158602090815260408083205461015f835281842060018552808452828520548580529352908320549192612ba383856149aa565b9050600080612bb4888787866139d6565b63ffffffff8a16600090815261015b602052604080822054905163452accd960e11b81526004810188905260248101849052939550919350916001600160a01b0390911690638a5599b290604401602060405180830381600087803b158015612c1c57600080fd5b505af1158015612c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5491906142f9565b90508015612c80578215612c7357612c6c81886149aa565b9650612c80565b612c7d81876149aa565b95505b6000612c8c8888613a4e565b905060008682612c9c828d614aa6565b612ca69190614a04565b612cb091906149c2565b90506000811215612d0957612cc481614b7e565b905088811115612cec57620186a0612cdf8a6201869f614a04565b612ce991906149c2565b90505b612cf6818a614ae5565b9850612d0281896149aa565b9750612d48565b87811115612d2f57620186a0612d22896201869f614a04565b612d2c91906149c2565b90505b612d39818a6149aa565b9850612d458189614ae5565b97505b505050505050509250929050565b63ffffffff8316600090815261016160209081526040808320600184529091528120548190819081908015612db85763ffffffff881660009081526101616020908152604080832060018452909152812055935083612db58188612b3b565b92505b5063ffffffff87166000908152610161602090815260408083208380529091529020548015612e135763ffffffff8816600090815261016160209081526040808320838052909152812055925082612e108187612b3b565b91505b5063ffffffff8716600090815261016360209081526040808320600184529091529020548015612eab576000612e498289613a64565b9050612e558187614aa6565b9550612e618186614969565b9450612e6d8285614aa6565b9350612e7a82898961288b565b612e849084614969565b63ffffffff8a16600090815261016360209081526040808320600184529091528120559250505b5063ffffffff87166000908152610163602090815260408083208380529091529020548015612f41576000612ee08288613a64565b9050612eec8186614aa6565b9450612ef88187614969565b9550612f048284614aa6565b9250612f1182888a61288b565b612f1b9085614969565b63ffffffff8a166000908152610163602090815260408083208380529091528120559350505b5063ffffffff8716600090815261016260209081526040808320600184529091529020548015612fb157612f758188613a64565b612f7f9086614aa6565b9450612f8b8184614aa6565b63ffffffff89166000908152610162602090815260408083206001845290915281205592505b5063ffffffff8716600090815261016260209081526040808320838052909152902054801561301f57612fe48187613a64565b612fee9085614aa6565b9350612ffa8183614aa6565b63ffffffff891660009081526101626020908152604080832083805290915281205591505b6130328861302d8688614969565b613a79565b61303e88600185613b7d565b61304a88600084613b7d565b505050935093915050565b60606000613064836002614a87565b61306f9060026149aa565b67ffffffffffffffff81111561309557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156130bf576020820181803683370190505b509050600360fc1b816000815181106130e857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061312557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000613149846002614a87565b6131549060016149aa565b90505b60018111156131e8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061319657634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106131ba57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936131e181614b28565b9050613157565b508315612b5a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c43565b803b61329b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610c43565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61333b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610c43565b600080846001600160a01b03168460405161335691906146af565b600060405180830381855af49150503d8060008114613391576040519150601f19603f3d011682016040523d82523d6000602084013e613396565b606091505b50915091506133be8282604051806060016040528060278152602001614bfe60279139613caa565b95945050505050565b6133d081613237565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b63ffffffff808316600090815261015b602090815260408083205461015a90925290912054610c56926001600160a01b0391821692339216908590613ce316565b63ffffffff8316600090815261016560209081526040808320841515845282528083206001600160a01b0386168452909152902054801561123e5763ffffffff84166000818152610165602090815260408083208615158085529083528184206001600160a01b038916808652908452828520859055858552610160845282852091855290835281842094845261016483528184209084528252808320548352929052908120546134fa908390612b3b565b63ffffffff8616600090815261015e6020908152604080832087151584529091529081902054905163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905292935091169063a9059cbb90604401602060405180830381600087803b15801561356c57600080fd5b505af1158015613580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a4919061426e565b505050505050565b63ffffffff8316600090815261016660209081526040808320841515845282528083206001600160a01b0386168452909152902054801561123e5763ffffffff84166000818152610166602090815260408083208615158085529083528184206001600160a01b0389168086529084528285208590558585526101608452828520918552908352818420948452610164835281842090845282528083205483529290529081205461365e908390613a64565b63ffffffff8616600090815261015b6020526040908190205490516375b5ffd160e11b81526001600160a01b0387811660048301526024820184905292935091169063eb6bffa290604401600060405180830381600087803b1580156136c357600080fd5b505af11580156136d7573d6000803e3d6000fd5b505050505050505050565b63ffffffff8316600090815261016760209081526040808320841515845282528083206001600160a01b0386168452909152902054801561123e5763ffffffff84166000908152610164602090815260408083206001600160a01b0387168452909152812054613757908690849086906114a8565b63ffffffff86166000818152610167602090815260408083208815801585529083528184206001600160a01b038b811680875291855283862086905595855261015e845282852091855292529182902054915163a9059cbb60e01b8152600481019190915260248101849052929350169063a9059cbb90604401602060405180830381600087803b1580156137eb57600080fd5b505af11580156137ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613823919061426e565b6120cd57600080fd5b600054610100900460ff1680613845575060005460ff16155b6138615760405162461bcd60e51b8152600401610c4390614832565b600054610100900460ff16158015613883576000805461ffff19166101011790555b61388b613d3d565b613893613d3d565b61389b613d3d565b8015610ba8576000805461ff001916905550565b600054610100900460ff16806138c8575060005460ff16155b6138e45760405162461bcd60e51b8152600401610c4390614832565b600054610100900460ff1615801561388b576000805461ffff1916610101179055613893613d3d565b600054610100900460ff1680613926575060005460ff16155b6139425760405162461bcd60e51b8152600401610c4390614832565b600054610100900460ff16158015613964576000805461ffff19166101011790555b6001600160a01b03821661397757600080fd5b613982600083613da7565b6139ac7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177583613da7565b61291a7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e383613da7565b81831060008082156139eb57508484036139f0565b508385035b63ffffffff8716600090815261015d60205260408120548590613a139084614a87565b613a1d91906149f0565b90506000613a3382670de0b6b3a7640000613a4e565b905080670de0b6b3a764000003935050505094509492505050565b6000818310613a5d5781612b5a565b5090919050565b6000670de0b6b3a7640000612b508385614a87565b6000811315613afa5763ffffffff8216600090815261015b6020526040908190205490516304831f7160e51b8152600481018390526001600160a01b0390911690639063ee2090602401600060405180830381600087803b158015613add57600080fd5b505af1158015613af1573d6000803e3d6000fd5b50505050610c56565b6000811215610c565763ffffffff8216600090815261015b60205260409020546001600160a01b0316631c499b55613b3183614b7e565b6040518263ffffffff1660e01b8152600401613b4f91815260200190565b600060405180830381600087803b158015613b6957600080fd5b505af11580156135a4573d6000803e3d6000fd5b6000811315613c115763ffffffff8316600090815261015e602090815260408083208515158452909152908190205490516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015613bf457600080fd5b505af1158015613c08573d6000803e3d6000fd5b50505050610bd2565b6000811215610bd25763ffffffff8316600090815261015e6020908152604080832085151584529091529020546001600160a01b03166342966c68613c5583614b7e565b6040518263ffffffff1660e01b8152600401613c7391815260200190565b600060405180830381600087803b158015613c8d57600080fd5b505af1158015613ca1573d6000803e3d6000fd5b50505050505050565b60608315613cb9575081612b5a565b825115613cc95782518084602001fd5b8160405162461bcd60e51b8152600401610c4391906147cb565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261123e908590613db1565b600054610100900460ff1680613d56575060005460ff16155b613d725760405162461bcd60e51b8152600401610c4390614832565b600054610100900460ff1615801561389b576000805461ffff19166101011790558015610ba8576000805461ff001916905550565b610c568282612138565b6000613e06826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613e839092919063ffffffff16565b805190915015610bd25780806020019051810190613e24919061426e565b610bd25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c43565b60606128a2848460008585843b613edc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c43565b600080866001600160a01b03168587604051613ef891906146af565b60006040518083038185875af1925050503d8060008114613f35576040519150601f19603f3d011682016040523d82523d6000602084013e613f3a565b606091505b50915091506114f3828286613caa565b60008083601f840112613f5b578182fd5b50813567ffffffffffffffff811115613f72578182fd5b602083019150836020828501011115613f8a57600080fd5b9250929050565b803563ffffffff81168114610b9a57600080fd5b600060208284031215613fb6578081fd5b8135612b5a81614bda565b600060208284031215613fd2578081fd5b8151612b5a81614bda565b600080600060608486031215613ff1578182fd5b8335613ffc81614bda565b9250602084013561400c81614bda565b9150604084013561401c81614bda565b809150509250925092565b60008060408385031215614039578182fd5b823561404481614bda565b915060208381013567ffffffffffffffff80821115614061578384fd5b818601915086601f830112614074578384fd5b81358181111561408657614086614bc4565b8060051b9150614097848301614938565b8181528481019084860184860187018b10156140b1578788fd5b8795505b838610156140da576140c681613f91565b8352600195909501949186019186016140b5565b508096505050505050509250929050565b600080604083850312156140fd578182fd5b823561410881614bda565b915060208381013567ffffffffffffffff80821115614125578384fd5b818601915086601f830112614138578384fd5b81358181111561414a5761414a614bc4565b61415c601f8201601f19168501614938565b91508082528784828501011115614171578485fd5b8084840185840137810190920192909252919491935090915050565b6000806040838503121561419f578182fd5b82356141aa81614bda565b91506141b860208401613f91565b90509250929050565b6000806000606084860312156141d5578283fd5b83356141e081614bda565b92506141ee60208501613f91565b9150604084013561401c81614bef565b60008060208385031215614210578182fd5b823567ffffffffffffffff80821115614227578384fd5b818501915085601f83011261423a578384fd5b813581811115614248578485fd5b8660208260051b850101111561425c578485fd5b60209290920196919550909350505050565b60006020828403121561427f578081fd5b8151612b5a81614bef565b60006020828403121561429b578081fd5b5035919050565b600080604083850312156142b4578182fd5b8235915060208301356142c681614bda565b809150509250929050565b6000602082840312156142e2578081fd5b81356001600160e01b031981168114612b5a578182fd5b60006020828403121561430a578081fd5b5051919050565b600080600080600080600060a0888a03121561432b578485fd5b873567ffffffffffffffff80821115614342578687fd5b61434e8b838c01613f4a565b909950975060208a0135915080821115614366578687fd5b506143738a828b01613f4a565b909650945050604088013561438781614bda565b9250606088013561439781614bda565b915060808801356143a781614bda565b8091505092959891949750929550565b600080600080600080600080600060e08a8c0312156143d4578283fd5b893567ffffffffffffffff808211156143eb578485fd5b6143f78d838e01613f4a565b909b50995060208c013591508082111561440f578485fd5b5061441c8c828d01613f4a565b90985096505060408a013561443081614bda565b945060608a013561444081614bda565b935060808a013561445081614bda565b925060a08a013561446081614bda565b915060c08a013561447081614bda565b809150509295985092959850929598565b600060208284031215614492578081fd5b612b5a82613f91565b600080604083850312156144ad578182fd5b6144b683613f91565b915060208301356142c681614bda565b600080604083850312156144d8578182fd5b6144e183613f91565b915060208301356142c681614bef565b600080600060608486031215614505578081fd5b61450e84613f91565b9250602084013561400c81614bef565b600080600060608486031215614532578081fd5b61453b84613f91565b9250602084013561454b81614bef565b929592945050506040919091013590565b6000806040838503121561456e578182fd5b61457783613f91565b946020939093013593505050565b600080600060608486031215614599578081fd5b6145a284613f91565b925060208401359150604084013561401c81614bef565b600080600080608085870312156145ce578182fd5b6145d785613f91565b93506020850135925060408501356145ee81614bef565b9396929550929360600135925050565b600080600080600080600080610100898b03121561461a578182fd5b61462389613f91565b9a60208a01359a5060408a013599606081013599506080810135985060a0810135975060c0810135965060e00135945092505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000815180845261469b816020860160208601614afc565b601f01601f19169290920160200192915050565b600082516146c1818460208701614afc565b9190910192915050565b600061667360f01b8252828460028401379101600201908152919050565b60006b0233637b0ba1029b437b93a160a51b82528284600c8401379101600c01908152919050565b600061199b60f21b8252828460028401379101600201908152919050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351614767816017850160208801614afc565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614798816028840160208801614afc565b01602801949350505050565b60006a0233637b0ba102637b733960ad1b82528284600b8401379101600b01908152919050565b600060208252612b5a6020830184614683565b600060a082526147f160a0830188614683565b82810360208401526148038188614683565b6001600160a01b03969096166040840152505063ffffffff929092166060830152151560809091015292915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b63ffffffff8c1681526001600160a01b038b811660208301528a8116604083015289811660608301526080820189905261012060a083018190526000916148ca8483018a8c614659565b915083820360c08501526148df82888a614659565b925080861660e085015280851661010085015250509c9b505050505050505050505050565b63ffffffff959095168552921515602085015260408401919091526001600160a01b03166060830152608082015260a00190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561496157614961614bc4565b604052919050565b600080821280156001600160ff1b038490038513161561498b5761498b614b98565b600160ff1b83900384128116156149a4576149a4614b98565b50500190565b600082198211156149bd576149bd614b98565b500190565b6000826149d1576149d1614bae565b600160ff1b8214600019841416156149eb576149eb614b98565b500590565b6000826149ff576149ff614bae565b500490565b60006001600160ff1b0381841382841380821686840486111615614a2a57614a2a614b98565b600160ff1b84871282811687830589121615614a4857614a48614b98565b858712925087820587128484161615614a6357614a63614b98565b87850587128184161615614a7957614a79614b98565b505050929093029392505050565b6000816000190483118215151615614aa157614aa1614b98565b500290565b60008083128015600160ff1b850184121615614ac457614ac4614b98565b6001600160ff1b0384018313811615614adf57614adf614b98565b50500390565b600082821015614af757614af7614b98565b500390565b60005b83811015614b17578181015183820152602001614aff565b8381111561123e5750506000910152565b600081614b3757614b37614b98565b506000190190565b6000600019821415614b5357614b53614b98565b5060010190565b600063ffffffff80831681811415614b7457614b74614b98565b6001019392505050565b6000600160ff1b821415614b9457614b94614b98565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ba857600080fd5b8015158114610ba857600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122017e6657cb5f2a2edd363f8a6e920712ee9dc101dad59a5b397a3e069b88aa0eb64736f6c63430008030033",
  "devdoc": {
    "author": "float.capital",
    "custom:auditors": "This contract balances long and short sides.",
    "details": "All functions in this file are currently `virtual`. This is NOT to encourage inheritance. It is merely for convenince when unit testing.",
    "kind": "dev",
    "methods": {
      "createNewSyntheticMarket(string,string,address,address,address)": {
        "details": "This does not make the market active. The `initializeMarket` function was split out separately to this function to reduce costs.",
        "params": {
          "_oracleManager": "The address of the oracle manager that provides the price feed for this market",
          "_paymentToken": "The address of the erc20 token used to buy this synthetic asset this will likely always be DAI",
          "_yieldManager": "The contract that manages depositing the paymentToken into a yield bearing protocol",
          "syntheticName": "Name of the synthetic asset",
          "syntheticSymbol": "Symbol for the synthetic asset"
        }
      },
      "createNewSyntheticMarketExternalSyntheticTokens(string,string,address,address,address,address,address)": {
        "details": "This does not make the market active. The `initializeMarket` function was split out separately to this function to reduce costs.",
        "params": {
          "_longToken": "Address for the long token.",
          "_oracleManager": "The address of the oracle manager that provides the price feed for this market",
          "_paymentToken": "The address of the erc20 token used to buy this synthetic asset this will likely always be DAI",
          "_shortToken": "Address for the short token.",
          "_yieldManager": "The contract that manages depositing the paymentToken into a yield bearing protocol",
          "syntheticName": "Name of the synthetic asset",
          "syntheticSymbol": "Symbol for the synthetic asset"
        }
      },
      "executeOutstandingNextPriceSettlementsUser(address,uint32)": {
        "params": {
          "marketIndex": "An uint32 which uniquely identifies a market.",
          "user": "The address of the user for whom to execute the function."
        }
      },
      "executeOutstandingNextPriceSettlementsUserMulti(address,uint32[])": {
        "params": {
          "marketIndexes": "An array of int32s which each uniquely identify a market.",
          "user": "The address of the user for whom to execute the function."
        }
      },
      "getAmountSyntheticTokenToMintOnTargetSide(uint32,uint256,bool,uint256)": {
        "details": "Intended for use primarily by Staker.sol",
        "params": {
          "amountSyntheticToken_redeemOnOriginSide": "Amount of synth token in wei.",
          "isShiftFromLong": "Whether the token shift is from long to short (true), or short to long (false).",
          "marketIndex": "An uint32 which uniquely identifies a market.",
          "priceSnapshotIndex": "Index which identifies which synth prices to use."
        },
        "returns": {
          "amountSyntheticTokensToMintOnTargetSide": "The amount in wei of tokens for the other side that the shift was worth."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getUsersConfirmedButNotSettledSynthBalance(address,uint32,bool)": {
        "details": "Used in SyntheticToken.sol balanceOf to allow for automatic reflection of next price actions.",
        "params": {
          "isLong": "Whether it is for the long synthetic asset or the short synthetic asset.",
          "marketIndex": "An uint32 which uniquely identifies a market.",
          "user": "The address of the user for whom to execute the function for."
        },
        "returns": {
          "confirmedButNotSettledBalance": "The amount in wei of tokens that the user is owed."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address)": {
        "details": "Calls OpenZeppelin's initializer modifier.",
        "params": {
          "_admin": "Address of the admin role.",
          "_staker": "Address of the contract which handles synthetic asset stakes.",
          "_tokenFactory": "Address of the contract which creates synthetic asset tokens."
        }
      },
      "initializeMarket(uint32,uint256,uint256,uint256,uint256,uint256,int256,uint256)": {
        "details": "Seperated from createNewSyntheticMarket due to gas considerations.",
        "params": {
          "balanceIncentiveCurve_equilibriumOffset": "An offset to account for naturally imbalanced markets when Float token issuance should differ for market sides. See Staker.sol",
          "balanceIncentiveCurve_exponent": "Sets the degree to which Float token issuance differs for market sides in unbalanced markets. See Staker.sol",
          "initialMarketSeedForEachMarketSide": "Amount of payment token that will be deposited in each market side to seed the market.",
          "kInitialMultiplier": "Linearly decreasing multiplier for Float token issuance for the market when staking synths.",
          "kPeriod": "Time which kInitialMultiplier will last",
          "marketIndex": "An int32 which uniquely identifies the market.",
          "unstakeFee_e18": "Base 1e18 percentage fee levied when unstaking for the market."
        }
      },
      "mintLongNextPrice(uint32,uint256)": {
        "params": {
          "amount": "Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.",
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "mintShortNextPrice(uint32,uint256)": {
        "params": {
          "amount": "Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.",
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "redeemLongNextPrice(uint32,uint256)": {
        "params": {
          "marketIndex": "An uint32 which uniquely identifies a market.",
          "tokens_redeem": "Amount in wei of synth tokens to redeem at the next oracle price."
        }
      },
      "redeemShortNextPrice(uint32,uint256)": {
        "params": {
          "marketIndex": "An uint32 which uniquely identifies a market.",
          "tokens_redeem": "Amount in wei of synth tokens to redeem at the next oracle price."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "shiftPositionFromLongNextPrice(uint32,uint256)": {
        "params": {
          "amountSyntheticTokensToShift": "Amount in wei of synthetic tokens to shift from long to short the next oracle price update.",
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "shiftPositionFromShortNextPrice(uint32,uint256)": {
        "params": {
          "amountSyntheticTokensToShift": "Amount in wei of synthetic tokens to shift from the short to long at the next oracle price update.",
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "shiftPositionNextPrice(uint32,uint256,bool)": {
        "details": "Called by external functions to shift either way. Intended for primary use by Staker.sol",
        "params": {
          "amountSyntheticTokensToShift": "Amount in wei of synthetic tokens to shift from the one side to the other at the next oracle price update.",
          "isShiftFromLong": "Whether the token shift is from long to short (true), or short to long (false).",
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateMarketOracle(uint32,address)": {
        "details": "Can only be called by the current admin.",
        "params": {
          "_newOracleManager": "Address of the replacement oracle manager.",
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "updateSystemState(uint32)": {
        "params": {
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "updateSystemStateMulti(uint32[])": {
        "params": {
          "marketIndexes": "An array of int32s which uniquely identify markets."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "PERMANENT_INITIAL_LIQUIDITY_HOLDER": {
        "details": "f10a7 spells float in hex - for fun - important part is that the private key for this address in not known."
      },
      "__constantsGap": {
        "details": "an empty allocation of storage for use in future upgrades - inspiration from OZ:      https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/10f0f1a95b1b0fd5520351886bae7a03490f1056/contracts/token/ERC20/ERC20Upgradeable.sol#L361"
      }
    },
    "title": "Core logic of Float Protocal markets",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "PERMANENT_INITIAL_LIQUIDITY_HOLDER()": {
        "notice": "this is the address that permanently locked initial liquidity for markets is held by. These tokens will never move so market can never have zero liquidity on a side."
      },
      "changeMarketTreasurySplitGradient(uint32,uint256)": {
        "notice": "changes the gradient of the line for determining the yield split between market and treasury."
      },
      "createNewSyntheticMarket(string,string,address,address,address)": {
        "notice": "Creates an entirely new long/short market tracking an underlying oracle price.  Make sure the synthetic names/symbols are unique."
      },
      "createNewSyntheticMarketExternalSyntheticTokens(string,string,address,address,address,address,address)": {
        "notice": "Creates an entirely new long/short market tracking an underlying oracle price.  Uses already created synthetic tokens."
      },
      "executeOutstandingNextPriceSettlementsUser(address,uint32)": {
        "notice": "After markets have been batched updated on a new oracle price, transfers any owed tokens to a user from their next price actions for that update to that user."
      },
      "executeOutstandingNextPriceSettlementsUserMulti(address,uint32[])": {
        "notice": "Executes outstanding next price settlements for a user for multiple markets."
      },
      "getAmountSyntheticTokenToMintOnTargetSide(uint32,uint256,bool,uint256)": {
        "notice": "Given an executed next price shift from tokens on one market side to the other, determines how many other side tokens the shift was worth."
      },
      "getUsersConfirmedButNotSettledSynthBalance(address,uint32,bool)": {
        "notice": "The amount of a synth token a user is owed following a batch execution. 4 possible states for next price actions: - \"Pending\" - means the next price update hasn't happened or been enacted on by the updateSystemState function. - \"Confirmed\" - means the next price has been updated by the updateSystemState function. There is still -               outstanding (lazy) computation that needs to be executed per user in the batch. - \"Settled\" - there is no more computation left for the user. - \"Non-existent\" - user has no next price actions. This function returns a calculated value only in the case of 'confirmed' next price actions. It should return zero for all other types of next price actions."
      },
      "initialize(address,address,address)": {
        "notice": "Initializes the contract."
      },
      "initializeMarket(uint32,uint256,uint256,uint256,uint256,uint256,int256,uint256)": {
        "notice": "Sets a market as active once it has already been setup by createNewSyntheticMarket."
      },
      "mintLongNextPrice(uint32,uint256)": {
        "notice": "Allows users to mint long synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle."
      },
      "mintShortNextPrice(uint32,uint256)": {
        "notice": "Allows users to mint short synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle."
      },
      "redeemLongNextPrice(uint32,uint256)": {
        "notice": "Allows users to redeem long synthetic assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle."
      },
      "redeemShortNextPrice(uint32,uint256)": {
        "notice": "Allows users to redeem short synthetic assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle."
      },
      "shiftPositionFromLongNextPrice(uint32,uint256)": {
        "notice": "Allows users to shift their position from long to short in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle."
      },
      "shiftPositionFromShortNextPrice(uint32,uint256)": {
        "notice": "Allows users to shift their position from short to long in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle."
      },
      "shiftPositionNextPrice(uint32,uint256,bool)": {
        "notice": "Allows users to shift their position from one side of the market to the other in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle."
      },
      "syntheticToken_priceSnapshot(uint32,bool,uint256)": {
        "notice": "synthetic token prices of a given market of a (long/short) at every previous price update"
      },
      "updateMarketOracle(uint32,address)": {
        "notice": "Update oracle for a market"
      },
      "updateSystemState(uint32)": {
        "notice": "Updates the state of a market to account for the latest oracle price update."
      },
      "updateSystemStateMulti(uint32[])": {
        "notice": "Updates the state of multiples markets to account for their latest oracle price updates."
      }
    },
    "notice": "visit https://float.capital for more info",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1148,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1151,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3583,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4482,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 350,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)345_storage)"
      },
      {
        "astId": 635,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1131,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1264,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10600,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "__constantsGap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10602,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "latestMarket",
        "offset": 0,
        "slot": "296",
        "type": "t_uint32"
      },
      {
        "astId": 10604,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "staker",
        "offset": 4,
        "slot": "296",
        "type": "t_address"
      },
      {
        "astId": 10606,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "tokenFactory",
        "offset": 0,
        "slot": "297",
        "type": "t_address"
      },
      {
        "astId": 10610,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "__globalStateGap",
        "offset": 0,
        "slot": "298",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10614,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "marketExists",
        "offset": 0,
        "slot": "343",
        "type": "t_mapping(t_uint32,t_bool)"
      },
      {
        "astId": 10618,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "assetPrice",
        "offset": 0,
        "slot": "344",
        "type": "t_mapping(t_uint32,t_int256)"
      },
      {
        "astId": 10623,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "marketUpdateIndex",
        "offset": 0,
        "slot": "345",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 10627,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "paymentTokens",
        "offset": 0,
        "slot": "346",
        "type": "t_mapping(t_uint32,t_address)"
      },
      {
        "astId": 10631,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "yieldManagers",
        "offset": 0,
        "slot": "347",
        "type": "t_mapping(t_uint32,t_address)"
      },
      {
        "astId": 10635,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "oracleManagers",
        "offset": 0,
        "slot": "348",
        "type": "t_mapping(t_uint32,t_address)"
      },
      {
        "astId": 10639,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "marketTreasurySplitGradient_e18",
        "offset": 0,
        "slot": "349",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 10646,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "syntheticTokens",
        "offset": 0,
        "slot": "350",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_address))"
      },
      {
        "astId": 10653,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "marketSideValueInPaymentToken",
        "offset": 0,
        "slot": "351",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_uint256))"
      },
      {
        "astId": 10663,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "syntheticToken_priceSnapshot",
        "offset": 0,
        "slot": "352",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 10669,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "batched_amountPaymentToken_deposit",
        "offset": 0,
        "slot": "353",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_uint256))"
      },
      {
        "astId": 10675,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "batched_amountSyntheticToken_redeem",
        "offset": 0,
        "slot": "354",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_uint256))"
      },
      {
        "astId": 10681,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "batched_amountSyntheticToken_toShiftAwayFrom_marketSide",
        "offset": 0,
        "slot": "355",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_uint256))"
      },
      {
        "astId": 10687,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "userNextPrice_currentUpdateIndex",
        "offset": 0,
        "slot": "356",
        "type": "t_mapping(t_uint32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10695,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "userNextPrice_paymentToken_depositAmount",
        "offset": 0,
        "slot": "357",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 10703,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "userNextPrice_syntheticToken_redeemAmount",
        "offset": 0,
        "slot": "358",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 10711,
        "contract": "contracts/LongShort.sol:LongShort",
        "label": "userNextPrice_syntheticToken_toShiftAwayFrom_marketSide",
        "offset": 0,
        "slot": "359",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_address,t_uint256)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bool,t_address)": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bool,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bool,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bool,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)345_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)345_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_address)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint32,t_mapping(t_bool,t_address))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bool => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_address)"
      },
      "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bool => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bool => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_uint32,t_mapping(t_bool,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bool => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_uint256)"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)345_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 342,
            "contract": "contracts/LongShort.sol:LongShort",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 344,
            "contract": "contracts/LongShort.sol:LongShort",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}