// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.3;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";

import "./interfaces/IYieldManager.sol";
import "./interfaces/aave/ILendingPool.sol";

/// @title YieldManagerAave
/// @notice contract is used to manage the yield generated by the underlying tokens. YieldManagerAave is an implementation of a yield manager that earns APY from the Aave protocol. Each fund's payment token (such as DAI) has a corresponding aToken (such as aDAI) that continuously accrues interest based on a lend/borrow liquidity ratio.
/// @dev https://docs.aave.com/portal/
contract YieldManagerAave is IYieldManager {
  /*╔═════════════════════════════╗
    ║          VARIABLES          ║
    ╚═════════════════════════════╝*/

  /// @notice address of admin role
  address public admin;
  /// @notice address of longShort contract
  address public longShort;
  /// @notice address of treasury contract
  address public treasury;

  /// @notice The payment token the yield manager supports
  /// @dev DAI token
  ERC20 public paymentToken;
  /// @notice The token representing the interest accruing payment token position from Aave
  /// @dev ADAI token
  IERC20Upgradeable public aToken;
  /// @notice The specific Aave lending pool contract
  ILendingPool public lendingPool;

  /// @dev An aave specific referralCode that has been a depricated feature. This will be set to 0 for "no referral" at deployment
  uint16 referralCode;

  /// @notice distributed yield not yet transferred to the treasury
  uint256 public override totalReservedForTreasury;

  /*╔═════════════════════════════╗
    ║          MODIFIERS          ║
    ╚═════════════════════════════╝*/

  /// @dev only allow admin to execute modified functions
  modifier adminOnly() {
    require(msg.sender == admin, "Not admin");
    _;
  }

  /// @dev only allow longShort contract to execute modified functions
  modifier longShortOnly() {
    require(msg.sender == longShort, "Not longShort");
    _;
  }

  /// @dev only allow treasury contract to execute modified functions
  modifier treasuryOnly() {
    require(msg.sender == treasury, "Not treasury");
    _;
  }

  /*╔═════════════════════════════╗
    ║       CONTRACT SET-UP       ║
    ╚═════════════════════════════╝*/

  /** 
    @notice Constructor for initializing the aave yield manager with a given payment token and corresponding Aave contracts
    @param _admin address of admin
    @param _longShort address of the longShort contract
    @param _treasury address of the treasury contract
    @param _paymentToken address of the payment token
    @param _aToken address of the interest accruing token linked to the payment token
    @param _lendingPool address of the aave lending pool contract
    @param _aaveReferralCode unique code for aave referrals
    @dev referral code will be set to 0, depricated Aave feature
  */
  constructor(
    address _admin,
    address _longShort,
    address _treasury,
    address _paymentToken,
    address _aToken,
    address _lendingPool,
    uint16 _aaveReferralCode
  ) {
    admin = _admin;
    longShort = _longShort;
    treasury = _treasury;

    referralCode = _aaveReferralCode;

    paymentToken = ERC20(_paymentToken);
    aToken = IERC20Upgradeable(_aToken);
    lendingPool = ILendingPool(_lendingPool);

    // Approve tokens for aave lending pool maximally.
    paymentToken.approve(address(lendingPool), type(uint256).max);
  }

  /*╔═════════════════════════════╗
    ║       MULTI-SIG ADMIN       ║
    ╚═════════════════════════════╝*/

  /** 
   @notice admin only function to update admin
   @param _admin New admin address
  */
  function changeAdmin(address _admin) external adminOnly {
    admin = _admin;
  }

  /*╔════════════════════════╗
    ║     IMPLEMENTATION     ║
    ╚════════════════════════╝*/

  /** 
   @notice Allows the LongShort contract to deposit tokens into the aave pool
   @param amount Amount of payment token to deposit
  */
  function depositPaymentToken(uint256 amount) public override longShortOnly {
    // Transfer tokens to manager contract.
    paymentToken.transferFrom(longShort, address(this), amount);

    // Deposit the desired amount of tokens into the aave pool
    lendingPool.deposit(address(paymentToken), amount, address(this), referralCode);
  }

  /// @notice Allows the LongShort contract to redeem aTokens for the payment token
  /// @param amount Amount of payment token to withdraw
  /// @dev This will fail if not enough liquidity is avaiable on aave.
  function withdrawPaymentToken(uint256 amount) public override longShortOnly {
    lendingPool.withdraw(address(paymentToken), amount, address(this));

    // Transfer payment tokens back to LongShort contract.
    paymentToken.transfer(longShort, amount);
  }

  /**  
    @notice Allows for withdrawal of other erc20 tokens to the treasury contract
    @param erc20Token Erc20 token that is to be withdrawn
    @dev This is specifically implemented to allow withdrawal of aave reward wMatic tokens accrued, requires calling aave's claimRewardsOnBehalf: https://docs.aave.com/developers/guides/liquidity-mining
  */
  function withdrawErc20TokenToTreasury(address erc20Token) external override treasuryOnly {
    // Disallow withdrawal of erc20 aToken
    require(erc20Token != address(aToken), "Cannot withdraw aToken to treasury");

    uint256 amount = IERC20Upgradeable(erc20Token).balanceOf(address(this));

    // Transfer tokens to treasury
    IERC20Upgradeable(erc20Token).transfer(treasury, amount);

    emit WithdrawErc20TokenToTreasury(erc20Token, amount);
  }

  /**    
    @notice Calculates and updates the yield allocation to the treasury and the market
    @dev treasuryPercent = 1 - marketPercent
    @param totalValueRealizedForMarket total value of long and short side of the market
    @param treasuryYieldPercentE18 Percentage of yield in base 1e18 that is allocated to the treasury
    @return The market allocation of the yield
  */
  function distributeYieldForTreasuryAndReturnMarketAllocation(
    uint256 totalValueRealizedForMarket,
    uint256 treasuryYieldPercentE18
  ) public override longShortOnly returns (uint256) {
    uint256 totalHeld = aToken.balanceOf(address(this));

    uint256 totalRealized = totalValueRealizedForMarket + totalReservedForTreasury;

    if (totalRealized == totalHeld) {
      return 0;
    }

    // will revert in case totalRealized > totalHeld which should be never.
    uint256 unrealizedYield = totalHeld - totalRealized;

    uint256 amountForTreasury = (unrealizedYield * treasuryYieldPercentE18) / 1e18;
    uint256 amountForMarketIncentives = unrealizedYield - amountForTreasury;

    totalReservedForTreasury += amountForTreasury;

    emit YieldDistributed(unrealizedYield, treasuryYieldPercentE18);

    return amountForMarketIncentives;
  }

  /// @notice Withdraw treasury allocated accrued yield from the lending pool to the treasury contract
  /// @dev This will fail if not enough liquidity is avaiable on aave.
  function withdrawTreasuryFunds() external override {
    uint256 amountToWithdrawForTreasury = totalReservedForTreasury;
    totalReservedForTreasury = 0;

    // Redeem aToken for payment tokens.
    lendingPool.withdraw(address(paymentToken), amountToWithdrawForTreasury, treasury);

    emit WithdrawTreasuryFunds();
  }
}
