// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function mockableFunctionBody(functionName, storageParameters, mockerParameterCalls) {
  return "\nif(shouldUseMock && keccak256(abi.encodePacked(functionToNotMock)) != keccak256(abi.encodePacked(\"" + functionName + "\"))){\n  " + storageParameters + "\n  return mocker." + functionName + "Mock(" + mockerParameterCalls + ");\n} else {\n  return " + functionName + "InternalLogic(" + mockerParameterCalls + ");\n}\n}\n";
}

function externalMockerFunctionBody(functionName, mockerArguments, mockerReturnValues, mockerReturn) {
  return "\n  function " + functionName + "Mock(" + mockerArguments + ") public pure " + mockerReturnValues + "{\n    return (" + mockerReturn + ");\n  }\n";
}

function mockableModifierBody(functionName, storageParameters, mockerParameterCalls, functionBody) {
  return "\nif(shouldUseMock && keccak256(abi.encodePacked(functionToNotMock)) != keccak256(abi.encodePacked(\"" + functionName + "\"))){\n  " + storageParameters + "\n  mocker." + functionName + "Mock(" + mockerParameterCalls + ");\n  _;\n} else {\n  " + functionBody + "\n}\n";
}

function externalMockerModifierBody(functionName, mockerArguments) {
  return "\nfunction " + functionName + "Mock(" + mockerArguments + ") public pure {}\n";
}

function internalMockingFileTemplate(fileNameWithoutExtension, parentImports, contractBody) {
  return "// SPDX-License-Identifier: BUSL-1.1 \n pragma solidity 0.8.3;\n\nimport \"./" + fileNameWithoutExtension + "Mockable.sol\";\n\n" + parentImports + "\n\ncontract " + fileNameWithoutExtension + "ForInternalMocking {\n  " + contractBody + "\n}";
}

function mockingFileTemplate(prefix, fileNameWithoutExtension, modifiersAndOpener, suffix) {
  return prefix + "\nimport \"./" + fileNameWithoutExtension + "ForInternalMocking.sol\";\n\ncontract " + fileNameWithoutExtension + "Mockable" + modifiersAndOpener + "\n\n  " + fileNameWithoutExtension + "ForInternalMocking mocker;\n  bool shouldUseMock;\n  string functionToNotMock;\n\n  function setMocker(" + fileNameWithoutExtension + "ForInternalMocking _mocker) external {\n    mocker = _mocker;\n    shouldUseMock = true;\n  }\n\n  function setFunctionToNotMock(string calldata _functionToNotMock) external {\n    functionToNotMock = _functionToNotMock;\n  }\n\n" + suffix + "\n";
}

exports.mockableFunctionBody = mockableFunctionBody;
exports.externalMockerFunctionBody = externalMockerFunctionBody;
exports.mockableModifierBody = mockableModifierBody;
exports.externalMockerModifierBody = externalMockerModifierBody;
exports.internalMockingFileTemplate = internalMockingFileTemplate;
exports.mockingFileTemplate = mockingFileTemplate;
/* No side effect */
